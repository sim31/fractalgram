{"version":3,"file":"87.f9efe67c5df9f5da39e2.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/versionNotification.txt","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/hooks/useInterval.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\n// @ts-ignore\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddReducer('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n","export default \"**Telegram Web Z was updated to version 1.27**\\n\\n🎄 **Happy New Year 2022!** 🎄\\n\\n👏 **Harder**\\n• Protected Content in Groups and Channels:\\n  – Content creators can restrict the ability to forward messages from their groups and channels.\\n  – When forwarding is restricted, users will also be unable to directly save media from the chat or take screenshots.\\n  – Toggle this option on or off via Chat Info > Group / Channel Type.\\n• Anonymous Posting in Public Groups\\n  – Comment as one of your channels in public groups and channel comments.\\n  – Tap the profile picture next to the message bar to choose which channel you will appear as when you send the message.\\n• Your peers will now be notified when you are typing a message or selecting a sticker.\\n\\n🤩 **Better**\\n• Detailed info is now shown when moving cursor over message timestamp.\\n\\n🚀 **Faster**\\n• Some optimizations for heavy calculations.\\n• The UI is even more responsive now.\\n\\n💪 **Stronger**\\n• Fixed updating edited media.\\n• Fixed switching folders with the same name.\\n• Fix frozen scroll and missing UI elements when animations are turned off.\\n• Fixed completely turning off animations.\\n\";","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('sendMessageAction', (global, actions, payload) => {\n  (async () => {\n    const { action, chatId, threadId } = payload!;\n    if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n    const chat = selectChat(global, chatId)!;\n    if (!chat) return;\n\n    await callApi('sendMessageAction', {\n      peer: chat, threadId, action,\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadSeenBy', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSeenBy', { chat, messageId });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n      seenByUserIds: result,\n    }));\n  })();\n});\n\naddReducer('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddReducer('loadSendAs', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSendAs', { chat });\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChat(global, chatId, {\n      sendAsIds: result.ids,\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddReducer('loadSponsoredMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSponsoredMessages', { chat });\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = updateSponsoredMessage(getGlobal(), chatId, result.messages[0]);\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    newGlobal = addChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUsers,\n  addUserStatuses,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectCountNotMutedUnread,\n  selectLastServiceNotification,\n} from '../../selectors';\nimport { isUserId } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isUserId(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceUserStatuses(global, result.userStatusesById);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const result = await callApi('fetchUsers', { users });\n  if (!result) {\n    return;\n  }\n\n  const { users: updatedUsers, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, replaceUserStatuses, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchUsers', { users: [user] });\n    if (!result) {\n      return;\n    }\n\n    const { users, userStatusesById } = result;\n\n    global = getGlobal();\n\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n    setGlobal(replaceUserStatuses(global, {\n      ...global.users.statusesById,\n      ...userStatusesById,\n    }));\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutNewMessage } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n      notifyAboutNewMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n} from '../../selectors';\nimport { getMessageContent, isUserId, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            !!nextOffset || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: string;\n  globalSearchChatId?: string;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<string, ApiChat>;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption, setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  allListIds: GlobalState['chats']['listIds'];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  allListIds,\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(allListIds, chatsById, usersById, folder, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, allListIds, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats'), id: ALL_FOLDER_ID },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { listIds: allListIds, byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      allListIds,\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  const handleMouseUp = () => {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  };\n\n  const initResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  };\n\n  const resetResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  };\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    const stopDrag = () => {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      onResize(elementRef.current!.offsetWidth);\n      unmarkIsActive();\n    };\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isUserId,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<string, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && !!renderingPinnedMessage)\n          || (shouldRenderAudioPlayer && !!renderingAudioMessage)\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        id={id}\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000, lang)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openUserInfo } = getDispatch();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getDispatch();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getDispatch();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getDispatch();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getDispatch();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectIsMessageProtected,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n};\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { id: messageId, chatId } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = (\n    forwardInfo && (!isChatWithSelf || isScheduled) && !isRepliesChat && !forwardInfo.isLinkedChannelPost\n  );\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    isSwiped,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    Boolean(isScheduled),\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = (\n    threadInfo && (!isInDocumentGroup || isLastInDocumentGroup) && messageListType === 'thread' && !noComments\n  );\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMetaClick}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup) && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMetaClick}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender: canShowSender ? sender : undefined,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import { RefObject } from 'react';\nimport React, { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n) {\n  const { setReplyingToId } = getDispatch();\n\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n    } else if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply]);\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    isSwiped,\n  };\n}\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isUserId(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else if (isUserId(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [focusMessage, forwardInfo?.channelPostId, lang, openChat, openUserInfo, senderPeer, showNotification]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../modules/selectors';\nimport { getChatTitle, getUserFullName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  const handleClick = () => {\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getDispatch } from '../../lib/teact/teactn';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getDispatch();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const { loadViewportMessages, setScrollOffset, loadSponsoredMessages } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      e.preventDefault();\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getDispatch();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots?.[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import { useEffect, useLayoutEffect, useRef } from '../lib/teact/teact';\n\nfunction useInterval(callback: NoneToVoidFunction, delay?: number, noFirst = false) {\n  const savedCallback = useRef(callback);\n\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay === undefined) {\n      return undefined;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n    if (!noFirst) savedCallback.current();\n\n    return () => clearInterval(id);\n  }, [delay, noFirst]);\n}\n\nexport default useInterval;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getDispatch();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getDispatch();\n\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n  selectUserStatus,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport SendAsMenu from './SendAsMenu.async';\nimport Avatar from '../../common/Avatar';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    usersById?: Record<string, ApiUser>;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    serverTimeOffset: number;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n  } = getDispatch();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && !sendAsIds && isReady) {\n      loadSendAs({ chatId });\n    }\n  }, [chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          void handleSend();\n        }\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {sendAsIds && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className=\"send-as-button\"\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const usersById = global.users.byId;\n    const chatsById = global.chats.byId;\n    const { currentUserId } = global;\n    const sendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsUser = sendAsId ? usersById?.[sendAsId] : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? chatsById?.[sendAsId] : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: Boolean(\n        !isChatWithSelf && !isChatWithBot && chat && chatUser\n        && isUserId(chatId) && selectUserStatus(global, chatId)?.wasOnline,\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      usersById,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n    };\n  },\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: cleanHtml });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n) => {\n  const { editMessage } = getDispatch();\n\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    animationLevel, currentTransitionKey, prevTransitionKey, chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    withBottomShift={withMessageListBottomShift}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {lang('BotStart')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {lang('BotRestart')}\n                        </Button>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                    <SeenByModal isOpen={isSeenByModalOpen} />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isUserId(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  animationLevel?: number,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (animationLevel !== ANIMATION_LEVEL_MIN) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: animationLevel !== ANIMATION_LEVEL_MIN ? handleOpenEnd : undefined,\n    handleSlideStop: animationLevel !== ANIMATION_LEVEL_MIN ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact,\n  isChatAdmin,\n  isChatChannel,\n  isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar, addContact,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      canAddContact,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  userId?: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    openUserInfo,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, userStatusesById, chatsById, chatMessages, foundIds, chatId, lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n    }\n    if (resolvedUserId) {\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getDispatch();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  currentProfileUserId?: string;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    openUserInfo,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getDispatch();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory<ApiMediaFormat.BlobUrl>(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n  } = getDispatch();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n    };\n  },\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","leftColumnWidth","management","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","result","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","sendAs","selectSendAs","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","setsById","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","loadAndReplaceArchivedChats","CHAT_LIST_LOAD_SLICE","archived","withPinned","updateUsers","addUserStatuses","userStatusesById","updateChats","replaceChatListIds","updateChatListSecondaryInfo","loadAndUpdateUsers","contactIds","contactList","updatedUsers","loadTopMessages","afterSyncCallback","DEBUG","console","log","savedUsers","lastLocalServiceMessage","selectLastServiceNotification","savedPrivateChatIds","savedChats","currentChatId","selectedChat","isUserId","selectedChatUser","replaceUserStatuses","replaceChats","draftsById","replyingToById","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","reduce","acc","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","all","updateAppBadge","selectCountNotMutedUnread","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userId","statusesById","topPeers","lastRequestedAt","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","listType","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutNewMessage","messageUpdate","channelId","selectCommonBoxChatId","targetChat","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","some","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","omit","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","langCode","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","allListIds","usersById","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","useThrottledMemo","folderTabs","ALL_FOLDER_ID","handleSwitchTab","forceOnHeavyAnimation","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","style","width","remove","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","offsetWidth","add","useResize","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","focus","searchInput","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","Error","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaLoader","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","isAudioPlayerRendered","Infinity","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","preventMessageInputBlur","onContextMenu","customText","isProtected","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","outgoingStatus","signature","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","replace","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","canAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","contains","safePlay","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","ApiMediaFormat","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","currentOnRelease","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","stopCurrentAudio","videoClassName","onEnded","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","APPENDIX_OWN","__html","APPENDIX_NOT_OWN","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","canReply","selectIsDownloading","actualThreadInfo","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","selectMessage","handleMouseDown","handleDoubleClick","handleContentDoubleClick","isSwiped","markSwiped","unmarkSwiped","startedAt","target","stopEvent","matches","useOuterHandlers","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","calculatedWidth","noMediaCorners","extraPadding","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","dangerouslySetInnerHTML","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","getUserFullName","chatInviteTitle","chatInviteHash","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","SendAsMenu","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","sendAsUser","editingMessage","canScheduleUntilOnline","selectUserStatus","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","sendMessageAction","useSendMessageAction","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","delay","noFirst","savedCallback","setInterval","clearInterval","useInterval","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","editMessage","hasMessageMedia","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevChatId","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","kind","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","ANIMATION_LEVEL_MIN","propertyName","useIsReady","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canAddContact","getCanAddContact","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","addContact","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","handleAddContact","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","IS_PWA","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}