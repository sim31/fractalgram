{"version":3,"sources":["webpack:///./src/components/common/TrackingMonkey.tsx","webpack:///./src/components/auth/AuthCode.tsx","webpack:///./src/components/auth/AuthPassword.tsx","webpack:///./src/components/auth/AuthRegister.tsx","webpack:///./src/components/ui/Modal.tsx","webpack:///./src/util/trapFocus.ts","webpack:///./src/components/common/AnimatedSticker.tsx","webpack:///./src/hooks/useBackgroundMode.ts","webpack:///./src/components/ui/Portal.ts","webpack:///./src/components/common/helpers/animatedAssets.ts","webpack:///./src/assets/TwoFactorSetupMonkeyIdle.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyTracking.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyClose.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyPeek.tgs","webpack:///./src/assets/FoldersAll.tgs","webpack:///./src/assets/FoldersNew.tgs","webpack:///./src/assets/DiscussionGroupsDucks.tgs","webpack:///./src/components/ui/CropModal.tsx","webpack:///./src/components/ui/AvatarEditable.tsx","webpack:///./src/components/common/PasswordMonkey.tsx","webpack:///./src/components/common/PasswordForm.tsx"],"names":["STICKER_SIZE","IS_SINGLE_COLUMN_LAYOUT","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","memo","code","codeLength","trackingDirection","isTracking","isBig","idleMonkeyData","setIdleMonkeyData","useState","trackingMonkeyData","setTrackingMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","TRACKING_FRAMES_PER_SYMBOL","useEffect","getAnimationData","then","handleFirstMonkeyLoad","useCallback","id","className","AnimatedSticker","size","STICKER_SIZE_TWO_FA","undefined","animationData","play","onLoad","playSegment","startFrame","length","endFrame","getTrackingFrames","speed","noLoop","withGlobal","global","pick","setGlobal","actions","authPhoneNumber","authIsCodeViaApp","authIsLoading","authError","setAuthCode","returnToAuthPhoneNumber","clearAuthError","inputRef","useRef","setCode","setIsTracking","setTrackingDirection","IS_TOUCH_ENV","current","focus","useHistoryBack","onCodeChange","e","currentTarget","target","value","replace","substr","onClick","role","tabIndex","title","InputText","ref","label","onInput","error","autoComplete","inputMode","Loading","authHint","setAuthPassword","showPassword","setShowPassword","handleChangePasswordVisibility","isVisible","handleSubmit","password","isPasswordVisible","PasswordForm","clearError","hint","isLoading","onChangePasswordVisibility","onSubmit","signUp","uploadProfilePhoto","isButtonShown","setIsButtonShown","croppedFile","setCroppedFile","firstName","setFirstName","lastName","setLastName","action","method","event","preventDefault","file","AvatarEditable","onChange","Button","type","ripple","Modal","isOpen","header","hasCloseButton","noBackdrop","children","onClose","onCloseAnimationEnd","onEnter","shouldSkipHistoryAnimations","shouldRender","transitionClassNames","useShowTransition","modalRef","captureKeyboardListeners","onEsc","element","handleKeyDown","key","stopPropagation","focusableElements","Array","from","querySelectorAll","currentFocusedIndex","findIndex","em","isSameNode","document","activeElement","newFocusedIndex","shiftKey","addEventListener","removeEventListener","trapFocus","useEffectWithPrevDeps","prevIsOpen","body","classList","toggle","dispatchHeavyAnimationEvent","remove","lang","useLang","fullClassName","buildClassName","Portal","round","color","ariaLabel","lottiePromise","RLottie","async","ensureLottie","default","setTimeout","quality","isLowPriority","animation","setAnimation","container","wasPlaying","isFrozen","playRef","playSegmentRef","exec","newAnimation","setSpeed","fastRaf","destroy","playAnimation","shouldRestart","goToAndPlay","pauseAnimation","pause","freezeAnimation","isPlaying","unfreezeAnimation","unfreezeAnimationOnRaf","useHeavyAnimationCheck","useBackgroundMode","style","onBlur","onFocus","hasFocus","window","containerId","elementRef","createElement","useLayoutEffect","querySelector","add","appendChild","TeactDOM","render","removeChild","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","name","path","location","origin","mediaLoader","ApiMediaFormat","Lottie","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","getElementById","offsetWidth","offsetHeight","enableZoom","boundary","width","height","viewport","dataUri","blobToDataUri","bind","url","err","DEBUG","console","initCropper","ensureCroppie","Boolean","result","croppedImg","blobToFile","disabled","currentAvatarBlobUrl","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","files","accept","src","alt","URL","revokeObjectURL","createObjectURL","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isPeekShown","setIsPeekShown","FOCUS_DELAY_TIMEOUT_MS","placeholder","submitLabel","onInputChange","setPassword","canSubmit","setCanSubmit","requestAnimationFrame","select","dir","isRtl","MIN_PASSWORD_LENGTH"],"mappings":"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","file":"5.582510b13b61dece3094.js","sourcesContent":["import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  code: string;\n  codeLength: number;\n  trackingDirection: number;\n  isTracking: boolean;\n  isBig?: boolean;\n};\n\nconst TRACKING_START_FRAME = 15;\nconst TRACKING_END_FRAME = 180;\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst TrackingMonkey: FC<OwnProps> = ({\n  code,\n  codeLength,\n  trackingDirection,\n  isTracking,\n  isBig,\n}) => {\n  const [idleMonkeyData, setIdleMonkeyData] = useState<Record<string, any>>();\n  const [trackingMonkeyData, setTrackingMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const TRACKING_FRAMES_PER_SYMBOL = (TRACKING_END_FRAME - TRACKING_START_FRAME) / codeLength;\n\n  useEffect(() => {\n    if (!idleMonkeyData) {\n      getAnimationData('MonkeyIdle').then(setIdleMonkeyData);\n    }\n  }, [idleMonkeyData]);\n\n  useEffect(() => {\n    if (!trackingMonkeyData) {\n      getAnimationData('MonkeyTracking').then(setTrackingMonkeyData);\n    }\n  }, [trackingMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  function getTrackingFrames(): [number, number] {\n    const startFrame = (code && code.length > 1) || trackingDirection < 0\n      ? TRACKING_START_FRAME + TRACKING_FRAMES_PER_SYMBOL * (code.length - 1)\n      : 0;\n    const endFrame = code.length === codeLength\n      ? TRACKING_END_FRAME\n      : TRACKING_START_FRAME + TRACKING_FRAMES_PER_SYMBOL * code.length;\n\n    if (trackingDirection < 1) {\n      return [\n        endFrame,\n        startFrame,\n      ];\n    }\n\n    return [\n      startFrame,\n      endFrame,\n    ];\n  }\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {idleMonkeyData && (\n        <AnimatedSticker\n          id=\"idleMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isTracking ? 'hidden' : undefined}\n          animationData={idleMonkeyData}\n          play={!isTracking}\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {trackingMonkeyData && (\n        <AnimatedSticker\n          id=\"trackingMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={!isTracking ? 'hidden' : 'shown'}\n          animationData={trackingMonkeyData}\n          playSegment={isTracking ? getTrackingFrames() : undefined}\n          speed={2}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(TrackingMonkey);\n","import { FormEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport { GlobalState, GlobalActions } from '../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport TrackingMonkey from '../common/TrackingMonkey';\n\ntype StateProps = Pick<GlobalState, 'authPhoneNumber' | 'authIsCodeViaApp' | 'authIsLoading' | 'authError'>;\ntype DispatchProps = Pick<GlobalActions, (\n  'setAuthCode' | 'returnToAuthPhoneNumber' | 'clearAuthError'\n)>;\n\nconst CODE_LENGTH = 5;\n\nconst AuthCode: FC<StateProps & DispatchProps> = ({\n  authPhoneNumber,\n  authIsCodeViaApp,\n  authIsLoading,\n  authError,\n  setAuthCode,\n  returnToAuthPhoneNumber,\n  clearAuthError,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [code, setCode] = useState<string>('');\n  const [isTracking, setIsTracking] = useState(false);\n  const [trackingDirection, setTrackingDirection] = useState(1);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n  }, []);\n\n  useHistoryBack(true, returnToAuthPhoneNumber);\n\n  const onCodeChange = useCallback((e: FormEvent<HTMLInputElement>) => {\n    if (authError) {\n      clearAuthError();\n    }\n\n    const { currentTarget: target } = e;\n    target.value = target.value.replace(/[^\\d]+/, '').substr(0, CODE_LENGTH);\n\n    if (target.value === code) {\n      return;\n    }\n\n    setCode(target.value);\n\n    if (!isTracking) {\n      setIsTracking(true);\n    } else if (!target.value.length) {\n      setIsTracking(false);\n    }\n\n    if (code && code.length > target.value.length) {\n      setTrackingDirection(-1);\n    } else {\n      setTrackingDirection(1);\n    }\n\n    if (target.value.length === CODE_LENGTH) {\n      setAuthCode({ code: target.value });\n    }\n  }, [authError, clearAuthError, code, isTracking, setAuthCode]);\n\n  return (\n    <div id=\"auth-code-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <TrackingMonkey\n          code={code}\n          codeLength={CODE_LENGTH}\n          isTracking={isTracking}\n          trackingDirection={trackingDirection}\n        />\n        <h2>\n          {authPhoneNumber}\n          <div\n            className=\"auth-number-edit\"\n            onClick={returnToAuthPhoneNumber}\n            role=\"button\"\n            tabIndex={0}\n            title=\"Sign In with another phone number\"\n          >\n            <i className=\"icon-edit\" />\n          </div>\n        </h2>\n        <p className=\"note\">\n          {authIsCodeViaApp ? (\n            <>\n              We have sent the code to the Telegram app\n              <br />on your other device.\n            </>\n          ) : (\n            <>\n              We have sent you an SMS\n              <br />with the code.\n            </>\n          )}\n        </p>\n        <InputText\n          ref={inputRef}\n          id=\"sign-in-code\"\n          label=\"Code\"\n          onInput={onCodeChange}\n          value={code}\n          error={authError}\n          autoComplete=\"off\"\n          inputMode=\"decimal\"\n        />\n        {authIsLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authPhoneNumber', 'authIsCodeViaApp', 'authIsLoading', 'authError']),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setAuthCode',\n    'returnToAuthPhoneNumber',\n    'clearAuthError',\n  ]),\n)(AuthCode));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState, GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport MonkeyPassword from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ntype StateProps = Pick<GlobalState, 'authIsLoading' | 'authError' | 'authHint'>;\ntype DispatchProps = Pick<GlobalActions, 'setAuthPassword' | 'clearAuthError'>;\n\nconst AuthPassword: FC<StateProps & DispatchProps> = ({\n  authIsLoading, authError, authHint, setAuthPassword, clearAuthError,\n}) => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleChangePasswordVisibility = useCallback((isVisible) => {\n    setShowPassword(isVisible);\n  }, []);\n\n  const handleSubmit = useCallback((password: string) => {\n    setAuthPassword({ password });\n  }, [setAuthPassword]);\n\n  return (\n    <div id=\"auth-password-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <MonkeyPassword isPasswordVisible={showPassword} />\n        <h2>Enter Your Password</h2>\n        <p className=\"note\">\n          Your account is protected with\n          <br />an additional password.\n        </p>\n        <PasswordForm\n          clearError={clearAuthError}\n          error={authError}\n          hint={authHint}\n          isLoading={authIsLoading}\n          isPasswordVisible={showPassword}\n          onChangePasswordVisibility={handleChangePasswordVisibility}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authIsLoading', 'authError', 'authHint']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['setAuthPassword', 'clearAuthError']),\n)(AuthPassword));\n","import { ChangeEvent } from 'react';\nimport React, { FC, useState, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState, GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport AvatarEditable from '../ui/AvatarEditable';\n\ntype StateProps = Pick<GlobalState, 'authIsLoading' | 'authError'>;\ntype DispatchProps = Pick<GlobalActions, 'signUp' | 'clearAuthError' | 'uploadProfilePhoto'>;\n\nconst AuthRegister: FC<StateProps & DispatchProps> = ({\n  authIsLoading, authError, signUp, clearAuthError, uploadProfilePhoto,\n}) => {\n  const [isButtonShown, setIsButtonShown] = useState(false);\n  const [croppedFile, setCroppedFile] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  function handleFirstNameChange(event: ChangeEvent<HTMLInputElement>) {\n    if (authError) {\n      clearAuthError();\n    }\n\n    const { target } = event;\n\n    setFirstName(target.value);\n    setIsButtonShown(target.value.length > 0);\n  }\n\n  function handleLastNameChange(event: ChangeEvent<HTMLInputElement>) {\n    const { target } = event;\n\n    setLastName(target.value);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    signUp({ firstName, lastName });\n\n    if (croppedFile) {\n      uploadProfilePhoto({ file: croppedFile });\n    }\n  }\n\n  return (\n    <div id=\"auth-registration-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <form action=\"\" method=\"post\" onSubmit={handleSubmit}>\n          <AvatarEditable onChange={setCroppedFile} />\n          <h2>Your Name</h2>\n          <p className=\"note\">\n            Enter your name and add\n            <br />a profile picture.\n          </p>\n          <InputText\n            id=\"registration-first-name\"\n            label=\"Name\"\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={authError}\n            autoComplete=\"given-name\"\n          />\n          <InputText\n            id=\"registration-last-name\"\n            label=\"Last Name (optional)\"\n            onChange={handleLastNameChange}\n            value={lastName}\n            autoComplete=\"family-name\"\n          />\n          {isButtonShown && (\n            <Button type=\"submit\" ripple isLoading={authIsLoading}>Start Messaging</Button>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authIsLoading', 'authError']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['signUp', 'clearAuthError', 'uploadProfilePhoto']),\n)(AuthRegister));\n","import React, {\n  FC, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { TextPart } from '../common/helpers/renderMessageText';\n\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport trapFocus from '../../util/trapFocus';\nimport buildClassName from '../../util/buildClassName';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from './Button';\nimport Portal from './Portal';\n\nimport './Modal.scss';\n\nconst ANIMATION_DURATION = 200;\n\ntype OwnProps = {\n  title?: string | TextPart[];\n  className?: string;\n  isOpen?: boolean;\n  header?: any;\n  hasCloseButton?: boolean;\n  noBackdrop?: boolean;\n  children: any;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onEnter?: () => void;\n};\n\ntype StateProps = {\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst Modal: FC<OwnProps & StateProps> = ({\n  title,\n  className,\n  isOpen,\n  header,\n  hasCloseButton,\n  noBackdrop,\n  children,\n  onClose,\n  onCloseAnimationEnd,\n  onEnter,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransition(\n    isOpen, onCloseAnimationEnd, shouldSkipHistoryAnimations, undefined, shouldSkipHistoryAnimations,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => (isOpen\n    ? captureKeyboardListeners({ onEsc: onClose, onEnter })\n    : undefined), [isOpen, onClose, onEnter]);\n  useEffect(() => (isOpen && modalRef.current ? trapFocus(modalRef.current) : undefined), [isOpen]);\n\n  useHistoryBack(isOpen, onClose);\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    document.body.classList.toggle('has-open-dialog', isOpen);\n\n    if (isOpen || (!isOpen && prevIsOpen !== undefined)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION);\n    }\n\n    return () => {\n      document.body.classList.remove('has-open-dialog');\n    };\n  }, [isOpen]);\n\n  const lang = useLang();\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    if (header) {\n      return header;\n    }\n\n    if (!title) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        {hasCloseButton && (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <div className=\"modal-title\">{title}</div>\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'Modal',\n    className,\n    transitionClassNames,\n    noBackdrop && 'transparent-backdrop',\n  );\n\n  return (\n    <Portal>\n      <div\n        ref={modalRef}\n        className={fullClassName}\n        tabIndex={-1}\n        role=\"dialog\"\n      >\n        <div className=\"modal-container\">\n          <div className=\"modal-backdrop\" onClick={onClose} />\n          <div className=\"modal-dialog\">\n            {renderHeader()}\n            <div className=\"modal-content custom-scroll\">\n              {children}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Portal>\n  );\n};\n\nexport default Modal;\n","export default function trapFocus(element: HTMLElement) {\n  function handleKeyDown(e: KeyboardEvent) {\n    if (e.key !== 'Tab') {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const focusableElements = Array.from(\n      element.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'),\n    ) as HTMLElement[];\n    if (!focusableElements.length) {\n      return;\n    }\n\n    const currentFocusedIndex = focusableElements.findIndex((em) => em.isSameNode(document.activeElement));\n    let newFocusedIndex = 0;\n    if (currentFocusedIndex >= 0) {\n      if (e.shiftKey) {\n        newFocusedIndex = currentFocusedIndex > 0\n          ? currentFocusedIndex - 1\n          : focusableElements.length - 1;\n      } else {\n        newFocusedIndex = currentFocusedIndex < focusableElements.length - 1\n          ? currentFocusedIndex + 1\n          : 0;\n      }\n    }\n\n    focusableElements[newFocusedIndex].focus();\n  }\n\n  document.addEventListener('keydown', handleKeyDown, false);\n\n  return () => {\n    document.removeEventListener('keydown', handleKeyDown, false);\n  };\n}\n","import React, {\n  FC, useEffect, useRef, memo, useCallback, useState,\n} from '../../lib/teact/teact';\n\nimport { fastRaf } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useHeavyAnimationCheck from '../../hooks/useHeavyAnimationCheck';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\ntype OwnProps = {\n  className?: string;\n  id: string;\n  animationData: AnyLiteral;\n  play?: boolean | string;\n  playSegment?: [number, number];\n  speed?: number;\n  noLoop?: boolean;\n  size: number;\n  quality?: number;\n  isLowPriority?: boolean;\n  onLoad?: NoneToVoidFunction;\n};\n\ntype RLottieClass = typeof import('../../lib/rlottie/RLottie').default;\ntype RLottieInstance = import('../../lib/rlottie/RLottie').default;\nlet lottiePromise: Promise<RLottieClass>;\nlet RLottie: RLottieClass;\n\n// Time supposed for judges to measure \"Transferred Size\" in Dev Tools\nconst LOTTIE_LOAD_DELAY = 5000;\n\nasync function ensureLottie() {\n  if (!lottiePromise) {\n    lottiePromise = import('../../lib/rlottie/RLottie') as unknown as Promise<RLottieClass>;\n    RLottie = (await lottiePromise as any).default;\n  }\n\n  return lottiePromise;\n}\n\nsetTimeout(ensureLottie, LOTTIE_LOAD_DELAY);\n\nconst AnimatedSticker: FC<OwnProps> = ({\n  className,\n  id,\n  animationData,\n  play,\n  playSegment,\n  speed,\n  noLoop,\n  size,\n  quality,\n  isLowPriority,\n  onLoad,\n}) => {\n  const [animation, setAnimation] = useState<RLottieInstance>();\n  // eslint-disable-next-line no-null/no-null\n  const container = useRef<HTMLDivElement>(null);\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const playRef = useRef();\n  playRef.current = play;\n  const playSegmentRef = useRef<[number, number]>();\n  playSegmentRef.current = playSegment;\n\n  useEffect(() => {\n    if (animation || !animationData) {\n      return;\n    }\n\n    const exec = () => {\n      if (!container.current) {\n        return;\n      }\n\n      const newAnimation = new RLottie(\n        id,\n        container.current,\n        animationData,\n        {\n          noLoop,\n          size,\n          quality,\n          isLowPriority,\n        },\n        onLoad,\n      );\n\n      if (speed) {\n        newAnimation.setSpeed(speed);\n      }\n\n      setAnimation(newAnimation);\n    };\n\n    if (RLottie) {\n      exec();\n    } else {\n      ensureLottie().then(() => {\n        fastRaf(() => {\n          if (container.current) {\n            exec();\n          }\n        });\n      });\n    }\n  }, [animation, animationData, id, isLowPriority, noLoop, onLoad, quality, size, speed]);\n\n  useEffect(() => {\n    return () => {\n      if (animation) {\n        animation.destroy();\n      }\n    };\n  }, [animation]);\n\n  const playAnimation = useCallback((shouldRestart = false) => {\n    if (animation && (playRef.current || playSegmentRef.current)) {\n      if (playSegmentRef.current) {\n        animation.playSegment(playSegmentRef.current);\n      } else if (shouldRestart) {\n        animation.goToAndPlay(0);\n      } else {\n        animation.play();\n      }\n    }\n  }, [animation]);\n\n  const pauseAnimation = useCallback(() => {\n    if (!animation) {\n      return;\n    }\n\n    animation.pause();\n  }, [animation]);\n\n  const freezeAnimation = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!animation) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = animation.isPlaying();\n    }\n\n    pauseAnimation();\n  }, [animation, pauseAnimation]);\n\n  const unfreezeAnimation = useCallback(() => {\n    if (wasPlaying.current) {\n      playAnimation();\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [playAnimation]);\n\n  const unfreezeAnimationOnRaf = useCallback(() => {\n    fastRaf(unfreezeAnimation);\n  }, [unfreezeAnimation]);\n\n  useEffect(() => {\n    if (!animation) {\n      return;\n    }\n\n    if (play || playSegment) {\n      if (isFrozen.current) {\n        wasPlaying.current = true;\n      } else {\n        playAnimation(noLoop);\n      }\n    } else {\n      // eslint-disable-next-line no-lonely-if\n      if (isFrozen.current) {\n        wasPlaying.current = false;\n      } else {\n        pauseAnimation();\n      }\n    }\n  }, [animation, play, playSegment, noLoop, playAnimation, pauseAnimation]);\n\n  useHeavyAnimationCheck(freezeAnimation, unfreezeAnimation);\n  // Pausing frame may not happen in background\n  // so we need to make sure it happens right after focusing,\n  // then we can play again.\n  useBackgroundMode(freezeAnimation, unfreezeAnimationOnRaf);\n\n  const fullClassName = buildClassName('AnimatedSticker', className);\n\n  const style = size ? `width: ${size}px; height: ${size}px;` : undefined;\n\n  return (\n    <div\n      ref={container}\n      className={fullClassName}\n      // @ts-ignore\n      style={style}\n    />\n  );\n};\n\nexport default memo(AnimatedSticker);\n","import { useEffect } from '../lib/teact/teact';\n\nexport default function useBackgroundMode(\n  onBlur?: AnyToVoidFunction,\n  onFocus?: AnyToVoidFunction,\n) {\n  useEffect(() => {\n    if (onBlur && !document.hasFocus()) {\n      onBlur();\n    }\n\n    if (onBlur) {\n      window.addEventListener('blur', onBlur);\n    }\n\n    if (onFocus) {\n      window.addEventListener('focus', onFocus);\n    }\n\n    return () => {\n      if (onFocus) {\n        window.removeEventListener('focus', onFocus);\n      }\n\n      if (onBlur) {\n        window.removeEventListener('blur', onBlur);\n      }\n    };\n  }, [onBlur, onFocus]);\n}\n","import { FC, useRef, useLayoutEffect } from '../../lib/teact/teact';\nimport TeactDOM from '../../lib/teact/teact-dom';\n\ntype OwnProps = {\n  containerId?: string;\n  className?: string;\n  children: any;\n};\n\nconst Portal: FC<OwnProps> = ({ containerId, className, children }) => {\n  const elementRef = useRef(document.createElement('div'));\n\n  useLayoutEffect(() => {\n    const container = document.querySelector<HTMLDivElement>(containerId || '#portals');\n    if (!container) {\n      return undefined;\n    }\n\n    const element = elementRef.current;\n    if (className) {\n      element.classList.add(className);\n    }\n\n    container.appendChild(element);\n\n    return () => {\n      TeactDOM.render(undefined, element);\n      container.removeChild(element);\n    };\n  }, [className, containerId]);\n\n  return TeactDOM.render(children, elementRef.current);\n};\n\nexport default Portal;\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyIdle.dea4a492c144df84ddab778dc8a3f0cd.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyTracking.eb5a7a6f166fb7589c12e6248561fb58.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyClose.604c4c833d322b7e6c3ea19bef058241.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyPeek.1905436b042520363d7e59f5d7f903ab.tgs\";","export default __webpack_public_path__ + \"FoldersAll.3f9f9e243d19f0fbf9aaaff11cbd4572.tgs\";","export default __webpack_public_path__ + \"FoldersNew.9a40d71c0c8be70f5bd14ff2d7bc1593.tgs\";","export default __webpack_public_path__ + \"DiscussionGroupsDucks.9ea453d1be9d1b0ee77a992f8e587485.tgs\";","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 0.8,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n"],"sourceRoot":""}