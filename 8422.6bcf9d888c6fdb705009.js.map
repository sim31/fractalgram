{"version":3,"file":"8422.6bcf9d888c6fdb705009.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts","webpack://telegram-t/./src/global/selectors/calls.ts"],"sourcesContent":["import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiChatFolder, ApiError, ApiChatMember,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type { GlobalActions, GlobalState } from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats, addUsers, addUserStatuses, replaceThreadParam,\n  updateChatListIds, updateChats, updateChat, updateChatListSecondaryInfo,\n  updateManagementProgress, leaveChat, replaceUsers, replaceUserStatuses,\n  replaceChats, replaceChatListIds, addChatMembers, updateUser,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername, selectThreadTopMessageId,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber, selectDraft,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions) => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const { id, threadId = MAIN_THREAD_ID } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat?.lastMessage?.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  actions.focusMessage({ chatId, threadId, messageId });\n});\n\naddActionHandler('openSupportChat', async (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload) => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !getGlobal().chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(listType, oldestChat?.id, oldestChat ? getOrderDate(oldestChat) : undefined, shouldReplace, true);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddActionHandler('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddActionHandler('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  void createChannel(title, members, about, photo);\n});\n\naddActionHandler('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  void joinChannel(channelId, accessHash);\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  void createGroupChat(title, members, photo);\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddActionHandler('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddActionHandler('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = (idsToAdd as number[])\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats' });\n    return;\n  }\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  void createChatFolder(folder, maxId);\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload) => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    });\n  }\n});\n\naddActionHandler('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload) => {\n  const { phoneNumber, startAttach, attach } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByPhoneNumber(phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({\n      message: langProvider.getTranslation('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id });\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  if (uri.hostname === 't.me' && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostParts = uri.hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload) => {\n  const { hash } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach,\n  } = payload!;\n\n  const chat = selectCurrentChat(global);\n\n  if (!commentId) {\n    if (!startAttach && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({ chatId: chat.id, messageId });\n      return;\n    }\n    await openChatByUsername(actions, username, messageId, startParam, startAttach, attach);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  void openCommentsByUsername(actions, username, messageId, commentId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n\n  let chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    global = getGlobal();\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  setGlobal(updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  }));\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  }));\n});\n\naddActionHandler('updateChat', async (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload) => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  setGlobal(updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  }));\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload) => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    setGlobal(updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    }));\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global) => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  setGlobal({\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  });\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    setGlobal(updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    }));\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    loadFullChat(chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload) => {\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = payload + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddActionHandler('resetOpenChatWithDraft', (global) => {\n  return {\n    ...global,\n    requestedDraft: undefined,\n  };\n});\n\naddActionHandler('loadMoreMembers', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n  loadFullChat(chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  loadFullChat(chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  void loadFullChat(chat);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const settings = await callApi('fetchChatSettings', chat);\n  if (!settings) return;\n\n  setGlobal(updateChat(getGlobal(), chat.id, { settings }));\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload) => {\n  const { username, filter, startParam } = payload;\n  const bot = await getAttachBotOrNotify(global, username);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    setGlobal({\n      ...global,\n      requestedAttachBotInstall: {\n        botId: bot.id,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            botId: bot.id,\n            filter,\n            startParam,\n          },\n        },\n      },\n    });\n    return;\n  }\n\n  getActions().requestAttachBotInChat({\n    botId: bot.id,\n    filter,\n    startParam,\n  });\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  let global = getGlobal();\n  const lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const currentChat = selectCurrentChat(global);\n    const visibleChats = currentChat ? [currentChat] : [];\n\n    const visibleUsers = selectVisibleUsers(global) || [];\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    getActions().loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    });\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getActions().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function joinChannel(channelId: string, accessHash: string) {\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getActions()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nexport async function migrateChat(chat: ApiChat): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n\n    return undefined;\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (user) {\n    setGlobal(updateUser(getGlobal(), user.id, user));\n  }\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber(phoneNumber: string) {\n  const global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (user) {\n    setGlobal(updateUser(getGlobal(), user.id, user));\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify(global: GlobalState, username: string) {\n  const chat = await fetchChatByUsername(username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot || !user.isAttachBot) {\n    getActions().showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n\n    return undefined;\n  }\n  return user;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n) {\n  const global = getGlobal();\n  const currentChat = selectCurrentChat(global);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, username);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      botId: bot.id,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID });\n  }\n\n  const chat = await fetchChatByUsername(username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat();\n      actions.showNotification({ message: 'User does not exist' });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n}\n\nasync function openAttachMenuFromLink(\n  actions: GlobalActions,\n  chatId: string, attach: string, startAttach?: string | boolean,\n) {\n  const botChat = await fetchChatByUsername(attach);\n  if (!botChat) return;\n  const botUser = selectUser(getGlobal(), botChat.id);\n  if (!botUser || !botUser.isAttachBot) {\n    actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n    return;\n  }\n\n  actions.callAttachBot({\n    botId: botUser.id,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n  });\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { selectChat, selectUser } from '../../selectors';\nimport { getMainUsername } from '../../helpers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nlet sounds: Record<CallSound, HTMLAudioElement>;\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nexport const initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n\n  initializationPromise = Promise.all(Object.values(sounds).map((sound) => {\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play().then(() => {\n      sound.pause();\n      sound.volume = 1;\n      sound.currentTime = 0;\n      sound.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    isCallPanelVisible: !global.isCallPanelVisible,\n  };\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(groupCall);\n    await fetchGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal(updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  }));\n\n  actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n    return;\n  }\n\n  const full = await loadFullChat(chat);\n\n  if (full?.groupCall) {\n    actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n  }\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  await initializeSoundsForSafari();\n  void checkNavigatorUserMediaPermissions(true);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (activeGroupCallId) {\n    actions.leaveGroupCall({\n      rejoin: payload,\n    });\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall({\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n    isCallPanelVisible: false,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  if (initializationPromise) {\n    initializationPromise.then(doPlay);\n  } else {\n    doPlay();\n  }\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestCall', async (global, actions, payload) => {\n  const { userId, isVideo } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  await initializeSoundsForSafari();\n  void checkNavigatorUserMediaPermissions(isVideo);\n\n  setGlobal({\n    ...getGlobal(),\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n    isCallPanelVisible: false,\n  });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions(isVideo?: boolean) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          getActions().showNotification({\n            message: langProvider.getTranslation('Call.Camera.Error'),\n          });\n        } else {\n          checkMicrophonePermission();\n        }\n      })\n      .catch(() => {\n        getActions().showNotification({\n          message: langProvider.getTranslation('Call.Camera.Error'),\n        });\n      });\n  } else {\n    checkMicrophonePermission();\n  }\n}\n\nfunction checkMicrophonePermission() {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        getActions().showNotification({\n          message: langProvider.getTranslation('RequestAcces.Error.HaveNotAccess.Call'),\n        });\n      }\n    })\n    .catch(() => {\n      getActions().showNotification({\n        message: langProvider.getTranslation('RequestAcces.Error.HaveNotAccess.Call'),\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import type { GlobalState } from '../types';\nimport { selectChat } from './chats';\nimport { isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectPhoneCallUser(global: GlobalState) {\n  const { phoneCall, currentUserId } = global;\n  if (!phoneCall || !phoneCall.participantId || !phoneCall.adminId) {\n    return undefined;\n  }\n\n  const id = phoneCall.adminId === currentUserId ? phoneCall.participantId : phoneCall.adminId;\n  return selectUser(global, id);\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","global","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","serverTimeOffset","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","currentChat","selectCurrentChat","visibleChats","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","idsToUpdateDraft","Object","keys","draftsById","forEach","selectDraft","MAIN_THREAD_ID","isLocal","replaceThreadParam","idsToUpdateReplyingToId","replyingToById","isFullyLoaded","setGlobal","loadFullChat","chat","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","undefined","participantsCount","updateChat","stickerSet","getActions","loadStickers","stickerSetInfo","migrateChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isUserBot","isAttachBot","showNotification","langProvider","openAttachMenuFromLink","actions","attach","startAttach","botChat","botUser","callAttachBot","botId","startParam","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","nextChatId","getOrderedIds","ALL_FOLDER_ID","find","has","add","loadViewportMessages","threadId","payload","hasUnreadMark","toggleChatUnread","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","title","about","photo","memberIds","createdChannel","chatCreation","progress","ChatCreationProgress","channelId","createChannel","joinChannel","userId","leaveChat","createdChat","e","createGroupChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","orderedPinnedIds","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","folderIds","deleteChatFolder","unreadCount","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","usernames","c","channelPostId","bot","isCurrentChat","startBot","param","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","attachMenu","bots","requestAttachBotInChat","requestedAttachBotInstall","onConfirm","action","audioElement","audioContext","sounds","initializationPromise","resolve","initializeSoundsForSafari","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","values","sound","muted","volume","play","then","currentTime","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","checkNavigatorUserMediaPermissions","isVideo","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","checkMicrophonePermission","catch","audio","getAudioTracks","isCallPanelVisible","subscribed","peer","joinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","doPlay","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectPhoneCallUser"],"sourceRoot":""}