{"version":3,"file":"5769.45e940bf0994958c7137.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload) => {\n  const { chatId, text, files } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId });\n  }\n\n  return {\n    ...global,\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\n\nimport { APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectChatMessage, selectCurrentMessageList, selectIsTrustedBot } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, action, payload) => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global) => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      [isCustomEmoji ? 'customEmoji' : 'added']: {\n        setIds: order,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload) => {\n  const isHidden = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isHidden,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  if (threadId === MAIN_THREAD_ID) {\n    const result = await callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n\n    if (!result) {\n      draft.isLocal = true;\n    }\n  }\n  global = getGlobal();\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload) => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsPeerIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatId', async (global, actions, payload) => {\n  const { id } = payload;\n  let user = selectUser(global, id);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  });\n\n  actions.exitMessageSelectMode();\n  actions.forwardMessages({ isSilent: true });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global, actions) => {\n  void loadStickerSets(global.stickers.added.hash);\n  void loadCustomEmojiSets(global.customEmojis.added.hash);\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadCustomEmojiSets(hash?: string) {\n  const addedCustomEmojis = await callApi('fetchCustomEmojiSets', { hash });\n  if (!addedCustomEmojis) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  ));\n}\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global) => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global) => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  });\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, botUsername?: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  });\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { GlobalState, Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        global = getGlobal();\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  if (previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) return;\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachBots(hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(bot, isEnabled);\n});\n\nasync function toggleAttachBot(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleAttachBot', { bot, isEnabled });\n  await loadAttachBots();\n}\n\nasync function loadAttachBots(hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      requestedAttachBotInstall: {\n        botId,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: { chatId, botId, startParam },\n        },\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global) => {\n  const { requestedAttachBotInstall } = global;\n\n  const { botId, onConfirm } = requestedAttachBotInstall!;\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInstall: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleAttachBot(bot, true);\n  if (onConfirm) {\n    const { action, payload } = onConfirm;\n    getActions()[action](payload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInstall: undefined,\n  };\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload) => {\n  const { botId, filter, startParam } = payload;\n  const currentChatId = selectCurrentMessageList(global)?.chatId;\n\n  const { attachMenu: { bots } } = global;\n  const bot = bots[botId];\n  if (!bot) return;\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || botId,\n      botId,\n      startParam,\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInChat: {\n      botId,\n      filter: supportedFilters,\n      startParam,\n    },\n  });\n});\n\naddActionHandler('cancelAttachBotInChat', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInChat: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ApiChat, ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const { requestInfo, saveInfo } = payload;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice } = result;\n\n  let global = setPaymentForm(getGlobal(), form);\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload) => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider, temporaryPassword } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  setGlobal(updatePayment(global, { status: 'pending' }));\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' });\n  global = closeInvoice(global);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step ?? PaymentStep.Checkout);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, { password }) => {\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } });\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } });\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout });\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport type { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport type { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const reactions = selectChatMessage(global, chatId, messageId)?.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        global = updateChat(global, update.chatId, {\n          unreadCount: (chat.unreadCount || 0) + 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (isLocal && message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isLocal) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        setGlobal({\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, getGlobal());\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        }));\n      } else if (media) {\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        void checkNavigatorUserMediaPermissions(call.isVideo);\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n\n      if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n        const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n        if (message && message.content.invoice) {\n          const { amount, currency, title } = message.content.invoice;\n\n          actions.showNotification({\n            message: langProvider.getTranslation('PaymentInfoHint', [\n              formatCurrency(amount, currency, langProvider.getTranslation.code),\n              title,\n            ]),\n          });\n        }\n      }\n\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n      if (!IS_PRODUCTION_HOST) {\n        global = closeInvoice(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllChatsFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const isChatOpen = Boolean(selectCurrentChat(global)?.id);\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport { ANIMATION_LEVEL_MIN } from '../../config';\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  noAnimation?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 320;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  noAnimation,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n    showNotification,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const lang = useLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, shouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else if (noAnimation) {\n      // The second RAF is necessary because teact must update the state and render the async component\n      requestAnimationFrame(() => {\n        requestAnimationFrame(setFocusInSearchInput);\n      });\n    } else {\n      setTimeout(setFocusInSearchInput, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [noAnimation, openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Mod+F': handleHotkeySearchClick,\n  });\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const noAnimation = global.settings.byKey.animationLevel === ANIMATION_LEVEL_MIN;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      noAnimation,\n    };\n  },\n)(HeaderActions));\n\nfunction setFocusInSearchInput() {\n  const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n  searchInput?.focus();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, {\n  useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number) => {\n    const rate = PLAYBACK_RATES[newRate];\n    setAudioPlayerPlaybackRate({ playbackRate: rate });\n    setPlaybackRate(rate);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (isContextMenuOpen) return;\n    updatePlaybackRate(playbackRate === 1 ? 2 : 1);\n  }, [isContextMenuOpen, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0] || 1;\n    return (\n      <Button\n        round\n        className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Playback Rate\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handlePlaybackClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <span className=\"playback-button-inner\">\n          {playbackRate === 1 ? 2 : displayRate}Х\n        </span>\n      </Button>\n    );\n  }, [handleBeforeContextMenu, handleContextMenu, handlePlaybackClick, playbackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n        >\n          {renderPlaybackRateMenuItem(0.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(0.75, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(2, playbackRate, updatePlaybackRate)}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(rate: number, currentRate: number, onClick: (rate: number) => void) {\n  return (\n    <MenuItem\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={currentRate === PLAYBACK_RATES[rate] ? 'check' : undefined}\n      customIcon={currentRate !== PLAYBACK_RATES[rate] ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  animationLevel: AnimationLevel;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n  animationLevel,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} animationLevel={animationLevel} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} animationLevel={animationLevel} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_LOADING = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  memoFirstUnreadIdRef,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={buildClassName('pictogram', isRoundVideo && 'round')}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            tgsUrl={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// eslint-disable-next-line max-len\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme] as const);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme] as const);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"dots\":\"Nlcnrzv_f5cSxFsPOGt2\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"canvas\":\"a_WnxsI6X0B4j7QRRoOA\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useInterval from '../../../hooks/useInterval';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\nconst BLUR_RADIUS = 25;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const canvasRef = useCanvasBlur(thumbnail?.dataUri, false, undefined, BLUR_RADIUS, width, height);\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <canvas ref={canvasRef} className={styles.canvas} width={width} height={height} />\n      <div className={styles.dots} />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl] as const);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { calculateDimensionsForMessageMedia, ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReaction) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            noUserColors={isOwn}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo, transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasReply?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {!botInfo && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n  const prevDraft = usePrevious(draft);\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage || !lastSyncTime) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, lastSyncTime, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [\n    chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage, prevDraft, loadCustomEmojis,\n  ]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { hasPreview } from '../../../util/files';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    openLimitReachedModal,\n    openPremiumModal,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setInnerHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const setHtml = useCallback((newHtml: string) => {\n    setInnerHtml(newHtml);\n    requestAnimationFrame(() => {\n      processMessageInputForCustomEmoji();\n    });\n  }, []);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments && newAttachments.some((l) => l.size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    EDITABLE_INPUT_CSS_SELECTOR,\n    setHtml,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const { isCustomEmojiTooltipOpen, closeCustomEmojiTooltip, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji && !attachments.length),\n    EDITABLE_INPUT_CSS_SELECTOR,\n    html,\n    setHtml,\n    customEmojiForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef, setHtml]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCustomEmojiTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu, setHtml]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: () => openPremiumModal({ initialSection: 'animated_emoji' }),\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: () => openChat({ id: currentUserId, shouldReplaceHistory: true }),\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, openChat, openPremiumModal, showNotification]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage, lastSyncTime);\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      const isQuick = requestedDraftFiles.every((file) => hasPreview(file));\n      handleFileSelect(requestedDraftFiles, isQuick);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n        shouldSuggestCustomEmoji={shouldSuggestCustomEmoji}\n        customEmojiForEmoji={customEmojiForEmoji}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            noFocusInterception={attachments.length > 0}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId\n      && chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId) ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatGroup, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{lang(isChannel ? 'Channel.TitleInfo' : (userId ? 'UserInfo.Title' : 'GroupInfo.Title'))}</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiUser;\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n  requestedDraft?: GlobalState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      lastSyncTime,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall && selectUser(global, requestedAttachBotInstall.botId),\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectScheduledMessages","selectChatMessages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","selectChat","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","setIds","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","customEmojis","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","threadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","offsets","nextOffset","loadPollOptionResults","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","addedStickers","updateStickerSets","sets","loadStickerSets","added","addedCustomEmojis","loadCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","loadFeaturedStickers","premiumGifts","cachedSet","selectStickerSet","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","config","gifSearchUsername","updateStickersForEmoji","loadStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","timestamp","searchMessagesByDate","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","previousGlobal","loadTopMessages","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","threadInfo","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userOrChat","avatarHash","userSearch","updateUserSearchFetchingStatus","searchUsers","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","selectPaymentInputInvoice","saveInfo","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","step","isClosed","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","defaultReaction","loadConfig","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","isActiveChat","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","r","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","reorderStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","checkNavigatorUserMediaPermissions","isVideo","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","remove","useLayoutEffect","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","ANIMATION_LEVEL_MIN","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","requestAnimationFrame","setFocusInSearchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","renderPlaybackRateMenuItem","rate","currentRate","customIcon","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","handlePlaybackClick","PlaybackRateButton","displayRate","entries","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","forceOpen","onHide","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","isChatWithBot","isSelectModeActive","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_LOADING","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","isEmbedded","appearanceOrder","isLastInList","memoFirstUnreadIdRef","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","role","AnimatedIconFromSticker","play","noLoop","nonInteractive","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","activeReaction","isInMeta","stopActiveReaction","centerIconId","effectId","mediaHashCenterIcon","mediaHashEffect","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","tgsUrl","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","actionText","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","isLowPriority","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","withVideo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","canvasRef","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","commentsText","AnimatedCounter","recentReactors","recentReaction","isOutside","metaChildren","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","entry","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","handleResize","contentRect","useResizeObserver","windowHeight","normalHeight","String","clientHeight","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","STYLE_TAG_REGEX","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","stripCustomEmoji","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","entity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","html","setInnerHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","setHtml","newHtml","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","useEmojiTooltip","insertHtmlAndUpdateCursor","EDITABLE_INPUT_ID","selection","getSelection","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertTextAndUpdateCursor","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","prevDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","customEmojiIds","prevHtml","useDraft","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","textContents","getElementsByTagName","node","HTMLElement","tagName","replaceWith","createTextNode","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","trimEnd","preparePastedHtml","containsCustomEmoji","items","getFilesFromDataTransferItems","all","file","textToPaste","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","hasPreview","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","pinnedIds","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldLoadFullChat","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}