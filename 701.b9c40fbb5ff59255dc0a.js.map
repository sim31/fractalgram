{"version":3,"file":"701.b9c40fbb5ff59255dc0a.js","mappings":"mtCA6MA,SAASA,EAAYC,EAAsDC,GACzE,MAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMG,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAYhB,GAVsB,iBAAXR,EACTO,EAAIE,IAAMT,EACDA,aAAkBU,iBAC3BH,EAAIE,IAAMT,EAAOW,OAEjBJ,EAAIE,IAAMT,EAAOS,IAGnBP,EAAMU,YAAYL,GAEdN,IAAWY,EAAAA,GAAAA,eAAmCZ,IAAWY,EAAAA,GAAAA,eAAkC,CAC7FX,EAAMG,UAAUC,IAAI,eAChBL,IAAWY,EAAAA,GAAAA,gBACbX,EAAMG,UAAUC,IAAI,QAEtB,MAAMQ,EAAcX,SAASY,cAC3Bd,IAAWY,EAAAA,GAAAA,cACP,kCACA,gCAEFC,GACFZ,EAAMU,YAAYE,EAAYE,WAAU,IAI5C,OAAOd,EAoCT,SAASe,EAA2BC,EAAwBC,GAC1D,MAAMC,EAAqBjB,SAASY,cAA8B,0BAClE,IAAIM,EAAeH,EAAUI,UAAYH,EAAQI,QAAwB,4BAA6BD,UAKtG,OAJIJ,EAAUM,GAAGC,SAAS,kBACxBJ,GAAgBH,EAAUQ,cAAeJ,UAAYJ,EAAUK,QAAwB,YAAaD,WAG/FD,EAAeD,EAAmBO,WACpCN,EAAeF,EAAQS,aAAeR,EAAmBO,UAAYP,EAAmBQ,aAa/F,SAASC,EAAYC,EAAsBC,GACzCC,OAAOC,OAAOH,EAAQI,MAAOH,GAG/B,SAASI,EAASlC,EAA2BmC,GAC3C,IAAIC,EACAC,EAEJ,OAAQrC,GACN,KAAKY,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACHwB,EAAqB,uCAAsCD,EAASZ,KACpEc,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAAA,YACHwB,EAAqB,gBAAeD,EAASZ,KAC7Cc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,aACHwB,EAAqB,gBAAeD,EAASZ,KAC7Cc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,mBACHwB,EAAoB,kCACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,eACHwB,EAAoB,+CACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,cACHwB,EAAoB,kDACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,OACL,QACEwB,EAAqB,kCAAiCD,EAASZ,KAC/Dc,EAAgB,4DAGpB,MAAMpB,EAAYf,SAASY,cAA2BsB,GAChDE,EAAWrB,GAAaA,EAAUsB,iBAAsDF,GAE9F,MAAO,CACLpB,UAAAA,EACAuB,QAASF,MAAAA,OAAF,EAAEA,EAAWA,EAASG,OAAS,IAI1C,SAASC,EAAWzC,EAAuBD,GACzC,OAAQA,GACN,KAAKY,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,OACL,KAAKA,EAAAA,GAAAA,gBACHX,EAAMG,UAAUC,IAAI,mBACpB,MAEF,KAAKO,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACFX,EAAM0C,WAA2BV,MAAMW,UAAY,QACpD,MAEF,KAAKhC,EAAAA,GAAAA,mBACHX,EAAMG,UAAUC,IAAI,W,0FC3U1B,MA2CA,GAAewC,EAAAA,EAAAA,KACb,CAACC,GAAUC,OAAAA,EAAQC,UAAAA,EAAWC,SAAAA,MAC5B,GAAIA,GAAYF,EACd,MAAO,CACLG,QAAQC,EAAAA,EAAAA,IAASJ,IAAUK,EAAAA,EAAAA,IAAWN,EAAQC,IAAUM,EAAAA,EAAAA,IAAWP,EAAQC,IAI/E,IAAKC,IAAcD,EACjB,MAAO,GAGT,MAAMZ,GAAUmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAElD,MAAO,CACLb,QAAAA,EACAe,OAAQf,IAAWoB,EAAAA,EAAAA,IAAaT,EAAQX,OAG5C,CAACqB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAAoB,kBAnB5E,EA3C8D,EAC5DV,OAAAA,EACAC,UAAAA,EACAE,OAAAA,EACAD,SAAAA,EACAd,QAAAA,EACAwB,iBAAAA,EACAC,aAAAA,MAEA,MAAMC,GAAqBC,EAAAA,EAAAA,KAAY,KACrCH,IACAC,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACD,EAAQa,EAAcZ,EAAWW,IAE/BI,GAAOC,EAAAA,EAAAA,KAEb,IAAKd,IAAYf,IAAYc,EAC3B,OAGF,MAAMgB,GAAcC,EAAAA,EAAAA,IAAeH,EAAMb,GAEzC,OACE,0BAAKiB,UAAU,aAAaC,QAASP,IAClCV,EAAAA,EAAAA,IAASD,EAAO3B,IACf,mBAAC8C,EAAA,EAAD,CAAQC,IAAKpB,EAAO3B,GAAIgD,KAAK,SAASC,KAAMtB,IAE5C,mBAACmB,EAAA,EAAD,CAAQC,IAAKpB,EAAO3B,GAAIgD,KAAK,SAASE,KAAMvB,IAE9C,0BAAKiB,UAAU,QACb,0BAAKA,UAAU,QAAQO,IAAI,QACxBT,IAAeU,EAAAA,EAAAA,GAAWV,IAE7B,0BAAKE,UAAU,OAAOO,IAAI,QACvBzB,EACGc,EAAK,gCACLa,EAAAA,EAAAA,IAAoBb,EAAsB,IAAhB5B,EAAS0C,MAAa,S,kCC5B9D,MAgJA,GAAeC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUX,QAAAA,MAGF,CACL4C,gBAHoB5C,IAAU6C,EAAAA,EAAAA,IAAoBlC,EAAQX,OAM9D,CAACqB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,gCAVgBZ,EAhJkD,EACpEoC,UAAAA,EACAC,QAAAA,EACAC,SAAAA,EACAhD,QAAAA,EACAiD,SAAAA,EACAnC,SAAAA,EACA8B,cAAAA,EACAM,mBAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAC,qBAAAA,EACAC,2BAAAA,MAEA,MAAQC,aAAcC,IAAqBC,EAAAA,EAAAA,GACzCzD,IAAW0D,EAAAA,EAAAA,IAAoB1D,EAAS,aACvC4C,GAGGe,GAAsBhC,EAAAA,EAAAA,KAAY,KAClCiB,EACFU,EAA2B,CAAEtD,QAAAA,IAE7BqD,EAAqB,CAAErD,QAAAA,MAExB,CAACsD,EAA4BD,EAAsBT,EAAe5C,IAE/D4B,GAAOC,EAAAA,EAAAA,KAEP+B,GAA8DC,EAAAA,EAAAA,KAAQ,IACnE,EAAGC,UAAAA,EAAWC,OAAAA,KACnB,mBAACC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNlC,UAAW+B,EAAS,cAAWI,EAC/BlC,QAAS6B,EACTM,UAAU,gBAEV,wBAAGpC,UAAU,gBAGhB,IAEH,OAAIqC,EAAAA,GAEA,0BAAKrC,UAAU,6BACb,mBAACsC,EAAA,EAAD,CACEC,QAASX,EACTY,UAAU,UAER1D,GACA,mBAAC2D,EAAA,EAAD,CACEC,KAAK,UACLzC,QAASkB,GAERvB,EAAK,YAGTmB,EACC,mBAAC0B,EAAA,EAAD,CACEC,KAAM9B,EAAgB,QAAU,WAChCX,QAAS0B,GAERf,EAAiB,GAAE+B,KAAKV,MAAyB,IAAnBT,qBAA4C,YAG7E,mBAACiB,EAAA,EAAD,CACEC,KAAK,WACLE,KAAM9B,EACN+B,SAAU5B,GAETrB,EAAK,uBAIXgB,GAAiB,mBAACkC,EAAA,EAAD,CAAiBC,SAAUvB,EAAkBpB,KAAK,IAAI4C,SAAO,KAMnF,0BAAKhD,UAAU,uBACXlB,GACA,sCACE,mBAACkD,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWxC,EAAK,WAChBK,QAASkB,GAET,wBAAGnB,UAAU,mBAIlBe,EACC,mBAACiB,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWxC,EAAK,qBAChBK,QAAS0B,GAERf,EACC,mBAACkC,EAAA,EAAD,CAAiBC,SAAUvB,EAAkBpB,KAAK,IAAIH,QAAS0B,IAE/D,wBAAG3B,UAAU,mBAIjB,mBAACgC,EAAA,EAAD,CACEY,KAAM9B,EACN+B,SAAU5B,EACVgB,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWxC,EAAK,sBAEhB,wBAAGI,UAAU,mBAGjB,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWpB,EAAW,WAAa,UACnCf,QAASmB,GAET,wBAAGpB,UAAWgB,EAAW,gBAAkB,kBAE7C,mBAACgB,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWxC,EAAK,SAChBK,QAASiB,GAET,wBAAGlB,UAAU,qB,wBC3KrB,MAyDA,EAhDwC,EACtCiD,KAAAA,EAAO,GAAIC,SAAAA,EAAUC,WAAAA,EAAYlD,QAAAA,MAEjC,MAAOmD,EAAaC,IAAkBC,EAAAA,EAAAA,KAAS,IAC/CC,EAAAA,EAAAA,KAAU,KACR,MAAMC,EAAgBzH,SAASY,cAAc,kCAEvC8G,EAAmB,KACvB,MAAMC,EAASF,EAAgBA,EAAcG,aAAe,EAE5DN,EAAeK,EAAe,EAANE,EAAAA,KAI1BH,IAEA,MAAMI,GAAeC,EAAAA,EAAAA,IAASL,EAzBP,KAyB6C,GAIpE,OAFAM,OAAOC,iBAAiB,SAAUH,GAAc,GAEzC,KACLE,OAAOE,oBAAoB,SAAUJ,GAAc,MAEpD,IAQH,MAAMK,GAAaC,EAAAA,EAAAA,GACjB,oBACAhB,GAAc,eACdD,GAAY,aAGd,OACE,0BAAKlD,UAAWkE,EAAYjE,QAb9B,SAAmBmE,GACbnB,GACFmB,EAAEC,oBAYDpB,GACC,0BAAKjD,UAAU,8BAA8BC,QAAUoC,EAAAA,QAAoCF,EAAVlC,GAC/E,wBAAGD,UAAY,6BAA2BoD,EAAc,YAAc,IAAM7C,IAAI,QAAQ0C,M,wBClDlG,MAAMqB,OA+EsC,IAA/BvI,SAASwI,kBACX,yBAC2C,IAAlCxI,SAASyI,qBAClB,4BAC8C,IAArCzI,SAAS0I,wBAClB,0BAGF,G,wBCjGT,MAAMC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,MAEhD,EAAgBC,IACd,MAAMC,EAAmB,IAAVD,EAAc,EAAIhC,KAAKkC,MAAMlC,KAAKmC,IAAIH,GAAShC,KAAKmC,IAAI,OAEvE,MAAQ,IAAGH,EAAQ,MAAQhC,KAAKkC,MAAMD,IAASG,QAAQ,MAAML,EAAME,MCwB/DI,EAAaZ,IACjBA,EAAEC,mBAmKJ,GA9JwC,EACtCY,iBAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAC,qBAAAA,EACAC,SAAAA,EACAC,sBAAAA,EACAC,aAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,OAAAA,MAEA,MAAOC,EAAWC,IAAiBxC,EAAAA,EAAAA,KAAS,GAEtCyC,GAAYC,EAAAA,EAAAA,IAAuB,MACnCC,GAAYD,EAAAA,EAAAA,KAAgB,IAElCzC,EAAAA,EAAAA,KAAU,KACJ8B,GACFS,EAAcT,KAEf,CAACA,KAEJ9B,EAAAA,EAAAA,KAAU,KACR,IAAI2C,EAYJ,OAVKb,IACChD,EAAAA,GACFyD,GAAc,GAEdI,EAAUnC,OAAOoC,YAAW,KAC1BL,GAAc,KAnCS,MAwCtB,KACDI,GACFnC,OAAOqC,aAAaF,MAGvB,CAACb,KAEJ9B,EAAAA,EAAAA,KAAU,MACJsC,GAAaR,IACftJ,SAASsK,KAAKpK,UAAUC,IAAI,0BAGvB,KACLH,SAASsK,KAAKpK,UAAUqK,OAAO,6BAEhC,CAACjB,EAAgBQ,IAEpB,MAAMjG,GAAOC,EAAAA,EAAAA,KAEP0G,GAAa5G,EAAAA,EAAAA,KAAayE,IAC9B,GAAI6B,EAAUO,SAAWT,EAAUS,QAAS,CAC1C,MAAM,MAAEC,EAAF,KAASC,GAASX,EAAUS,QAAQG,wBACpCC,EAAUxC,aAAayC,WAAazC,EAAEwC,QAAUxC,EAAE0C,cAAc,GAAGF,QACzEhB,EAAOjD,KAAKoE,IAAIpE,KAAKqE,IAAI7B,IAAayB,EAAUF,GAAQD,GAAQtB,GAAW,OAE5E,CAACA,EAAUS,IAERqB,GAAkBtH,EAAAA,EAAAA,KAAayE,IACnC6B,EAAUO,SAAU,EACpBD,EAAWnC,KACV,CAACmC,IAEEW,GAAiBvH,EAAAA,EAAAA,KAAY,KACjCsG,EAAUO,SAAU,IACnB,IAsDL,IAAwBW,EAAuBC,EA1C7C,IAVA7D,EAAAA,EAAAA,KAAU,KACR,GAAKwC,EAAUS,SAAYX,EAC3B,OAAOwB,EAAAA,EAAAA,GAActB,EAAUS,QAAS,CACtCc,UAAWL,EACXM,UAAWL,EACXjH,QAASiH,EACTM,OAAQjB,MAET,CAACV,EAAWoB,EAAiBV,EAAYW,IAEvCrB,GAAcR,EAInB,OACE,0BAAKrF,UAAY,wBAAsBsF,EAAuB,SAAW,IAAMrF,QAAS+E,GA6C5F,SACEE,EAAqBC,EAAkBF,EAA0Bc,GAEjE,MAAM0B,EAAoBvC,EAAcC,EAAY,IAC9CuC,EAAwC,IAAnBzC,EAE3B,OACE,0BAAKjF,UAAU,kBAAkB2H,IAAK5B,GACpC,0BAAK/F,UAAU,yBACb,0BACEA,UAAU,2BAEVlC,MAAQ,UAAS4J,GAAsB,OAEzC,0BACE1H,UAAU,yBAEVlC,MAAQ,UAAS2J,GAAoB,SA7DxCG,CAAe1C,EAAaC,EAAUF,EAAkBc,GACzD,mBAAC/D,EAAA,EAAD,CACEI,UAAWxC,EAAK,iBAChBQ,KAAK,OACLyH,QAASxF,EAAAA,GACTH,MAAM,oBACNlC,UAAU,OACVC,QAAS0F,GAET,wBAAG3F,UAAWuF,EAAW,aAAe,eAmBhD,SAAoBL,EAAqBC,GACvC,OACE,0BAAKnF,UAAU,eACX,IAAE8H,EAAAA,EAAAA,IAAoB5C,SAAkB4C,EAAAA,EAAAA,IAAoB3C,MApB7D4C,CAAW7C,EAAaC,GACxBF,EAAmB,IAwBFkC,EAxBsBlC,EAwBCmC,EAxBiBhC,EA0B5D,0BAAKpF,UAAU,oBACX,GAAEgI,EAAeZ,EAAYD,QAAoBa,EAAeZ,OA1BjE5B,GACC,mBAACxD,EAAA,EAAD,CACEI,UAAU,aACVhC,KAAK,OACL8B,MAAM,oBACNlC,UAAU,aACVC,QAASyF,GAET,wBAAG1F,UAAcyF,EAAe,mBAAqB,uB,iNCnH/D,MAiMA,IAAe9E,EAAAA,EAAAA,KA/LmB,EAChCsH,IAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,WAAAA,EACA7G,aAAAA,EACA6D,SAAAA,EACAiD,kBAAAA,EACAC,OAAAA,EACAC,QAAAA,MAGA,MAAMC,GAAWxC,EAAAA,EAAAA,IAAyB,OACnCT,EAAUkD,IAAenF,EAAAA,EAAAA,KAAUoF,EAAAA,KAAiBC,EAAAA,KACpDzD,EAAa0D,IAAkBtF,EAAAA,EAAAA,IAAS,IACxCuF,EAAmBC,IAAwBxF,EAAAA,EAAAA,KAAS,IAEpDmC,EAAcsD,EAAeC,GHtCvB,SAA6BC,EAAgBR,GAC1D,MAAOhD,EAAcyD,IAAmB5F,EAAAA,EAAAA,IAAS6F,QAAQ7E,GAAQvI,SAASuI,KAoE1E,OA9BA8E,EAAAA,EAAAA,KAAgB,KACd,MAAMC,EAAW,KAAQH,EAAgBC,QAAQ7E,GAAQvI,SAASuI,MAC5DgF,EAAgB,KAAQJ,GAAgB,IACxCK,EAAe,KACnBL,GAAgB,GAChBT,GAAY,IAERe,EAAQP,EAAMzC,QAWpB,OATAzK,SAASiI,iBAAiB,mBAAoBqF,GAAU,GACxDtN,SAASiI,iBAAiB,yBAA0BqF,GAAU,GAC9DtN,SAASiI,iBAAiB,sBAAuBqF,GAAU,GAEvDG,IACFA,EAAMxF,iBAAiB,wBAAyBsF,GAAe,GAC/DE,EAAMxF,iBAAiB,sBAAuBuF,GAAc,IAGvD,KACLxN,SAASkI,oBAAoB,mBAAoBoF,GAAU,GAC3DtN,SAASkI,oBAAoB,yBAA0BoF,GAAU,GACjEtN,SAASkI,oBAAoB,sBAAuBoF,GAAU,GAC1DG,IACFA,EAAMvF,oBAAoB,wBAAyBqF,GAAe,GAClEE,EAAMvF,oBAAoB,sBAAuBsF,GAAc,OAIlE,IAEEjF,GAAyB,QAAjBmF,EAAAA,GAIN,CAAChE,EAtEc,KACfwD,EAAMzC,UAAalC,GAAyB,QAAjBmF,EAAAA,MAI5BR,EAAMzC,QAAQkD,kBAChBT,EAAMzC,QAAQkD,oBACLT,EAAMzC,QAAQmD,wBACvBV,EAAMzC,QAAQmD,0BACLV,EAAMzC,QAAQoD,sBACvBX,EAAMzC,QAAQoD,wBACLX,EAAMzC,QAAQqD,sBACvBZ,EAAMzC,QAAQqD,uBAGhBX,GAAgB,KAGK,KAChBD,EAAMzC,UAIPzK,SAASiN,eACXjN,SAASiN,iBACAjN,SAAS+N,oBAClB/N,SAAS+N,sBACA/N,SAASgO,uBAClBhO,SAASgO,yBACAhO,SAASiO,sBAClBjO,SAASiO,uBAGXd,GAAgB,MAkCT,EAAC,GGhC4Ce,CAAoBzB,EAAUC,IAE9E,WAAEyB,EAAF,iBAAcjF,EAAd,kBAAgCkF,IAAsBC,EAAAA,EAAAA,MAE1DC,aAAcC,EACdC,qBAAsBC,IACpBC,EAAAA,EAAAA,IAAmBP,OAAY/H,OAAWA,EAAW,SAEvDkI,aAAcK,EACdH,qBAAsBI,IACpBF,EAAAA,EAAAA,GAAkB9B,EAAAA,KAAWpD,IAAa+E,OAAqBnI,OAAWA,EAAW,SAEzFoB,EAAAA,EAAAA,KAAU,KACJ+E,IAAWD,EACbG,EAAShC,QAASoE,QACT3C,IAAQS,EAAAA,KAIjBmC,EAAAA,EAAAA,GAASrC,EAAShC,WAEnB,CAAC8B,EAAQD,EAAmBJ,KAE/B1E,EAAAA,EAAAA,KAAU,KACJiF,EAAShC,QAAStB,cAAgBsD,EAAShC,QAASrB,UACtDyD,EAAe,GACfH,GAAY,IAEZG,EAAeJ,EAAShC,QAAStB,eAElC,CAACA,IAEJ,MAAM4F,GAAkBnL,EAAAA,EAAAA,KAAayE,IACnCA,EAAEC,kBACEkB,GACFiD,EAAShC,QAASoE,QAClBnC,GAAY,MAEZoC,EAAAA,EAAAA,GAASrC,EAAShC,SAClBiC,GAAY,GACRpG,EAAAA,IACFyG,GAAqB,MAGxB,CAACvD,KAEJwF,EAAAA,EAAAA,GAAgBvC,EAAU,IAE1B,MAAMwC,GAAkBrL,EAAAA,EAAAA,KAAY,KAClCmJ,GAAqB,KACpB,IAEGmC,GAAiBtL,EAAAA,EAAAA,KAAY,KACjCmJ,GAAqB,KACpB,IAEGoC,GAAmBvL,EAAAA,EAAAA,KAAayE,IACpCwE,EAAexE,EAAE+G,cAAcjG,eAC9B,IAEGkG,GAAczL,EAAAA,EAAAA,KAAY,KAC9BiJ,EAAe,GACfH,GAAY,GACZK,GAAqB,KACpB,IAEGuC,GAAyB1L,EAAAA,EAAAA,KAAY,KACrC8F,GAAgBuD,EAClBA,KACUvD,GAAgBsD,GAC1BA,MAED,CAACC,EAAgBvD,EAAcsD,IAE5BxC,GAAa5G,EAAAA,EAAAA,KAAa2L,IAC9B9C,EAAShC,QAAStB,YAAcoG,IAC/B,IAEGC,GAAiB5L,EAAAA,EAAAA,KAAayE,IAClCA,EAAEC,kBACFyE,GAAsBD,GACjBA,IACHL,EAAShC,QAASoE,QAClBnC,GAAY,MAEb,CAACI,KAEJtF,EAAAA,EAAAA,KAAU,KACR,MAAMiI,EAA4BpH,IAClB,UAAVA,EAAEjE,KAA6B,MAAViE,EAAEjE,MACzBiE,EAAEqH,iBACFX,EAAgB1G,KAMpB,OAFArI,SAASiI,iBAAiB,UAAWwH,GAA0B,GAExD,KACLzP,SAASkI,oBAAoB,UAAWuH,GAA0B,MAEnE,CAACV,IAEJ,MAAMY,EAAetD,GAAe,UAASA,EAAW3B,oBAAoB2B,EAAW1E,WACjFiI,EAAc,yBAAwBxD,KAE5C,OACE,0BACEnI,UAAU,cACVC,SAAUiI,GAAS7F,EAAAA,GAA0BkJ,OAAiBpJ,EAC9DyJ,YAAc1D,GAAUQ,EAAAA,QAAiCvG,EAAlB6I,EACvCa,WAAa3D,GAAUQ,EAAAA,QAAgCvG,EAAjB8I,GAEtC,0BAEEnN,MAAO4N,GAGP,+BACE/D,IAAKa,EACLsD,SAAUpD,EAAAA,GACVqD,aAAW,EACXC,KAAM9D,EAEN+D,MAAO/D,EACP9K,GAAG,qBAEHU,MAAO6N,EACPO,OAAQvD,EAAAA,GAAS,IAAMF,GAAY,QAAQtG,EAC3CgK,QAASf,EACTnL,QAAUoC,EAAAA,QAA4CF,EAAlB2I,EACpCsB,cAAef,GAEXlB,EAfN,CAgBEkC,aAAcnB,IAEbjD,GAAO,6BAAQ5L,IAAK4L,MAGxByC,GACC,mBAAC1I,EAAA,EAAD,CAAQC,OAAK,EAACjC,UAAY,eAAc2K,IAAwB1K,QAAS6K,GACvE,wBAAG9K,UAAU,eAGhBsK,GACC,0BAAKtK,UAAW,CAAC,oBAAqBwK,GAAmB8B,KAAK,OAC1DpC,GAAc,0BAAKlK,UAAU,aAAf,gBAChB,mBAAC8C,EAAA,EAAD,CACE1C,KAAK,KACL2C,SAAUmH,EAAa,EAAI3I,EAC3BgL,QAAM,EACNtM,QAASsI,MAIbL,IAAUoC,GACV,mBAAC,GAAD,CACE/E,SAAUA,EACVN,iBAAkBA,EAClBC,YAAaA,EACbM,sBAAuB2D,QAAQJ,GAC/BtD,aAAcA,EACdL,SAAUA,EACVD,SAAUqD,EAAShC,QAAUgC,EAAShC,QAAQrB,SAAW,EACzDE,eAAgBwD,EAChBvD,qBAAsB8C,GAAcA,EAAW3B,MAvLpB,IAwL3Bb,OAAQW,EACRb,mBAAoB2F,EACpB1F,YAAamF,QC5FvB,IAAenK,EAAAA,EAAAA,KArGoB,EAAG6L,QAAAA,EAASC,aAAAA,MAC7C,MAAM,qBAAElC,IAAyBE,EAAAA,EAAAA,GAAkB+B,GAC7CE,GAAcC,EAAAA,EAAAA,GAAqBH,GAEnCI,GAAW5G,EAAAA,EAAAA,IAAyB,OACnC6G,EAAWC,IAAgBxJ,EAAAA,EAAAA,IAAS,GACrC2C,GAAYD,EAAAA,EAAAA,KAAgB,IAElCzC,EAAAA,EAAAA,KAAU,KACJiJ,IAAYE,GACdI,EAZmB,OAcpB,CAACN,EAASE,IAEb,MAYMzF,GAAkBtH,EAAAA,EAAAA,KAAY,KAClCsG,EAAUO,SAAU,IACnB,IAEGU,GAAiBvH,EAAAA,EAAAA,KAAY,KACjCsG,EAAUO,SAAU,EACF,IAAdqG,GACFJ,EAAaI,GAAY5G,EAAUO,WAEpC,CAACiG,EAAcI,KAMlBtJ,EAAAA,EAAAA,KAAU,KACRkJ,EAAaI,GAAY5G,EAAUO,WAClC,CAACqG,EAAWJ,IAEf,MAAM7M,GAAOC,EAAAA,EAAAA,KAEPG,GAAYmE,EAAAA,EAAAA,GAChB,eACAoG,GAGF,OACE,0BAAKvK,UAAWA,GACd,mBAACgC,EAAA,EAAD,CACE+K,SA3DsB,IA2DZF,EACVzM,KAAK,OACL8B,MAAM,oBACNE,UAAWxC,EAAK,WAChBI,UAAU,WACV6H,QAASxF,EAAAA,GACTpC,QA/CgB,KAChB2M,EAASpG,SACXsG,EAAanK,KAAKoE,IApBM,EAoBc8F,EAAY,OA+ChD,wBAAG7M,UAAU,mBAEf,mBAACgC,EAAA,EAAD,CACE+K,SAvEsB,IAuEZF,EACVzM,KAAK,OACL8B,MAAM,oBACNE,UAAU,UACVpC,UAAU,UACV6H,QAASxF,EAAAA,GACTpC,QApDe,KACf2M,EAASpG,SACXsG,EAAanK,KAAKqE,IA3BM,EA2Bc6F,EAAY,OAoDhD,wBAAG7M,UAAU,kBAEf,0BAAKA,UAAU,YACb,0BAAKA,UAAU,kBACb,0BACEA,UAAU,kBAEVlC,MAAQ,UApFK,IAoFK+O,EAAY,QAEhC,4BACElF,IAAKiF,EACL5F,IAzFkB,EA0FlBD,IA3FkB,EA4FlBiG,KAAK,MACLC,MAAOJ,EACPK,KAAK,QACLlN,UAAU,iBACVmN,SAtDoB/I,IAC5B0I,EAAanK,KAAKqE,IA3CQ,EA2CYrE,KAAKoE,IAAIqG,OAAOhJ,EAAEiJ,OAAOJ,OA1CrC,MAgGlBK,YAAarG,EACbsG,UAAWrG,UCrFjBsG,GAAiB,CACrB,EAAG,EAAG,EAAG,EAAG,EAAG,GAGXC,GAAe,CACnB,EAAG,EACH,IAAK,IACL,EAAG,IACH,IAAK,IACL,EAAG,KAGCC,GAAiB,IAsKvB,IAAe/M,EAAAA,EAAAA,KA1Ie,EAC5BgN,SAAAA,EACA3N,UAAAA,EACA4N,OAAAA,EACAC,OAAAA,EACAhB,UAAAA,EACAiB,UAAAA,EACAC,UAAAA,EACAC,MAAAA,MAEA,MAAMC,EAAiBR,GAAaZ,IAA2CA,GACxEqB,EAAYC,IAAiB7K,EAAAA,EAAAA,KAAkB,IAC/C8K,EAAUC,IAAe/K,EAAAA,EAAAA,IAAoB,CAClDgL,GAAIR,EAAWS,GAAIR,EAAWS,EAAG,EAAGC,EAAG,KAGlCC,EAAYC,IAAiBrL,EAAAA,EAAAA,IAAmBkK,IAGjDoB,GAAgB5I,EAAAA,EAAAA,IAAuB,MAGvC6I,GAAkB7I,EAAAA,EAAAA,IAAuB,MA8F/C,OA5FAzC,EAAAA,EAAAA,KAAU,KACR,MAAMuL,EAAeb,GAAkBS,EAAW,GAC5CK,EAAWjB,GAAaY,EAAW,GACnCM,EAAWjB,GAAaW,EAAW,GAEnCO,EAAgB,IAAIP,GACtBA,EAAW,KAAOI,IACpBG,EAAc,GAAKH,GAAgBG,EAAc,GACjDA,EAAc,GAAKH,GAAgBG,EAAc,IAE/CP,EAAW,KAAOK,IACpBE,EAAc,GAAKF,GAEjBL,EAAW,KAAOM,IACpBC,EAAc,GAAKD,IAGhBE,EAAAA,EAAAA,IAAqBR,EAAYO,IACpCN,EApEN,SAAiCQ,EAAkBT,EAAsBU,GACvE,MAAMC,EAAQD,GAAWA,EAAQzS,cAAc,eAC/C,IAAKyS,IAAYC,EACf,OAAOX,EAET,MAAMY,EAAcF,EAAQzI,wBACtB4I,EAAYF,EAAM1I,wBAElB6I,EAAeD,EAAU9I,MAAQ0I,EAAYT,EAAW,GACxDe,EAAgBF,EAAU7L,OAASyL,EAAYT,EAAW,GAC1DgB,GAAWJ,EAAY7I,MAAQ+I,GAAe,EAAId,EAAW,GAC7DiB,GAAWL,EAAY5L,OAAS+L,GAAgB,EAAIf,EAAW,GAYrE,OAXIY,EAAY7I,OAAS6I,EAAY7I,MAAQiH,GAAiBgC,EAC5DhB,EAAW,IAAMgB,EAAUJ,EAAY7I,MAAQiH,GACtC8B,GAAeA,EAAcE,EAAUhC,KAChDgB,EAAW,IAAMc,EAAcE,EAAUhC,IAEvC4B,EAAY5L,QAAU4L,EAAY5L,OAASgK,GAAiBiC,EAC9DjB,EAAW,IAAMiB,EAAUL,EAAY5L,OAASgK,GACvC+B,GAAgBA,EAAeE,EAAUjC,KAClDgB,EAAW,IAAMe,EAAeE,EAAUjC,IAGrCgB,EA6CWkB,CAAwBlB,EAAW,GAAIO,EAAeL,EAAcpI,YAGnF,CAACsH,EAAWC,EAAWE,KAE1B1K,EAAAA,EAAAA,KAAU,KACHsK,GACHc,EAAcnB,MAEf,CAACK,KAEJtK,EAAAA,EAAAA,KAAU,KACJsL,EAAgBrI,UAClBqI,EAAgBrI,QAAQ1I,MAAM+R,UAAa,UAASnB,EAAWoB,iBAEhE,CAAClC,EAAQc,IA2DRd,EACKD,EAIP,0BACEhG,IAAKiH,EACL5O,UAAY,eAAcA,GAAa,KACvCsN,YAjEqBlJ,IACvB,IAAKyJ,EACH,OAGFzJ,EAAEC,kBACFD,EAAEqH,iBAEF,MAEMsE,EAAyB,CAC7BzB,GAHcI,EAAW,GAIzBH,GAHcG,EAAW,GAIzBF,EAAGpK,EAAE4L,MACLvB,EAAGrK,EAAE6L,OAEP5B,EAAY0B,GACZ5B,GAAc,GAEVS,EAAcpI,SAChBoI,EAAcpI,QAAQvK,UAAUC,IAAI,SA8CpCqR,UA1CkB,KACpBY,GAAc,GAEVS,EAAcpI,SAChBoI,EAAcpI,QAAQvK,UAAUqK,OAAO,QAGrC0H,GACFA,EAAMU,EAAW,GAAIA,EAAW,KAmChCwB,YArBqB9L,IACvB,GAAI8J,EAAY,CACd,MAAMe,EAZV,SAA0BT,EAAWC,GACnC,MAAMQ,EAAgB,IAAIP,GACpByB,EAAS/B,EAASI,EAAIA,EACtB4B,EAAShC,EAASK,EAAIA,EAI5B,OAHAQ,EAAc,GAAKb,EAASE,GAAK6B,EACjClB,EAAc,GAAKb,EAASG,GAAK6B,EAE1BnB,EAKiBoB,CAAiBjM,EAAE4L,MAAO5L,EAAE6L,OAClDtB,EAAcM,GAEVJ,EAAgBrI,UAClBqI,EAAgBrI,QAAQ1I,MAAM+R,UAAa,UAASnB,EAAWoB,kBAiBjE,0BACEnI,IAAKkH,EACL7O,UAAU,iBAET2N,OCjHH2C,GAAqB,IAkgB3B,SAASC,GAAYC,EAAkBC,EAA2BC,GAChE,OAAOF,EAEH,0BACEnU,IAAKmU,EACLG,IAAI,GAEJ7S,MAAO2S,EAAa,UAASA,EAAUhK,UAAY,GACnDmK,UAAWzH,QAAQuH,KAIrB,0BACE1Q,UAAU,kBAEVlC,MAAO2S,EAAa,UAASA,EAAUhK,UAAY,IAEnD,mBAACoK,EAAA,EAAD,CAAS3O,MAAM,WAKvB,UAAevB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OACJC,EADI,SACIkS,EADJ,UACcjS,EADd,cACyBkS,EADzB,kBACwCC,EADxC,OAC2DnV,GAC7D8C,EAAOsS,aACL,eACJC,GACEvS,EAAOwS,SAASC,MAEpB,GAAIvV,IAAWY,EAAAA,GAAAA,aAAgC,CAC7C,IAAMmC,IAAUC,EACd,MAAO,CAAEqS,eAAAA,GAGX,MAAMlT,GAAUmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAClD,OAAKb,EAIE,CACLY,OAAAA,EACAC,UAAAA,EACAwS,SAAUrT,EAAQqT,SAClBxV,OAAAA,EACAmC,QAAAA,EACAkT,eAAAA,GATO,CAAEA,eAAAA,GAab,GAAIH,EAGF,MAAO,CACLlS,WAAY,EACZwS,SAAUN,EACVO,aALarS,EAAAA,EAAAA,IAAWN,EAAQoS,KAAkB7R,EAAAA,EAAAA,IAAWP,EAAQoS,GAMrEC,kBAAmBA,GAAqB,EACxCE,eAAAA,EACArV,OAAAA,GAIJ,KAAM+C,GAAUkS,GAAYjS,GAC1B,MAAO,CAAEqS,eAAAA,GAGX,IAAIlT,EAWAuT,EAOAC,EAXJ,GALExT,EADEnC,GAAU,CAACY,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAASxB,IACjF4V,EAAAA,EAAAA,IAAuB9S,EAAQC,EAAQC,IAEvCM,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,IAGzCb,EACH,MAAO,CAAEkT,eAAAA,GAYX,GANEK,EADE1V,GAAU,CAACY,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAASxB,IAC5E6V,EAAAA,EAAAA,IAAwB/S,EAAQC,IAEhC+S,EAAAA,EAAAA,IAAmBhT,EAAQC,GAIxC/C,IAAWY,EAAAA,GAAAA,QAA4BZ,IAAWY,EAAAA,GAAAA,MACpD+U,GAAgBI,EAAAA,EAAAA,IAAkBjT,EAAQC,EAAQkS,KAAae,EAAAA,EAAAA,IAAgBlT,EAAQC,EAAQkS,QAC1F,GAAIjV,IAAWY,EAAAA,GAAAA,YAA+B,CACnD,MAAMqV,GAAgBC,EAAAA,EAAAA,IAAyBpT,IACzC,SAAEqT,GAAcF,GAAiBA,EAAcG,eAAiBH,EAAcG,cAAcC,OAAU,GAC5GV,EAAgBQ,EAGlB,MAAO,CACLpT,OAAAA,EACAkS,SAAAA,EACAjS,UAAAA,EACAwS,SAAUrT,EAAQqT,SAClBxV,OAAAA,EACAmC,QAAAA,EACAuT,aAAAA,EACAC,cAAAA,EACAN,eAAAA,MAGJ,CAAC7R,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAAmB,mBAAoB,kBAAmB,kBAvF1CZ,EAthBgC,EAClDE,OAAAA,EACAkS,SAAAA,EACAjS,UAAAA,EACAwS,SAAAA,EACAxV,OAAAA,EACAyV,YAAAA,EACAN,kBAAAA,EACAhT,QAAAA,EACAuT,aAAAA,EACAC,cAAAA,EACAW,gBAAAA,EACA3S,iBAAAA,EACA4S,gBAAAA,EACA3S,aAAAA,EACAyR,eAAAA,MAEA,MAAMnP,EAASoH,QAAQmI,GAAezS,GAEhCwT,EAAoBxW,IAAWY,EAAAA,GAAAA,YAC/B6V,EAAezW,IAAWY,EAAAA,GAAAA,aAG1B8V,EAAQvU,GAAUwU,EAAAA,EAAAA,IAAgBxU,QAAWmE,EAC7CqH,EAAQxL,GAAUyU,EAAAA,EAAAA,IAAgBzU,QAAWmE,EAC7CuQ,EAAe1U,GAAU2U,EAAAA,EAAAA,IAAuB3U,QAAWmE,EAC3DyQ,EAAe5U,GAAU6U,EAAAA,EAAAA,IAAuB7U,QAAWmE,EAC3D2Q,IAAkB9U,IAAU+U,EAAAA,EAAAA,IAAuB/U,GACnDgV,KAAkBhV,IAAUiV,EAAAA,EAAAA,IAAuBjV,GACnD+C,GAAUoI,QAAQK,GAASoJ,GAAgBI,IAC3CE,GAAU/J,SAASpI,KAAYwR,GAASG,GAAgBI,KACxD,MAAE5K,IAAUsB,GAASoJ,GAAgB,GACrC9T,GAAWqK,QAAQmI,GAGnB6B,GAAgBhK,QAAQuJ,GAAgBE,GACxCQ,IAAavR,EAAAA,EAAAA,KAAQ,IAClBsR,IAAiBtU,EACpB,CAACA,IACDwU,EAAAA,EAAAA,IAAuB9B,GAAgB,GAAIC,GAAiB,GAAIa,IACnE,CAACc,GAAetU,EAAW0S,EAAcC,EAAea,IAErDiB,GAA4BzU,EAAYuU,GAAWG,QAAQ1U,IAAc,EACzE2U,GAAwC,IAA9BF,KAAkE,IAA/BA,GAC7CG,GAASH,KAA8BF,GAAW9U,OAAS,IAAoC,IAA/BgV,GAGhEI,IAAe1N,EAAAA,EAAAA,MACf2N,IAAehH,EAAAA,EAAAA,GAAgC0E,IACjDtP,GAAY4R,IAAgBA,KAAiBtC,GAAaqC,GAAalN,UACzEkN,GAAalN,QAAU8M,IAEzB,MAAMM,GAAiB1C,GAAkB,EAAI,WAAa,OACpD2C,GAAqC,IAAnB3C,EAAuB,aAAe,OACxD4C,GAAsC,IAAnB5C,GAGlB6C,GAAgBC,KAAqB1Q,EAAAA,EAAAA,KAAkB,IACvD2Q,GAAgBC,KAAqB5Q,EAAAA,EAAAA,KAAS,IAC9CtC,GAAUmT,KAAe7Q,EAAAA,EAAAA,KAAkB,IAC3CuJ,GAAWC,KAAgBxJ,EAAAA,EAAAA,IAAiB,IAC5C8Q,GAAUC,KAAe/Q,EAAAA,EAAAA,IAAS,CAAEkL,EAAG,EAAGC,EAAG,IAGpD,SAAS6F,GAAaC,GACpB,GAAIzV,SAAkCqD,IAAtB6O,EAAiC,CAC/C,MAAM,OAAEwD,GAAWlD,EACnB,OAAOkD,GAAUA,EAAOxD,GACnB,QAAOwD,EAAOxD,GAAmB5T,aAClCqX,EAAAA,EAAAA,IAAkBnD,EAAciD,EAAS,MAAQ,UAGvD,OAAOvW,IAAW0D,EAAAA,EAAAA,IAAoB1D,EAASuW,EAAS,aAAe,iBAGzE,MAAMG,IAAmBC,EAAAA,EAAAA,GACvB3W,IAAYqU,GAAqBC,KAAiB5Q,EAAAA,EAAAA,IAAoB1D,EAAS,kBAC/EmE,EACAyS,EAAAA,GAAAA,aACAzS,EACA2R,IAAoBxD,IAEhBuE,GAAmBP,KACnBQ,IAAiBH,EAAAA,EAAAA,GACrBE,QACA1S,EACAyS,EAAAA,GAAAA,aACAzS,EACA2R,IAAoBxD,KAEdxP,UAAWiU,GAAb,aAA+BxT,KAAiBE,EAAAA,EAAAA,GACpD6S,IAAa,QACbnS,EACAnE,IAAWgX,EAAAA,EAAAA,IAAsBhX,EAAS,mBAC1CmE,EACA2R,IAAoBxD,IAGhB2E,GAAgB1C,GAAS/I,GAAU+I,GAAS/I,GAAQgH,aAAUrO,EACpE,IAAI+S,IAAkBnU,KAAYkU,IAAgBF,KAAsBD,IAAkBJ,GAC1F,MAAMS,IAAeC,EAAAA,EAAAA,IAAaF,IAAiBlX,IAAWqX,EAAAA,EAAAA,IAA4BrX,IACrFkX,IAAiBrZ,IAAWY,EAAAA,GAAAA,eAC/ByY,GAAgBC,IAGlB,MAAMG,GAAYtX,GAAUuX,EAAAA,EAAAA,IAAmBvX,QAAWmE,EACpDlB,GAAWjD,GACbwX,EAAAA,EAAAA,IAAmBxX,GACnBc,GACG,SAAQwS,EAAalU,MAAM4T,aAC5B7O,EAEN,IAAIsT,GACAzX,EACE8U,GAAmBE,GACrByC,IAAaC,EAAAA,EAAAA,IAAmB1X,GAAU2X,UACjCpD,GAASG,EAClB+C,IAAaG,EAAAA,EAAAA,IAAwBrD,GAASG,IACrClJ,GAASoJ,KAClB6C,IAAaI,EAAAA,EAAAA,IAAoBrM,GAASoJ,IAG5C6C,GAAaK,EAAAA,IAGfvS,EAAAA,EAAAA,KAAU,KACHlB,EAAAA,IAILtG,SAASsK,KAAKpK,UAAU8Z,OAAO,uBAAwBhU,KACtD,CAACA,IAEJ,MAAMiU,IAAcC,EAAAA,EAAAA,MACpB1S,EAAAA,EAAAA,KAAU,KACR,MAAM2S,EAAMnS,OAAOoS,WAAWC,EAAAA,IAO9B,MANoC,mBAAzBF,EAAIlS,iBACbkS,EAAIlS,iBAAiB,SAAUgS,IACK,mBAApBE,EAAIG,aACpBH,EAAIG,YAAYL,IAGX,KACkC,mBAA5BE,EAAIjS,oBACbiS,EAAIjS,oBAAoB,SAAU+R,IACK,mBAAvBE,EAAII,gBACpBJ,EAAII,eAAeN,OAGtB,CAACA,KAEJ,MAAMO,IAAc5J,EAAAA,EAAAA,GAAoC3O,GAClDwY,IAAa7J,EAAAA,EAAAA,GAAY9Q,GACzB4a,IAAkB9J,EAAAA,EAAAA,GAA2C2E,GAC7DoF,IAAoB/J,EAAAA,EAAAA,GAAYuI,KACtC3R,EAAAA,EAAAA,KAAU,KACR,GAAIuQ,IAAoB/R,IAAWwU,KAAgBE,GAAiB,EAClEE,EAAAA,EAAAA,IAA4BrG,GAAqBsG,EAAAA,IACjD,MAAMC,EAAY7Y,GAAU8Y,EAAAA,EAAAA,GAAkB9Y,QAAWmE,GV5OxD,SACL4U,EACAlb,EACAqZ,EACAO,EACA1U,EACA/C,GAEA,MAAQK,QAAS2Y,GAAcjZ,EAASlC,EAAQmC,GAChD,IAAKgZ,EACH,OAGF,MAAQvQ,MAAOwQ,GAAgBC,EAAAA,EAAAA,OAE7BzQ,MAAO0Q,EAAgBzT,OAAQ0T,IAC7BC,EAAAA,EAAAA,IAAkCN,EAAWhW,IACzC0F,MAAO6Q,EAAS5T,OAAQ6T,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiB3B,EAAWhP,MAAOgP,EAAW/R,QAE1D+T,GAAUR,EAAcK,GAAW,EACnCI,EAuPR,SAAsBX,GACpB,MAAMb,EAAMnS,OAAOoS,WAAWC,EAAAA,IAC9B,IAAIuB,EAAe,MAKnB,OAJIZ,IACFY,GAAgBzB,EAAI0B,QAAU,KAAQ,OAGjCD,EAAe/T,EAAAA,GA9PRiU,CAAad,IAAcK,EAAkBG,GAAY,EAEvE,IACEO,IAAKC,EAASrR,KAAMsR,EAAUvR,MAAOwR,EAAWvU,OAAQwU,GACtDlB,EAAUrQ,wBAEd,GAAI,CACFlK,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAASxB,GAAS,CAClB,MAAMsc,EA+LV,SAAiBC,EAAmBC,EAAoBP,EAAapR,EAAcD,EAAe/C,GAChG,GAAI0U,IAAcC,EAAY,CAC5B,MAAMjY,EAAOuC,KAAKoE,IAAIN,EAAO/C,IAAW0U,EAAYC,GACpD3R,IAAStG,EAAOqG,GAAS,EACzBqR,IAAQ1X,EAAOsD,GAAU,EACzB+C,EAAQrG,EACRsD,EAAStD,OACJ,GAAIgY,EAAYC,EAAY,CACjC,MAAMC,EAAW7R,EAEjBC,KADAD,EAAQ/C,GAAU0U,EAAYC,IACbC,GAAY,OACxB,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAY7U,EAElBoU,KADApU,EAAS+C,GAAS4R,EAAaD,IACdG,GAAa,EAGhC,MAAO,CACLT,IAAAA,EAAKpR,KAAAA,EAAMD,MAAAA,EAAO/C,OAAAA,GAjNA8U,CAAQlB,EAASC,EAAUQ,EAASC,EAAUC,EAAWC,GAC3EH,EAAUI,EAAUL,IACpBE,EAAWG,EAAUzR,KACrBuR,EAAYE,EAAU1R,MACtByR,EAAaC,EAAUzU,OAGzB,MAAM+U,EAAkBT,EAAWC,EAAY,GAAMR,EAASH,EAAU,GAClEoB,EAAkBX,EAAUG,EAAa,GAAMR,EAAQH,EAAW,GAClEoB,EAAaV,EAAYX,EACzBsB,EAAaV,EAAaX,EAE1Bzb,EAAQH,EAAYuZ,GAAiB8B,GAC3CvZ,EAAY3B,EAAO,CACjBgc,IAAM,GAAEJ,MACRhR,KAAO,GAAE+Q,MACThR,MAAQ,GAAE6Q,MACV5T,OAAS,GAAE6T,MACX1H,UAAY,eAAc4I,QAAqBC,iBAA8BC,MAAeC,OAE9Fra,EAAWzC,EAAOD,GAElBE,SAASsK,KAAKpK,UAAUC,IAAI,mBAE5B2c,uBAAsB,KACpB9c,SAASsK,KAAK7J,YAAYV,GAE1B+c,uBAAsB,KACpB/c,EAAMgC,MAAM+R,UAAY,GAuS9B,SAAoB/T,GACjBA,EAAM0C,WAA2BV,MAAMW,UAAY,UACpD3C,EAAMG,UAAUqK,OAAO,kBAAmB,UAxStCwS,CAAWhd,GAEXqK,YAAW,KACT0S,uBAAsB,KAChB9c,SAASsK,KAAK0S,SAASjd,IACzBC,SAASsK,KAAK2S,YAAYld,GAE5BC,SAASsK,KAAKpK,UAAUqK,OAAO,wBAvEd,IAyEGsQ,EAAAA,UUuKxBqC,CADkB9P,QAAQ0N,GACAhb,EAASqZ,GAAgBO,GAAY1U,GAAS/C,GAGtE8V,KAAqB/R,IAAWwU,IAAeE,OACjDE,EAAAA,EAAAA,IAA4BrG,GAAqBsG,EAAAA,IVtKhD,SAAwB/a,EAA2BqZ,EAAuBlX,GAC/E,MAAM,UAAElB,EAAWuB,QAAS6a,GAAYnb,EAASlC,EAAQmC,GACzD,IAAKkb,EACH,OAGF,MAAMlC,EAAYjb,SAASod,eAAe,eAAgBxc,cACxD,0EAEF,IAAKqa,IAAckC,EACjB,OAGF,MACEpB,IAAKC,EAASrR,KAAMsR,EAAUvR,MAAOwR,EAAWvU,OAAQwU,GACtDlB,EAAUrQ,yBAEZmR,IAAKsB,EAAW1S,KAAM+Q,EAAQhR,MAAO6Q,EAAS5T,OAAQ6T,GACpD2B,EAAQvS,wBAEZ,IAAI+Q,EAAQ0B,EACZ,IAqJF,SAA6BC,GAC3B,GAAyB,SAArBA,EAAGvb,MAAMwb,QACX,OAAO,EAGT,MAAMC,EAAOF,EAAG1S,yBACRjD,OAAQ8V,GAAiBtC,EAAAA,EAAAA,MAEjC,OAAQqC,EAAKzB,KAAO0B,GAAmBD,EAAKzB,IAAMyB,EAAK7V,QAAW,EA7J7D+V,CAAoB3c,GAAY,CACnC,MAAQ4G,OAAQ8V,GAAiBtC,EAAAA,EAAAA,MACjCQ,EAAQ0B,EAAYrB,GAAWR,EAAWiC,EAG5C,MAAMf,EAAkBT,EAAWC,EAAY,GAAMR,EAASH,EAAU,GAClEoB,EAAkBX,EAAUG,EAAa,GAAMR,EAAQH,EAAW,GACxE,IAAIoB,EAAaV,EAAYX,EACzBsB,EAAaV,EAAaX,EAE9B,MAAMmC,EACJ,CAACjd,EAAAA,GAAAA,OAA0BA,EAAAA,GAAAA,iBAAmCY,SAASxB,KACnEgB,EAA2BC,EAAWoc,IAE1C,CAACzc,EAAAA,GAAAA,MAAyBA,EAAAA,GAAAA,gBAAkCY,SAASxB,KACjEgB,EAA2BC,EAAWoc,GAGxC,CACFzc,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAASxB,KACL8c,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMgB,EAAgB5d,SAAS6d,uBAAuB,SAAS,GAEzD9d,EAAQ6d,GAAiBhe,EAAYuZ,GAAiBgE,EAASrd,GAChE8d,GACHlc,EAAY3B,EAAO,CACjBgc,IAAM,GAAEJ,MACRhR,KAAO,GAAE+Q,MACThR,MAAQ,GAAE6Q,MACV5T,OAAS,GAAE6T,MACX1H,UAAY,eAAc4I,QAAqBC,iBAA8BC,MAAeC,OAIhGC,uBAAsB,KACpB,GAAIc,EAAe,CACjB,MAAM,IACJ7B,EADI,KAEJpR,EAFI,MAGJD,EAHI,OAIJ/C,GACEiW,EAAchT,wBAIlBlJ,EAAY3B,EAAO,CACjB+d,WAAY,OACZ/B,IAAM,GAAEJ,MACRhR,KAAO,GAAE+Q,MACTqC,gBAAiB,WACjBjK,UAAY,eAAcnJ,EAAO+Q,QAAaK,EAAMJ,iBARvCjR,EAAQ6Q,MACR5T,EAAS6T,KAQtB9Q,MAAQ,GAAE6Q,MACV5T,OAAS,GAAE6T,QAGfxb,SAASsK,KAAKpK,UAAUC,IAAI,mBACvByd,GAAe5d,SAASsK,KAAK7J,YAAYV,GAE9C+c,uBAAsB,KAChBc,IACFA,EAAc7b,MAAM+b,WAAa,IAGnC/d,EAAMgC,MAAM+R,UAAY,GAEpB6J,IACF5d,EAAMgC,MAAMic,QAAU,KAGxBxb,EAAWzC,EAAOD,GAElBsK,YAAW,KACT0S,uBAAsB,KAChB9c,SAASsK,KAAK0S,SAASjd,IACzBC,SAASsK,KAAK2S,YAAYld,GAE5BC,SAASsK,KAAKpK,UAAUqK,OAAO,wBAzLd,IA2LGsQ,EAAAA,UU0DxBoD,CAAexD,GAAaE,GAAoBH,SAAepU,MAEhE,CACD2R,GAAkB/R,EAAQlG,EAAQ2a,GAAYxY,EAASuY,GAAaE,GACpEvB,GAAewB,GAAmBjB,GAAY1U,MAGhDwC,EAAAA,EAAAA,KAAU,KACR,IAAI0W,EAUJ,OARIjZ,GACFkT,IAAkB,GAElB+F,EAAQlW,OAAOoC,YAAW,KACxB+N,IAAkB,KACjB5D,IAGE,KACD2J,GACFlW,OAAOqC,aAAa6T,MAGvB,CAACjZ,KAEJ,MAAMkZ,GAAY,KAChB/F,IAAY,GACZrH,GAAa,GACbuH,GAAY,CAAE7F,EAAG,EAAGC,EAAG,KAGnB0L,IAAmBxa,EAAAA,EAAAA,KAAY,KACnCwU,IAAanT,IACb8L,GAAc9L,GAAiB,EAAN,KACrBA,IACFqT,GAAY,CAAE7F,EAAG,EAAGC,EAAG,MAExB,CAACzN,KAEEoZ,IAAkBza,EAAAA,EAAAA,KAAY,CAAC0a,EAAeC,GAAe,KACjExN,GAAauN,GACC,IAAVA,GAAeC,GACjBJ,OAED,IAEGK,IAAQ5a,EAAAA,EAAAA,KAAY,KACxBH,IACA0a,OACC,CAAC1a,IAEEgb,IAAoB7a,EAAAA,EAAAA,KAAY,KACpC4a,KACA9a,EAAa,CAAEb,OAAAA,EAAQkS,SAAAA,EAAUjS,UAAAA,MAChC,CAAC0b,GAAO3b,EAAQkS,EAAUrR,EAAcZ,IAErC4b,IAAgB9a,EAAAA,EAAAA,KAAY,KAChCyS,EAAgB,CAAEsI,WAAY9b,EAAQwU,WAAY,CAACvU,KACnDqb,OACC,CAAC9H,EAAiBxT,EAAQC,KAE7B0E,EAAAA,EAAAA,KAAU,IAAOxB,GAAS4Y,EAAAA,EAAAA,IAAsB,KAC1C3Z,GACFkZ,KAEAK,aAECpY,GAAY,CAACoY,GAAOxY,EAAQf,MAEjCuC,EAAAA,EAAAA,KAAU,KACJxC,KAAYmH,KACd0S,EAAAA,EAAAA,QAED,CAAC1S,GAAOnH,MAGXwC,EAAAA,EAAAA,KAAU,KACR,GAAKxB,EAML,OAFAmV,EAAAA,EAAAA,iBAEO,KACLA,EAAAA,EAAAA,mBAED,CAACnV,IAEJ,MAAM8Y,IAAelb,EAAAA,EAAAA,KAAY,CAACmb,EAAgBC,KAChD,IAAIC,EAAQ5H,GAAWG,QAAQuH,GAK/B,QAJoB,IAAfC,GAAoBC,EAAQ,GAAqB,IAAdD,GAAmBC,EAAQ5H,GAAW9U,OAAS,KACrF0c,GAASD,GAGJ3H,GAAW4H,KACjB,CAAC5H,KAEE6H,IAAsBtb,EAAAA,EAAAA,KAAY,KAClC6T,IAIJrB,EAAgB,CACdvT,OAAAA,EACAkS,SAAAA,EACAjS,UAAWA,EAAYgc,GAAahc,GAAY,QAAKsD,EACrDtG,OAAAA,MAED,CAAC+C,EAAQkS,EAAU+J,GAAcrH,GAAS3U,EAAWsT,EAAiBtW,IAEnEqf,IAAkBvb,EAAAA,EAAAA,KAAY,KAC9B8T,IAIJtB,EAAgB,CACdvT,OAAAA,EACAkS,SAAAA,EACAjS,UAAWA,EAAYgc,GAAahc,EAAW,QAAKsD,EACpDtG,OAAAA,MAED,CAAC+C,EAAQkS,EAAU+J,GAAcpH,GAAQ5U,EAAWsT,EAAiBtW,KAExE0H,EAAAA,EAAAA,KAAU,KACR,MAAM4X,EAAiB/W,IACrB,OAAQA,EAAEjE,KACR,IAAK,OACL,IAAK,YACH8a,KACA,MAEF,IAAK,QACL,IAAK,aACHC,OAON,OAFAnf,SAASiI,iBAAiB,UAAWmX,GAAe,GAE7C,KACLpf,SAASkI,oBAAoB,UAAWkX,GAAe,QAK3D5X,EAAAA,EAAAA,KAAU,KACR,MAAM7F,EAAU3B,SAASY,cAA8B,sDACvD,IAAKe,EACH,OAGF,MAAM0d,EAAqBlT,KAAUS,EAAAA,GAErC,OAAOtB,EAAAA,EAAAA,GAAc3J,EAAS,CAE5B2d,wBAA0B,oEAAmED,EAAwC,GAAnB,kBAClHnb,QAAS,KACFe,IAAa0H,EAAAA,IAChB6R,MAGJe,QAAS5S,EAAAA,GAAe,CAACtE,EAAG2W,KACtBA,IAAcQ,EAAAA,EAAAA,MAChBN,KACSF,IAAcQ,EAAAA,EAAAA,KACvBL,KACW9W,EAAEiJ,QAAWjJ,EAAEiJ,OAAuBlQ,QAAQ,uBACzDod,MAGK,QACLpY,MAEL,CAACoY,GAAOxG,GAAgB7L,GAAOgL,GAASlS,GAAUka,GAAiBD,KAEtE,MAAMO,IAAY7b,EAAAA,EAAAA,KAAY,CAAC6O,EAAWC,KACxC4F,GAAY,CAAE7F,EAAAA,EAAGC,EAAAA,MAChB,IAEGgN,IAA+B9b,EAAAA,EAAAA,KAAY,KAC3C+I,EAAAA,KAAiBwK,IAAWhL,KAC9B8L,IAAmBD,MAEpB,CAACA,GAAgB7L,GAAOgL,KAErBtT,IAAOC,EAAAA,EAAAA,KAUb,SAAS6b,GAAYC,GACnB,GAAI7c,GACF,OACE,0BAAKqB,IAAKvB,EAAQoB,UAAU,wBACzBuQ,GACCwE,IAAoBD,IACpB8G,EAAAA,EAAAA,IAA+B9F,EAAAA,IAAwB,IACtDzT,EAAAA,KAA4BrB,KAI9B,GAAIhD,EAAS,CAClB,MAAM6Y,GAAYC,EAAAA,EAAAA,GAAkB9Y,GAC9B+Y,EAAY5N,QAAQ0N,GAE1B,OACE,0BACE1W,IAAKtB,EACLmB,UAAY,yBAAuB+W,EAAY,aAAe,IAC9D9W,QAASwb,IAERvI,IAAW3C,GACV0E,IAAgBF,IAAoBD,IAAkBJ,GACtD1W,IAAW4d,EAAAA,EAAAA,IAA+BnG,GAAasB,IACtD1U,EAAAA,KAA4BrB,IAE9BD,IACC,mBAAC,GAAD,CACEZ,IAAKtB,EACLoJ,IAAKgN,IAAgBF,GACrB7M,MAAOA,GACPC,WAAY+M,GACZ9M,WAAYpK,IAAW4d,EAAAA,EAAAA,IAA+BnG,GAAasB,GAAW,GAC9ExV,aAAcA,GACd6D,SAAUkQ,GACVjN,kBAAmBtG,EACnBuG,QAASqT,EACTpT,QAASgS,KAGZ1D,GACC,mBAAC,EAAD,CACE5T,KAAM4T,EACN5W,QAASua,GACTtX,SAAU6Q,MAAoBhT,IAAWmH,IACzC/E,WAAYpC,KAAYmH,OAUpC,SAAS2T,KACP,OAAO/c,GACL,mBAAC,EAAD,CACEqB,IAAKmR,EAAalU,GAClBwB,OAAQ0S,EAAalU,GACrB0B,UAAQ,IAGV,mBAAC,EAAD,CACEqB,IAAKtB,EACLD,OAAQA,EACRC,UAAWA,IAKjB,OA/EAid,EAAAA,EAAAA,IAAe/Z,EAAQvC,EAAkB2S,EAAiB,CACxDvT,OAAAA,EACAkS,SAAAA,EACAjS,UAAAA,EACAhD,OAAAA,EACAkV,cAAeO,GAAeA,EAAYlU,KA2E1C,mBAAC2e,EAAA,EAAD,CACE3e,GAAG,cACH4C,UAAWgB,GAAW,SAAW,GACjCe,OAAQA,IAEP,IACC,sCACE,0BAAK/B,UAAU,oBAAoBO,IAAKX,GAAKoc,MAAQ,WAAQ7Z,GAC1DE,EAAAA,IACC,mBAACL,EAAA,EAAD,CACEhC,UAAU,qBACViC,OAAK,EACL7B,KAAK,UACL8B,MAAM,oBACNE,UAAWxC,GAAK,SAChBK,QAASsa,IAET,wBAAGva,UAAU,gBAGjB,mBAACic,EAAA,EAAD,CAAYC,UAAWxI,GAAalN,QAAU2V,KAAMtI,IACjDgI,IAEH,mBAAC,EAAD,CACE/a,UAAWiU,IAAoBD,GAC/B/T,QAASA,GACTC,SAAUA,GACVhD,QAASA,EACTiD,SAAUA,GACVC,mBAAoBqZ,GACpBpZ,UAAWsZ,GACXrZ,aAAc+Y,GACdrb,SAAUA,MAGd,mBAAC,GAAD,CACE8O,QAASqG,GACTpG,OAAQ7M,GACR8M,UAAWsG,GAAS5F,EACpBT,UAAWqG,GAAS3F,EACpB5B,UAAWA,GACXmB,MAAOwN,IAEP,mBAACS,EAAA,EAAD,CACEjc,UAAU,kBACVkc,UAAW5I,GACX6I,KAAMvI,IAEL8H,MAGHlI,IACA,6BACEtG,KAAK,SACLlN,UAAY,mBAAkBe,KAAYmH,IAAS,WACnD,aAAYtI,GAAK,oBACjBW,IAAKX,GAAKoc,MAAQ,WAAQ7Z,EAC1BlC,QAASgb,MAGXxH,IACA,6BACEvG,KAAK,SACLlN,UAAY,mBAAkBe,KAAYmH,IAAS,WACnD,aAAYtI,GAAK,QACjBW,IAAKX,GAAKoc,MAAQ,WAAQ7Z,EAC1BlC,QAASib,KAGb,mBAAC,GAAD,CACE1O,QAASxL,GACTyL,aAAc2N,Y,6HCljB1B,MAwFA,IAAezZ,EAAAA,EAAAA,KAxFwB,EACrCoB,OAAAA,EACAqa,cAAAA,EACAC,cAAAA,EACAC,UAAAA,EACAC,OAAAA,EACAC,kBAAAA,EACAC,eAAAA,EACAlU,QAAAA,EACAmU,SAAAA,EACAC,mBAAAA,MAEA,MAAM/c,GAAOC,EAAAA,EAAAA,MACN+c,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBJ,EAAUL,EAAelT,QAAQoT,KAElFQ,EAAAA,GAAAA,GAAoBT,EAAWva,GAAQ,KAAQ0a,EAAe,OAG9D,MAAMO,GAAehX,EAAAA,EAAAA,IAAuB,MACtCiX,GAAqBtd,EAAAA,EAAAA,KAAayE,IACtCqY,EAAerY,EAAE+G,cAAc8B,SAC9B,CAACwP,IACEtB,GAAgB+B,EAAAA,GAAAA,GAA0BF,EAAcjb,GAASiZ,IACjE4B,GAAeA,EAAYte,OAAS,GACtCqe,EAAmBC,GAAuB,IAAX5B,EAAe,EAAIA,MAEnD,oBAAoB,GAEjBmC,EACJ,0BAAKnd,UAAU,eAAeO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACtD,mBAACH,EAAA,EAAD,CACEC,OAAK,EACLC,MAAM,cACN9B,KAAK,UACLgC,UAAWxC,EAAK,SAChBK,QAASsI,GAET,wBAAGvI,UAAU,gBAEf,mBAACod,GAAA,EAAD,CACEzV,IAAK2U,EACLrP,MAAOsP,EACPpP,SAAU8P,EACVI,UAAWlC,EACXmC,YAAad,KAKnB,OACE,mBAACe,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTvI,UAAU,mBACVwd,OAAQL,GAEPP,MAAAA,GAAAA,EAAate,OACZ,mBAACmf,GAAA,EAAD,CACEzd,UAAU,4BACV0d,MAAOd,EACPe,WAAYd,EACZe,gBAAiBzU,QAAQoT,GACzB5U,IAAKqV,EACLK,UAAWlC,GAEVyB,EAAYiB,KAAKzgB,GAChB,mBAAC0gB,GAAA,EAAD,CACE3d,IAAK/C,EACL4C,UAAU,4CACVC,QAAS,IAAM0c,EAAmBvf,KAEjC4B,EAAAA,EAAAA,IAAS5B,GACR,mBAAC2gB,GAAA,EAAD,CAAiBC,OAAQ5gB,IAAOgf,EAAgBxc,EAAK,0BAAuBuC,EAAW8b,OAAQ7gB,IAE/F,mBAAC8gB,GAAA,EAAD,CAAetf,OAAQxB,QAK7Bwf,IAAgBA,EAAYte,OAC9B,wBAAG0B,UAAU,cAAcJ,EAAK,+BAEhC,mBAACue,GAAA,EAAD,UCpBR,IAAexd,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEyf,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,GAJE,cAMJpC,GACEzd,EAEJ,MAAO,CACL2f,UAAAA,EACAG,UAAWD,EAAiBE,OAC5BC,cAAeJ,EAAQG,OACvBE,gBAAiBL,EAAQM,SACzBzC,cAAAA,MAGJ,CAAC/c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAAoB,kBAAmB,mBAnB3EZ,EAnE6C,EAC/D4f,UAAAA,EACAG,UAAAA,EACAE,cAAAA,EACAC,gBAAAA,EACAxC,cAAAA,EACAra,OAAAA,EACA+c,iBAAAA,EACAC,gBAAAA,EACAC,cAAAA,MAEA,MAAMpf,GAAOC,EAAAA,EAAAA,MACN0c,EAAQ0C,IAAa3b,EAAAA,EAAAA,IAAS,IAE/BgZ,GAAYtW,EAAAA,EAAAA,IAAyB,MAErCkZ,GAAUrd,EAAAA,EAAAA,KAAQ,KACtB,MAAM0c,EAAU,IACVI,GAAiB,MACjBC,GAAmB,IAGzB,IAAIO,EAAcV,GAAa,GAK/B,OAJIrC,IACF+C,GAAcC,EAAAA,EAAAA,IAAO,CAAChD,KAAkB+C,MAGnCE,EAAAA,EAAAA,IAAY,IACdd,EAAQhC,QAAQnf,IACjB,MAAMkD,EAAOge,EAAUlhB,GACvB,OAAKkD,MAIAgf,EAAAA,EAAAA,IAAiBhf,EAAMif,EAAAA,OAIvBhD,IAIEiD,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAa7f,EAAM0e,EAAUlhB,QAAK+E,EAAW/E,IAAOgf,GAAgBG,QAExF+B,OAAWnc,EAAWgd,KACxB,CAACR,EAAeC,EAAiBN,EAAWlC,EAAeG,EAAQ3c,EAAM6e,IAEtEiB,GAAmB/f,EAAAA,EAAAA,KAAase,IACpCa,EAAiB,CAAE1hB,GAAI6gB,MACtB,CAACa,IAEJ,OACE,mBAAC,GAAD,CACE1C,cAAeA,EACfra,OAAQA,EACRsa,cAAe6C,EACf5C,UAAWA,EACXE,kBAAmB5c,EAAK,aACxB2c,OAAQA,EACRE,eAAgBwC,EAChBvC,SAAUsC,EACVrC,mBAAoB+C,EACpBnX,QAASwW,Q,eCAf,SAASY,GAAeC,GACtB,OAAIA,EAAMC,WACD,mBAGJD,EAAME,YAIJ,uBAHE,WAMX,UAAenf,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,cACtC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,gBAAiB,8BAFrDZ,EAlF4B,EAAGqhB,QAAAA,EAASC,cAAAA,EAAeC,yBAAAA,MACzE,MAAMrgB,GAAOC,EAAAA,EAAAA,KAEb,GAAKkgB,EAAQzhB,OA4Db,OACE,0BAAKlB,GAAG,WACL2iB,EAAQlC,KAVSqC,IACpB,MAAI,SAAUA,EAjDMC,CAAAA,IACpB,MAAM,KACJC,EADI,MACEC,EADF,kBACSC,EADT,UAC4BC,GAC9BJ,EASEK,EACF5gB,EADqB2gB,EAChB,cACA,UADeD,EAAmB,KAGrCG,EAAuB7gB,EAAZ2gB,EAAiB,cAAsB,aAExD,OACE,mBAAChD,GAAA,EAAD,CACExb,QAAM,EACNwG,QAASyX,EACThgB,UAAU,QACVqgB,MAAOA,QAEgBle,IAAtBme,GAAmC,4BAAIE,GACxC,mBAACxe,EAAA,EAAD,CAAQ0e,QAAM,EAAC1gB,UAAU,wBAAwBC,QArB7B,KACtBggB,EAAyB,CACvBG,KAAAA,IAEFJ,MAiB8ES,GAC5E,mBAACze,EAAA,EAAD,CAAQ0e,QAAM,EAAC1gB,UAAU,wBAAwBC,QAAS+f,GAAgBpgB,EAAK,aAuB1E+gB,CAAaT,IAlBHN,EAqBAM,EAnBjB,mBAAC3C,GAAA,EAAD,CACExb,QAAM,EACNwG,QAASyX,EACThgB,UAAU,QACVqgB,MAAOV,GAAeC,IAErBA,EAAME,aAAcc,EAAAA,GAAAA,IAAqBhB,IAASpf,EAAAA,EAAAA,GAAWof,EAAM5hB,QAAU,CAAC,QAAS,OACxF,8BACE,mBAACgE,EAAA,EAAD,CAAQ0e,QAAM,EAACzgB,QAAS+f,GAAgBpgB,EAAK,UAVhCggB,IAAAA,U,eC5CvB,MAiBA,IAAejf,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,oBACtC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAFpCZ,EAjBkC,EAAGmiB,cAAAA,EAAeC,oBAAAA,MACtE,GAAKD,EAAcviB,OAInB,OACE,0BAAKlB,GAAG,iBACLyjB,EAAchD,KAAI,EAAG7f,QAAAA,EAAS+iB,QAAAA,KAC7B,mBAACC,GAAA,EAAD,CACEhjB,SAASwC,EAAAA,EAAAA,GAAWxC,EAAS,CAAC,QAAS,KAAM,QAAS,oBACtDijB,UAAW,IAAMH,EAAoB,CAAEC,QAAAA,a,qCCRjD,MA0BA,IAAepgB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,SAClByD,GACA,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAFpCZ,EA1BgC,EAAGuJ,IAAAA,EAAKiZ,oBAAAA,MAC1D,MAAMthB,GAAOC,EAAAA,EAAAA,KAEPshB,GAAaxhB,EAAAA,EAAAA,KAAY,KAC7BoE,OAAOqd,MAAKC,EAAAA,GAAAA,GAAepZ,IAC3BiZ,EAAoB,CAAEjZ,SAAK9F,MAC1B,CAAC+e,EAAqBjZ,IAEnBqZ,GAAgB3hB,EAAAA,EAAAA,KAAY,KAChCuhB,EAAoB,CAAEjZ,SAAK9F,MAC1B,CAAC+e,IAEEK,GAAeC,EAAAA,GAAAA,GAAiBvZ,GAEtC,OACE,mBAACwZ,GAAA,EAAD,CACE1f,OAAQoH,QAAQlB,GAChBM,QAAS+Y,EACTjB,MAAOzgB,EAAK,gBACZiX,WAAWrW,EAAAA,EAAAA,GAAWZ,EAAK,gBAAiB2hB,GAAe,CAAC,UAC5DG,aAAc9hB,EAAK,gBACnB+hB,eAAgBR,Q,cCXtB,MAAMS,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBA+RF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAIC,KAAKN,EAAMC,EAAOC,EAAK,EAAG,EAAG,EAAG,GAClDK,EAAeJ,GAAW,IAAIG,KAAKH,EAAQK,cAAeL,EAAQM,WAAYN,EAAQO,UAAW,EAAG,EAAG,EAAG,GAC1GC,EAAeP,GAAW,IAAIE,KAAKF,EAAQI,cAAeJ,EAAQK,WAAYL,EAAQM,UAAW,EAAG,EAAG,EAAG,GAEhH,SAAIC,GAAgBN,EAAcM,OAEvBJ,GAAgBF,EAAcE,GAO3C,SAASK,GAAgBzV,GACvB,OAAO0V,OAAO1V,GAAO2V,SAAS,EAAG,KAGnC,SAASC,GAAUf,EAAcC,EAAeC,GAC9C,MAAQ,GAAEF,KAAQC,EAAQ,KAAKC,IAcjC,UAAerhB,EAAAA,EAAAA,KA7TqB,EAClCmiB,WAAAA,EACAC,MAAAA,EACAC,aAAAA,EACAC,WAAAA,EACAlhB,OAAAA,EACAmhB,eAAAA,EACAC,kBAAAA,EACAC,kBAAAA,EACA7a,QAAAA,EACA8a,SAAAA,EACAC,oBAAAA,MAEA,MAAM1jB,GAAOC,EAAAA,EAAAA,KACP0jB,EAAM,IAAInB,KACVoB,GAAsB3hB,EAAAA,EAAAA,KAAQ,IAAOihB,EAAa,IAAIV,KAAKU,GAAc,IAAIV,MAAS,CAACU,IACvFZ,EAAUa,EAAQ,IAAIX,KAAKW,QAAS5gB,EACpCshB,GAAa9W,EAAAA,EAAAA,GAAY5K,IACxB2hB,EAAoBC,EAAwBC,IAA4BC,EAAAA,GAAAA,IAAQ,IAEhFC,EAAcC,IAAmBzgB,EAAAA,EAAAA,IAAekgB,IAChDQ,EAAqBC,IAA0B3gB,EAAAA,EAAAA,IACpD,IAAI8e,KAAK0B,EAAaxB,cAAewB,EAAavB,WAAY,KAEzD2B,EAAeC,IAAoB7gB,EAAAA,EAAAA,IACxCof,GAAgBc,EAAoBY,cAE/BC,EAAiBC,IAAsBhhB,EAAAA,EAAAA,IAC5Cof,GAAgBc,EAAoBe,eAGhCpC,EAAcU,GAAUiB,EAAaxB,cAAewB,EAAavB,WAAYuB,EAAatB,WAC1FgC,EAAcR,EAAoB1B,cAClCmC,EAAeT,EAAoBzB,YAEzChf,EAAAA,EAAAA,KAAU,MACHkgB,GAAc1hB,IACjBgiB,EAAgBP,GAChBS,EAAuB,IAAI7B,KAAKoB,EAAoBlB,cAAekB,EAAoBjB,WAAY,OAEpG,CAACiB,EAAqBzhB,EAAQ0hB,KAEjClgB,EAAAA,EAAAA,KAAU,KACJyf,IAAiBU,GAAsBI,EAAaY,UAAYlB,EAAoBkB,YACtFX,EAAgBP,GAChBW,EAAiBzB,GAAgBc,EAAoBY,aACrDE,EAAmB5B,GAAgBc,EAAoBe,kBAExD,CAACf,EAAqBE,EAAoBV,EAAcc,IAE3D,MAAMa,EAA0B1B,GAAcuB,GAAejB,EAAIjB,eAAiBmC,GAAgBlB,EAAIhB,YAChGL,GAAWsC,GAAetC,EAAQI,eAAiBmC,GAAgBvC,EAAQK,WAC3EqC,EAAyB5B,GAAgBwB,GAAejB,EAAIjB,eAAiBmC,GAAgBlB,EAAIhB,YAEjG,cAAEsC,EAAF,iBAAiBC,EAAjB,cAAmCC,IAAkBljB,EAAAA,EAAAA,KAAQ,IAsMrE,SAA2BigB,EAAcC,GACvC,MAAM8C,EAA0B,GAC1BC,EAA6B,GAC7BC,EAA0B,GAE1BrkB,EAAO,IAAI0hB,KACjB1hB,EAAKskB,QAAQ,GACbtkB,EAAKukB,SAASlD,GACdrhB,EAAKwkB,YAAYpD,GACjB,MAAMqD,EAAWzkB,EAAK0kB,SAChBC,EAAuB,IAAIjD,KAAKN,EAAMC,EAAO,GAAGS,UAEtD,IAAK,IAAI8C,EAAI,EAAGA,EAAIH,EAAUG,IAC5BT,EAAcU,KAAKF,EAAuBF,EAAWG,EAAI,GAG3D,KAAO5kB,EAAK6hB,aAAeR,GAAO,CAChC,MAAMyD,EAAW9kB,EAAK8hB,UACtBsC,EAAiBS,KAAKC,GACtB9kB,EAAKskB,QAAQQ,EAAW,GAG1B,MAAMC,GAAoBX,EAAiBxmB,OAASumB,EAAcvmB,QAAU,EAC5E,GAAImnB,EAAmB,EACrB,IAAK,IAAIH,EAAI,EAAGA,GAAK,EAAIG,EAAkBH,IACzCP,EAAcQ,KAAKD,GAIvB,MAAO,CAAET,cAAAA,EAAeC,iBAAAA,EAAkBC,cAAAA,GAlOxCW,CAAkBlB,EAAaC,IAC9B,CAACA,EAAcD,IAmCZmB,GAAoBhmB,EAAAA,EAAAA,KAAayE,IACrC,MAAM6I,EAAQ7I,EAAEiJ,OAAOJ,MAAM2Y,QAAQ,UAAW,IAChD,IAAK3Y,EAAM3O,OAGT,OAFA6lB,EAAiB,SACjB/f,EAAEiJ,OAAOJ,MAAQ,IAInB,MAAM4Y,EAAQljB,KAAKoE,IAAI,EAAGpE,KAAKqE,IAAIoG,OAAOH,GAAQ,KAE5CvM,EAAO,IAAI0hB,KAAK0B,EAAaY,WACnChkB,EAAKolB,SAASD,GACd9B,EAAgBrjB,GAEhB,MAAMqlB,EAAWrD,GAAgBmD,GACjC1B,EAAiB4B,GACjB3hB,EAAEiJ,OAAOJ,MAAQ8Y,IAChB,CAACjC,IAEEkC,GAAsBrmB,EAAAA,EAAAA,KAAayE,IACvC,MAAM6I,EAAQ7I,EAAEiJ,OAAOJ,MAAM2Y,QAAQ,UAAW,IAChD,IAAK3Y,EAAM3O,OAGT,OAFAgmB,EAAmB,SACnBlgB,EAAEiJ,OAAOJ,MAAQ,IAInB,MAAMgZ,EAAUtjB,KAAKoE,IAAI,EAAGpE,KAAKqE,IAAIoG,OAAOH,GAAQ,KAE9CvM,EAAO,IAAI0hB,KAAK0B,EAAaY,WACnChkB,EAAKwlB,WAAWD,GAChBlC,EAAgBrjB,GAEhB,MAAMylB,EAAazD,GAAgBuD,GACnC3B,EAAmB6B,GACnB/hB,EAAEiJ,OAAOJ,MAAQkZ,IAChB,CAACrC,IA4BJ,OACE,mBAACvG,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTvI,UAAU,iBAEV,0BAAKA,UAAU,aACb,0BAAKA,UAAU,kBACb,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAASsI,GAET,wBAAGvI,UAAU,gBAGf,6BACGJ,EAAM,YAAW6kB,EAAe,KAChC,IACAD,GAGH,mBAACxiB,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACN6K,SAAU6X,EACV3kB,QAAU2kB,OAA2CziB,EA7H/D,WACE8hB,GAAwBmC,IACtB,MAAMC,EAAW,IAAIjE,KAAKgE,GAG1B,OAFAC,EAASpB,SAASoB,EAAS9D,WAAa,GAEjC8D,OA0HD,wBAAGrmB,UAAU,mBAGf,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACN6K,SAAU4X,EACV1kB,QAAU0kB,OAA2CxiB,EA9H/D,WACE8hB,GAAwBmC,IACtB,MAAMC,EAAW,IAAIjE,KAAKgE,GAG1B,OAFAC,EAASpB,SAASoB,EAAS9D,WAAa,GAEjC8D,OA2HD,wBAAGrmB,UAAU,iBAKnB,0BAAKA,UAAU,oBACb,0BAAKA,UAAU,iBACZ4hB,GAAgB/D,KAAKmE,GACpB,0BAAKhiB,UAAU,4BACb,+BAAOJ,EAAKoiB,OAGf6C,EAAchH,KAAK2H,GAClB,0BAAKxlB,UAAU,uBAAsB,+BAAOwlB,MAE7CV,EAAiBjH,KAAK2H,GACrB,0BACEc,KAAK,SACLC,SAAU,EACVtmB,QAAS,KAAMumB,OA1ID9lB,EA0IkB8kB,OAzI1CzB,GAAiBqC,IACf,MAAMC,EAAW,IAAIjE,KAAKgE,GAK1B,OAJAC,EAASrB,QAAQtkB,GACjB2lB,EAASpB,SAASR,GAClB4B,EAASnB,YAAYV,GAEd6B,KAPX,IAA0B3lB,GA2IdV,WAAWmE,EAAAA,EAAAA,GACT,aACA0d,GACE2C,EAAaC,EAAce,EAAUxC,EAAeO,OAAMphB,EAAW8gB,EAAaM,EAAMrB,GAEtF,WACGsD,EAAW,YAAc,GAChCrD,IAAgBU,GAAU2B,EAAaC,EAAce,IAAa,eAGjEA,GACD,+BAAOA,MAIZT,EAAclH,KAAK2H,GAClB,0BAAKxlB,UAAU,uBAAsB,+BAAOwlB,QAKjDtC,GAzGD,0BAAKljB,UAAU,cACb,4BACEkN,KAAK,OACLlN,UAAU,eACVymB,UAAU,UACVxZ,MAAOiX,EACP/W,SAAUwY,EACVe,QAAS/C,EACTgD,OAAQ/C,IARZ,IAWE,4BACE1W,KAAK,OACLlN,UAAU,eACVymB,UAAU,UACVxZ,MAAOoX,EACPlX,SAAU6Y,EACVU,QAAS/C,EACTgD,OAAQ/C,KAyFZ,0BAAK5jB,UAAU,UACb,mBAACgC,EAAA,EAAD,CAAQ/B,QAxJd,WACEojB,EAASS,KAwJFZ,EAkEX,SAA2BtjB,EAAcc,GACvC,MAAMshB,GAAM4E,EAAAA,EAAAA,IAAmBlmB,EAAMd,EAAKinB,MAG1C,OAAI7E,KAFU4E,EAAAA,EAAAA,IAAmB,IAAIxE,KAAQxiB,EAAKinB,MAGzCjnB,EAAK,0CAA0CknB,EAAAA,EAAAA,IAAWpmB,EAAMd,IAGlEA,EAAK,sCAAuC,CAACoiB,GAAK8E,EAAAA,EAAAA,IAAWpmB,EAAMd,KA1EhDmnB,CAAkBnnB,EAAMkkB,GAAgBX,GAE3DC,GACC,mBAACphB,EAAA,EAAD,CAAQ/B,QAASqjB,EAAqB5C,QAAM,GACzC0C,QCjPb,IAAeziB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,CAAEmkB,WAAYnkB,EAAOqoB,8BAE9B,CAAC3nB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBAAwB,0BALRZ,EAtB+C,EACjEqD,OAAAA,EAAQ+gB,WAAAA,EAAYmE,qBAAAA,EAAsBC,qBAAAA,MAE1C,MAAMC,GAAmBxnB,EAAAA,EAAAA,KAAae,IACpCumB,EAAqB,CAAEG,UAAW1mB,EAAK2mB,UAAY,MACnDH,MACC,CAACA,EAAsBD,IAEpBrnB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC,GAAD,CACEkC,OAAQA,EACR+gB,WAAYA,EACZG,YAAU,EACVE,kBAAmBvjB,EAAK,cACxB2I,QAAS2e,EACT7D,SAAU8D,QC2EhB,IAAexmB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUX,QAAAA,EAASspB,WAAAA,MAClB,MAAM,SAAExW,IAAayW,EAAAA,EAAAA,IAAyB5oB,IAAW,IACnD,gBAAE6oB,GAAqB1W,IAAY2W,EAAAA,EAAAA,IAA4B9oB,EAAQX,EAAS8S,IAAc,GAC9FxQ,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQX,EAAQY,QAQxC,MAAO,CACL4oB,iBAAkBF,GAAcE,EAChCE,YATkBpnB,IAAQtB,EAAAA,EAAAA,IAASsB,EAAKlD,KACtCuqB,EAAAA,EAAAA,KAAuB1oB,EAAAA,EAAAA,IAAWN,GAAQipB,EAAAA,EAAAA,IAAqBtnB,UAC/D6B,EAQF0lB,6BANmCvnB,IAAQwnB,EAAAA,EAAAA,IAAiBxnB,KAAUknB,EAOtEO,iBANuBznB,IAAQ0nB,EAAAA,EAAAA,IAAiB1nB,OASpD,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,6BApBFZ,EAnEkD,EACpEqD,OAAAA,EACAulB,WAAAA,EACAtpB,QAAAA,EACAiqB,MAAAA,EACAT,gBAAAA,EACAE,YAAAA,EACAG,6BAAAA,EACAE,iBAAAA,EACAxf,QAAAA,EACA2f,eAAAA,EACAC,wBAAAA,MAEA,MAAMC,GAA4BzoB,EAAAA,EAAAA,KAAY,KAC5C,MAAMyT,EAAa6U,MAAAA,GAAAA,EAAOI,SACtBJ,EAAMI,SAASxK,KAAI,EAAGzgB,GAAAA,KAASA,IAC/B,CAACY,EAAQZ,IACb8qB,EAAe,CAAE9U,WAAAA,EAAYkV,oBAAoB,IACjD/f,MACC,CAAC2f,EAAgBlqB,EAAQZ,GAAImL,EAAS0f,IAEnCM,GAA6B5oB,EAAAA,EAAAA,KAAY,KAC7C,MAAMyT,EAAa6U,MAAAA,GAAAA,EAAOI,SACtBJ,EAAMI,SAASxK,KAAI,EAAGzgB,GAAAA,KAASA,IAC/B,CAACY,EAAQZ,IACTkqB,EACFa,EAAwB,CAAE/U,WAAAA,IAE1B8U,EAAe,CACb9U,WAAAA,EACAkV,oBAAoB,IAGxB/f,MACC,CAAC0f,EAAOjqB,EAAQZ,GAAIkqB,EAAY/e,EAAS4f,EAAyBD,IAE/DtoB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC0d,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTigB,QAASzmB,IAAWylB,EAAkBe,OAA6BpmB,EACnEnC,UAAU,SACVqgB,MAAOzgB,EAAK,8BAEZ,4BAAIA,EAAK,kCACRioB,GACC,4BAAIjoB,EAAK,8BAA+B,EAAG,MAE5CmoB,GACC,4BAAInoB,EAAK,+BAAgC,EAAG,MAE7C4nB,GACC,mBAACxlB,EAAA,EAAD,CAAQE,MAAM,SAASlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASmoB,GACtEV,IAAelnB,EAAAA,EAAAA,GAAWZ,EAAK,iCAAkC8nB,KAChEA,GAAe9nB,EAAK,2CAG1B,mBAACoC,EAAA,EAAD,CAAQE,MAAM,SAASlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsoB,GACtE3oB,EAAK4nB,EAAkB,gCAAkC,WAE5D,mBAACxlB,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,gBCJ/E,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM6pB,GAAgBzpB,EAAAA,EAAAA,IAASJ,GACzB8pB,GAAiBC,EAAAA,EAAAA,IAAqBhqB,EAAQC,GAC9C0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1B2hB,IAAcjgB,IAAQsoB,EAAAA,EAAAA,IAActoB,GACpCuoB,IAAYvoB,IAAQwnB,EAAAA,EAAAA,IAAiBxnB,GACrCwoB,IAAiBxoB,IAAQ0nB,EAAAA,EAAAA,IAAiB1nB,GAMhD,MAAO,CACLmoB,cAAAA,EACAC,eAAAA,EACAnI,UAAAA,EACAsI,QAAAA,EACAC,aAAAA,EACAC,aAXoBN,IAAkBC,GAAmBI,GAAgBD,EAYzEnB,YAXkBpnB,IAAQtB,EAAAA,EAAAA,IAASsB,EAAKlD,KACtCuqB,EAAAA,EAAAA,KAAuB1oB,EAAAA,EAAAA,IAAWN,GAAQipB,EAAAA,EAAAA,IAAqBtnB,UAC/D6B,MAYN,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,gBAvBpCZ,EA/D+C,EACjEqD,OAAAA,EACAlD,UAAAA,EACAD,OAAAA,EACA2hB,UAAAA,EACAsI,QAAAA,EACAC,aAAAA,EACAC,aAAAA,EACArB,YAAAA,EACAnf,QAAAA,EACAygB,WAAAA,MAEA,MAAMC,GAAyBtpB,EAAAA,EAAAA,KAAY,KACzCqpB,EAAW,CACTpqB,OAAAA,EAAQC,UAAAA,EAAWqqB,SAAS,IAE9B3gB,MACC,CAACygB,EAAYpqB,EAAQC,EAAW0J,IAE7B4gB,GAAmBxpB,EAAAA,EAAAA,KAAY,KACnCqpB,EAAW,CACTpqB,OAAAA,EAAQC,UAAAA,EAAWqqB,SAAS,EAAOE,WAAW,EAAMC,UAAU,IAEhE9gB,MACC,CAAC3J,EAAQC,EAAW0J,EAASygB,IAE1BppB,GAAOC,EAAAA,EAAAA,KAcb,OACE,mBAAC0d,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTvI,UAAU,MACVqgB,MAAOzgB,EAAK,yBAEZ,4BAjBOA,EADL2gB,EACU,yBAGVsI,GAAWC,EACD,kBAGF,wBAWV,mBAAC9mB,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASkpB,GACvDvpB,EAAK,cAEPmpB,GACC,mBAAC/mB,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASgpB,GACvDvB,GACGlnB,EAAAA,EAAAA,GAAWZ,EAAK,8BAA+B8nB,IAC/C9nB,EAAK,qDAGb,mBAACoC,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,gBC3D/E,IAAee,EAAAA,EAAAA,KAxB6B,EAC1CoB,OAAAA,EACAunB,oBAAAA,EAAsB,EACtB/gB,QAAAA,EACAghB,QAAAA,MAEA,MAAM3pB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC0d,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTvI,UAAU,YACVqgB,MAAOzgB,EAAK,+BAEZ,4BAAIA,EAAK,oCAAqC0pB,EAAqB,MACnE,mBAACtnB,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASspB,GACvD3pB,EAAK,gBAER,mBAACoC,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,e,cCK/E,MAyEA,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAU2oB,WAAAA,MACT,MAAQlU,WAAYoW,GAAuB7qB,EAAO8qB,kBAAoB,IAChE,gBAAEjC,IAAoBkC,EAAAA,EAAAA,IAAgC/qB,GACtD2B,GAAOqpB,EAAAA,EAAAA,IAAkBhrB,GAQ/B,MAAO,CACL6qB,mBAAAA,EACAhC,iBAAkBF,GAAcE,EAChCE,YAVkBpnB,IAAQtB,EAAAA,EAAAA,IAASsB,EAAKlD,KACtCuqB,EAAAA,EAAAA,KAAuB1oB,EAAAA,EAAAA,IAAWN,GAAQipB,EAAAA,EAAAA,IAAqBtnB,UAC/D6B,EASF0lB,6BAPmCvnB,IAAQwnB,EAAAA,EAAAA,IAAiBxnB,KAAUknB,EAQtEO,iBAPuBznB,IAAQ0nB,EAAAA,EAAAA,IAAiB1nB,OAUpD,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBACA,0BACA,2BAvBgBZ,EAzE0D,EAC5EqD,OAAAA,EACAulB,WAAAA,EACAkC,mBAAAA,EACAhC,gBAAAA,EACAE,YAAAA,EACAG,6BAAAA,EACAE,iBAAAA,EACAxf,QAAAA,EACA2f,eAAAA,EACAC,wBAAAA,EACAyB,sBAAAA,MAEA,MAAMnG,GAAa9W,EAAAA,EAAAA,GAAY5K,GAEzBqmB,GAA4BzoB,EAAAA,EAAAA,KAAY,KAC5C4I,IACA2f,EAAe,CAAE9U,WAAYoW,EAAoBlB,oBAAoB,MACpE,CAACJ,EAAgBsB,EAAoBjhB,IAElCggB,GAA6B5oB,EAAAA,EAAAA,KAAY,KACzC2nB,EACFa,EAAwB,CAAE/U,WAAYoW,IAEtCtB,EAAe,CAAE9U,WAAYoW,EAAoBlB,oBAAoB,IAGvE/f,MACC,CAAC+e,EAAY/e,EAAS4f,EAAyBqB,EAAoBtB,IAEhEtoB,GAAOC,EAAAA,EAAAA,KASb,IANA0D,EAAAA,EAAAA,KAAU,MACHxB,GAAU0hB,GACbmG,MAED,CAACA,EAAuB7nB,EAAQ0hB,IAE9B+F,EAIL,OACE,mBAACjM,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTigB,QAAShB,OAAkBrlB,EAAYomB,EACvCvoB,UAAU,SACVqgB,MAAOzgB,EAAK,oCAEZ,4BAAIA,EAAK,gCACRioB,GACC,2GAEDE,GACC,gFAEDP,GACC,mBAACxlB,EAAA,EAAD,CAAQE,MAAM,SAASlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASmoB,GACtEV,GACGlnB,EAAAA,EAAAA,GAAWZ,EAAK,6BAA8B8nB,IAC9C9nB,EAAK,2CAGb,mBAACoC,EAAA,EAAD,CAAQE,MAAM,SAASlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsoB,GACtE3oB,EAAK4nB,EAAkB,gCAAkC,WAE5D,mBAACxlB,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,gB,eChF/E,MAkEA,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,SAClByD,GAAW,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAC9D,iBAAkB,2BAFFZ,EAlEqC,EACvDqD,OAAAA,EACAqR,WAAAA,EACAyW,eAAAA,EACAD,sBAAAA,EACArhB,QAAAA,MAEA,MAAOuhB,EAAgBC,IAAqBzmB,EAAAA,EAAAA,IAA0B,SAC/D0mB,EAAaC,IAAkB3mB,EAAAA,EAAAA,IAAS,IAEzC4mB,EAAe,KACnBL,EAAe,CAAEzW,WAAAA,EAAY+W,OAAQL,EAAgBE,YAAAA,IACrDJ,IACArhB,KAGI6hB,GAAqBzqB,EAAAA,EAAAA,KAAasN,IACtC8c,EAAkB9c,KACjB,IAEGod,GAA0B1qB,EAAAA,EAAAA,KAAayE,IAC3C6lB,EAAe7lB,EAAEiJ,OAAOJ,SACvB,IAEGrN,GAAOC,EAAAA,EAAAA,KAEPyqB,EAA8D,CAClE,CAAErd,MAAO,OAAQsd,MAAO3qB,EAAK,2BAC7B,CAAEqN,MAAO,WAAYsd,MAAO3qB,EAAK,+BACjC,CAAEqN,MAAO,cAAesd,MAAO3qB,EAAK,kCACpC,CAAEqN,MAAO,aAAcsd,MAAO3qB,EAAK,kCACnC,CAAEqN,MAAO,YAAasd,MAAO3qB,EAAK,+BAClC,CAAEqN,MAAO,QAASsd,MAAO3qB,EAAK,6BAGhC,GAAKwT,EAIL,OACE,mBAACmK,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTigB,QAASzmB,EAASmoB,OAAe/nB,EACjCnC,UAAU,SACVqgB,MAAOzgB,EAAK,6BAEZ,mBAAC4qB,GAAA,EAAD,CACErO,KAAK,iBACLsO,QAASH,EACTnd,SAAUid,EACVM,SAAUZ,IAEZ,mBAAC1M,GAAA,EAAD,CACEmN,MAAO3qB,EAAK,iCACZqN,MAAO+c,EACP7c,SAAUkd,IAEZ,mBAACroB,EAAA,EAAD,CAAQE,MAAM,SAASlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASiqB,GACtEtqB,EAAK,sBAER,mBAACoC,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,gBCoE/E,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQuO,KAAMyd,IAAoBpD,EAAAA,EAAAA,IAAyB5oB,IAAW,IAChE,UAAEisB,IAAclB,EAAAA,EAAAA,IAAgC/qB,GAChDksB,GAAYC,EAAAA,EAAAA,IAAgCnsB,GAC5CosB,GAAcC,EAAAA,EAAAA,IAAkCrsB,IAC9CyU,WAAYoW,GAAuB7qB,EAAO8qB,kBAAoB,GAEtE,MAAO,CACLnC,WAAgC,cAApBqD,EACZM,uBAAuBC,EAAAA,EAAAA,IAA4BvsB,GACnDwsB,kBAAmBP,EACnBQ,kBAAmBP,EACnBQ,oBAAqBN,EACrBvB,mBAAAA,MAGJ,CAACnqB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,wBAAyB,qCAAsC,8BAlB/CZ,EA7GoD,EACtE4sB,QAAAA,EACA3P,SAAAA,EACAgP,gBAAAA,EACArD,WAAAA,EACA2D,sBAAAA,EACAE,kBAAAA,EACAC,kBAAAA,EACAC,oBAAAA,EACA7B,mBAAAA,EACAI,sBAAAA,EACA2B,mCAAAA,EACAC,yBAAAA,MAEA,MAAOC,EAAmBC,EAAiBC,IAAoB9H,EAAAA,GAAAA,MACxD+H,EAAmBC,EAAiBC,IAAoBjI,EAAAA,GAAAA,MAE/DtgB,EAAAA,EAAAA,KAAU,KACDoY,GAAa8P,GAAsBG,OAMtCzpB,GALA4pB,EAAAA,GAAAA,GAAyB,CACzBC,YAAaN,EACbO,SAAUP,EACVQ,MAAOtC,KAGV,CAACjO,EAAU8P,EAAmBG,EAAmBF,EAAiB9B,IAErE,MAAMuC,GAAiBxsB,EAAAA,EAAAA,KAAY,KACjC6rB,IACA5B,MACC,CAAC4B,EAA0B5B,IAExBwC,GAA4Bzf,EAAAA,EAAAA,GAAYse,QAAyB9oB,GAAW,GAC5EkqB,EAAiC1Q,EAAWsP,EAAwBmB,EAEpExsB,GAAOC,EAAAA,EAAAA,KAEPysB,EAAyB1sB,EAAK,kCAAmCysB,EAAgC,KAEjGrsB,GAAYmE,EAAAA,EAAAA,GAChB,uBACAmnB,GAAW,gBACX3P,GAAY,SAGR4Q,EAAe,CACnB7pB,EAAc6nB,EAAetqB,EAA4B8M,EAAoByf,IAG3E,0BACElG,KAAK,SACLC,SAAU,EACVvmB,WAAWmE,EAAAA,EAAAA,GACT,OACA4I,GAAY,WACZyf,GAAe,eAEjBvsB,QAAU8M,OAAqB5K,EAAVlC,EACrBogB,MAAOkK,GAEP,wBAAGvqB,UAAY,QAAO0C,OAK5B,OACE,0BAAK1C,UAAWA,GACd,0BAAKA,UAAU,8BACb,mBAACgC,EAAA,EAAD,CACEE,MAAM,cACND,OAAK,EACLhC,QAAS2pB,EACTxnB,UAAU,oBAEV,wBAAGpC,UAAU,gBAEf,2BAAMA,UAAU,6BAA6BqgB,MAAOiM,GACjDA,KAGArB,GACD,0BAAKjrB,UAAU,gCACQ,cAApB2qB,GACC4B,EAAa,UAAW3sB,EAAK,4BAA6B2rB,GAE3DH,GACCmB,EAAa,OAAQ3sB,EAAK,+BAAgCisB,GAE3DR,GACCkB,EAAa,WAAY3sB,EAAK,sBAAuBusB,GAEtDI,EAAa,SAAU3sB,EAAK,gCAAiC8rB,GAAkBP,GAAmB,KAIzG,mBAAC,GAAD,CACEppB,OAAQ0pB,EACRnE,WAAYA,EACZ/e,QAASojB,IAEX,mBAAC,GAAD,CACE5pB,OAAQ6pB,EACRrjB,QAASujB,EACT1Y,WAAYoW,S,oCCpJpB,SACEiD,IAGA,MAAMC,GAAY1mB,EAAAA,EAAAA,IAAuB,MAEnCmV,GAAgBxb,EAAAA,EAAAA,KAAayE,IACnB,UAAVA,EAAEjE,KACYusB,EAAUlmB,UAAYzK,SAAS4wB,eAG/CF,MAED,CAACA,IAQJ,OANAlpB,EAAAA,EAAAA,KAAU,KACRQ,OAAOC,iBAAiB,UAAWmX,GAAe,GAE3C,IAAMpX,OAAOE,oBAAoB,UAAWkX,KAClD,CAACA,IAEGuR,G,wBCWT,MAyDA,IAAe/rB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1BguB,EAAoBtsB,IAAQsnB,EAAAA,EAAAA,IAAqBtnB,GAOvD,MAAO,CACLA,KAAAA,EACAusB,gBARsBD,GAAoB3tB,EAAAA,EAAAA,IAAWN,EAAQiuB,QAAqBzqB,EASlF2qB,UAReC,EAAAA,EAAAA,IAAmBpuB,EAAQC,GAS1CouB,QARc1sB,GACZ2sB,EAAAA,EAAAA,IAAkB3sB,GAAM4sB,EAAAA,EAAAA,IAAqBvuB,IAASwuB,EAAAA,EAAAA,IAAuBxuB,SAC7EwD,KARYzD,EAzDoC,EACtDE,OAAAA,EACA0B,KAAAA,EACAusB,gBAAAA,EACAC,SAAAA,EACAE,QAAAA,EACAI,aAAAA,EACAntB,QAAAA,MAEA,MAAOwrB,EAAmBC,EAAiBC,IAAoB9H,EAAAA,GAAAA,MACxDwJ,EAAuBC,EAAqBC,IAAwB1J,EAAAA,GAAAA,KAErE2J,GAAiBC,EAAAA,GAAAA,GAAsB,CAC3CntB,KAAAA,EACAusB,gBAAAA,EACAC,SAAAA,EACAE,QAAAA,EACAU,aAAchC,EACdiC,uBAAwBL,IACvB,GAEGM,EAAc,KAClB3tB,EAAQrB,IAGJ8tB,EAAYmB,GAAmBD,GAErC,GAAKttB,EAIL,OACE,mBAACwd,GAAA,EAAD,CACE9d,UAAU,oCACVC,QAAS2tB,EACTJ,eAAgBA,EAChBd,UAAWA,IAEV1tB,EAAAA,EAAAA,IAASJ,GACR,mBAACmf,GAAA,EAAD,CAAiBE,OAAQrf,EAAQwuB,aAAcA,EAAcU,WAAW,UAExE,mBAAC5P,GAAA,EAAD,CAAetf,OAAQA,EAAQwuB,aAAcA,EAAcU,WAAW,UAExE,mBAACC,GAAA,EAAD,CACEhsB,OAAQ0pB,EACRljB,QAASojB,EACTrrB,KAAMA,IAER,mBAAC,KAAD,CACEyB,OAAQsrB,EACR9kB,QAASglB,EACT3uB,OAAQA,S,eClDhB,MAGMovB,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAO,GA0EnD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQuvB,QAASC,GAAexvB,EAAOyvB,SACjCC,EAAY1vB,EAAO2vB,MAAMjQ,MACzB,qBAAEkQ,GAAyB5vB,EAAO6vB,aAExC,MAAO,CACLL,WAAAA,EACAE,UAAAA,EACAE,qBAAAA,MAGJ,CAAClvB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,eACA,kBACA,WACA,yBACA,6BAjBgBZ,EAxE8C,EAChEyvB,WAAAA,EAAYE,UAAAA,EAAWE,qBAAAA,EACvBE,QAAAA,EAASC,aAAAA,EAAcC,gBAAAA,EAAiBC,SAAAA,EACxCC,uBAAAA,EAAwBC,wBAAAA,MAGxB,MAAMC,GAAc/oB,EAAAA,EAAAA,IAAuB,OAI3CzC,EAAAA,EAAAA,KAAU,KACRyqB,IAAa,KACXU,IAEAC,SAED,CAACD,EAAcC,KAElBK,EAAAA,GAAAA,GAAoBD,EAAYvoB,SAAU2nB,GAE1C,MAAMP,GAAcjuB,EAAAA,EAAAA,KAAavC,IAC/BwxB,EAAS,CAAExxB,GAAAA,EAAI6xB,sBAAsB,IACrCR,IACAtoB,YAAW,KACT0oB,EAAuB,CAAEzxB,GAAAA,MA7BC,OA+B3B,CAACwxB,EAAUC,EAAwBJ,IAEhC7uB,GAAOC,EAAAA,EAAAA,KAEb,OACE,0BAAKG,UAAU,gCACZmuB,GACC,0BAAKnuB,UAAU,oBAAoBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC3D,0BAAKwF,IAAKonB,EAAa/uB,UAAU,0BAC9BmuB,EAAWtQ,KAAKI,GACf,0BAAKje,UAAU,gBAAgBC,QAAS,IAAM2tB,EAAY3P,GAAS1d,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC3F,mBAACjC,EAAA,EAAD,CAAQG,KAAMguB,EAAUpQ,KACxB,0BAAKje,UAAU,kBAAiBQ,EAAAA,EAAAA,IAAWmnB,EAAAA,EAAAA,IAAuB0G,EAAUpQ,KA1C/E,WAgDNsQ,GACC,0BAAKvuB,UAAU,uBACb,yBAAIA,UAAU,2CAA2CO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChFvC,EAAK,UAEN,mBAACoC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNE,UAAU,qBACVnC,QAAS6uB,EACT9S,MAAOpc,EAAKoc,OAEZ,wBAAGhc,UAAU,iBAGhBuuB,EAAqB1Q,KAAKzgB,GACzB,mBAAC,GAAD,CACEwB,OAAQxB,EACR6C,QAAS2tB,Y,0BCyBvB,UAAejtB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAChC,IAAK0B,EACH,MAAO,GAGT,MAAMssB,GAAoBhF,EAAAA,EAAAA,IAAqBtnB,GAE/C,MAAO,CACLA,KAAAA,EACA4uB,aAAcvwB,EAAOuwB,gBACjBtC,GAAqB,CAAEC,iBAAiB5tB,EAAAA,EAAAA,IAAWN,EAAQiuB,QAGnE,CAACvtB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAhBgBZ,EA9E2C,EAC7DV,QAAAA,EACAmxB,YAAAA,EACAvwB,OAAAA,EACA0B,KAAAA,EACAusB,gBAAAA,EACAptB,aAAAA,EACAyvB,aAAAA,MAEA,MAAME,GAAiB/Z,EAAAA,EAAAA,IAA4BrX,GAC7CqxB,GAAe1a,EAAAA,EAAAA,IAASjT,EAAAA,EAAAA,IAAoB1D,EAAS,UACrDsxB,EAAenmB,SAAQomB,EAAAA,EAAAA,IAAqBvxB,IAE5C4vB,GAAcjuB,EAAAA,EAAAA,KAAY,KAC9BF,EAAa,CAAEb,OAAAA,EAAQC,UAAWb,EAAQZ,OACzC,CAACwB,EAAQa,EAAczB,EAAQZ,KAE5BwC,GAAOC,EAAAA,EAAAA,KAEP6sB,EAAYmB,GAAmBD,GAErC,GAAKttB,EAIL,OACE,mBAACwd,GAAA,EAAD,CACE9d,UAAU,kCACV6H,QAASxF,EAAAA,GACTpC,QAAS2tB,EACTlB,UAAWA,GAEX,mBAACxsB,EAAA,EAAD,CACEI,KAAMA,EACND,KAAMwsB,EACN2C,kBAAgB,EAChBC,gBAAiB5C,MAAAA,OAAF,EAAEA,EAAiB6C,OAClCR,aAAcA,IAEhB,0BAAKlvB,UAAU,QACb,0BAAKA,UAAU,YACb,0BAAKA,UAAU,SACb,yBAAIO,IAAI,SAAQC,EAAAA,EAAAA,IAAWif,EAAAA,EAAAA,GAAa7f,EAAMU,EAAMusB,KACnDvsB,EAAKqvB,YAAc,mBAACC,GAAA,EAAD,OAEtB,0BAAK5vB,UAAU,gBACb,mBAAC6vB,GAAA,EAAD,CAAM7vB,UAAU,SACb8vB,EAAAA,EAAAA,IAAoBlwB,EAAqB,IAAf5B,EAAQ0C,SAKzC,0BAAKV,UAAU,YACb,0BAAKA,UAAU,UAAUO,IAAI,QASvC,SACEX,EAAc5B,EAAqBwS,EAAkB2e,EAAsBG,GAE3E,OAAK9e,EAKH,2BAAMxQ,UAAU,iBACd,0BAAK3D,IAAKmU,EAASG,IAAI,GAAG3Q,UAAWsvB,EAAe,aAAUntB,KAC7DsQ,EAAAA,EAAAA,IAAgBzU,IAAY,wBAAGgC,UAAU,eACzCQ,EAAAA,EAAAA,IAAWuvB,EAAAA,EAAAA,IAAsBnwB,EAAM5B,GAAS,GAAO,CAAC,QAAS,aAAc,CAAEgyB,UAAWb,MAPxF3uB,EAAAA,EAAAA,IAAWuvB,EAAAA,EAAAA,IAAsBnwB,EAAM5B,IAZrCiyB,CAAqBrwB,EAAM5B,EAASqxB,GAAgBD,EAAgBD,EAAaG,WChD9F,IAAe3uB,EAAAA,EAAAA,KA5CmB,EAChCuvB,WAAAA,EAAYzD,SAAAA,MAEZ,MAAM0D,GAActuB,EAAAA,EAAAA,KAAQ,IAmB9B,SAAgCquB,GAE9B,GADgBA,EAAWE,MAAM,0BACpB,CACX,MAAM1vB,EAAO,IAAI0hB,KAAK8N,GACtB,MAAO,CAAC,CAAExvB,KAAAA,EAAMuC,MAAM2jB,EAAAA,EAAAA,IAAmBlmB,KAG3C,MAAM2vB,EAAa,GACbC,EAAc,IAAIlO,KAClBoC,EAAc8L,EAAYhO,cAC1BiO,EAAaD,EAAY5L,UAAa,IAAItC,KAAM,GAAEoC,KAAe0L,KAAexL,UAClFF,EACAA,EAAc,EAElB,IAAK,IAAIc,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAM5kB,EAAO,IAAI0hB,KAAM,GAAEmO,EAAajL,KAAK4K,KAC3CG,EAAW9K,KAAK,CAAE7kB,KAAAA,EAAMuC,MAAM2jB,EAAAA,EAAAA,IAAmBlmB,KAGnD,OAAO2vB,EAtC2BG,CAAuBN,IAAa,CAACA,IACvE,OACE,8BAASlwB,UAAU,6CAChBmwB,EAAYtS,KAAI,EAAGnd,KAAAA,EAAMuC,KAAAA,KAEtB,0BACEhD,QAAS,IAAMwsB,EAAS/rB,GACxBV,UAAU,YACVG,IAAK8C,GAEL,wBAAGjD,UAAU,kBACb,+BAAOiD,U,0BC2BnB,MAGM+qB,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAK,GA6NjD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MAAQ0f,KAAMC,GAAc3f,EAAOyf,OAC3BC,KAAMgQ,GAAc1vB,EAAO2vB,OAE3BJ,QAASuC,GAAoB9xB,EAAO+xB,aAAe,GAE3D,IAAKD,EACH,MAAO,CACLnS,UAAAA,EACA+P,UAAAA,GAIJ,MAAM,cACJjS,EADI,SACWiM,EADX,aACqB6G,GACvBvwB,GACE,eACJgyB,EADI,cACYC,EADZ,aAC2BC,EAD3B,cACyC5e,GAC3CtT,EAAO6vB,cACHtP,QAAS4R,EAAe5C,QAAS6C,GAAkBH,GAAiB,IACpE1R,QAAS8R,EAAc9C,QAAS+C,GAAiBJ,GAAgB,IACjEK,SAAUC,GAA2B9I,EAG7C,MAAO,CACLjM,cAAAA,EACAqU,gBAAAA,EACAO,aAAAA,EACAC,aAAAA,EACAH,cAAAA,EACAC,cAAAA,EACA/e,SATeC,MAAAA,GAAH,UAAGA,EAAehP,YAAlB,aAAG,EAAqB+O,SAUpCmf,uBAAAA,EACA7S,UAAAA,EACA+P,UAAAA,EACAsC,eAAAA,EACAzB,aAAAA,MAGJ,CAAC7vB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,WACA,yBACA,uBACA,2BA5CgBZ,EA3N2C,EAC7DywB,YAAAA,EAAae,WAAAA,EAAYkB,gBAAAA,EAAiBhV,cAAAA,EAC1CqU,gBAAAA,EAAiBO,aAAAA,EAAcC,aAAAA,EAAcH,cAAAA,EAAeC,cAAAA,EAC5D/e,SAAAA,EAAUmf,uBAAAA,EAAwB7S,UAAAA,EAAW+P,UAAAA,EAAWsC,eAAAA,EAAgBzB,aAAAA,EACxET,QAAAA,EAAS4C,mBAAAA,EAAoBzC,SAAAA,EAAUC,uBAAAA,EAAwByC,qBAAAA,EAAsBC,sBAAAA,MAErF,MAAM3xB,GAAOC,EAAAA,EAAAA,MAEN2xB,EAAqBC,IAA0BnuB,EAAAA,EAAAA,KAAkB,IACjEouB,EAAsBC,IAA2BruB,EAAAA,EAAAA,KAAkB,GAEpEsuB,GAAiBjyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCmU,GAAgBnU,IAAc8W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBpkB,KAAM,OACN4kB,MAAO3C,SAIZ,CAACD,EAAcoC,EAAsBnC,IAElC4C,GAAkBpyB,EAAAA,EAAAA,KACrBvC,IACCwxB,EAAS,CAAExxB,GAAAA,EAAI6xB,sBAAsB,IAEjC7xB,IAAOgf,GACTyS,EAAuB,CAAEzxB,GAAAA,IAGtBiF,EAAAA,IACHosB,MAGJ,CAACrS,EAAewS,EAAUC,EAAwBJ,IAG9CuD,GAAwBryB,EAAAA,EAAAA,KAAavC,IACzCm0B,EAAsB,CAAEn0B,GAAAA,MACvB,CAACm0B,IAEEV,GAAehvB,EAAAA,EAAAA,KAAQ,KAC3B,IAAKstB,GAAgBA,EAAY8C,WAAW,MAAQ9C,EAAY7wB,OAAS,EACvE,OAAO4zB,GAAAA,EAGT,MAAMC,EAAkB1B,EACpBA,EAAgBlU,QAAQnf,IACxB,MAAMiD,EAAOguB,EAAUjxB,GACvB,IAAKiD,EACH,OAAO,EAGT,MAAM+xB,GAAWC,EAAAA,EAAAA,IAAgBhyB,GACjC,OAAQ+xB,IAAY5S,EAAAA,GAAAA,GAAY4S,EAAUjD,KAAiB3P,EAAAA,GAAAA,GAAYnf,EAAKiyB,SAAUnD,MAEtF,GAEJ,MAAO,IACD/S,IAAiBoD,EAAAA,GAAAA,GAAY5f,EAAK,iBAAkBuvB,GAAe,CAAC/S,GAAiB,OACtFiD,EAAAA,EAAAA,KAAYD,EAAAA,EAAAA,IAAO,IACjB+S,KACCnB,GAAgB,MAChBC,GAAgB,KAClB3S,MAEL,CACD6Q,EAAasB,EAAiBrU,EAAexc,EAAMoxB,EAAcC,EAAc3S,EAAW+P,IAGtFuC,GAAgB/uB,EAAAA,EAAAA,KAAQ,KACvBstB,GAAeA,EAAY7wB,OA5EO,IA4EyCwyB,IAAkBC,EACzFmB,GAAAA,GAGF7S,EAAAA,EAAAA,KAAYD,EAAAA,EAAAA,IAAO,IAAI0R,KAAkBC,IAC9CzS,GAAW,IACZ,CAACA,EAAWwS,EAAeC,EAAe5B,IAEvCoD,GAAgB1wB,EAAAA,EAAAA,KAAQ,KACtBstB,GAAgBe,IAAgBle,GAAgC,IAApBA,EAAS1T,OAIpD0T,EACJ6L,KAAKzgB,IAAO,MACX,MAAOwB,EAAQC,GAAazB,EAAGo1B,MAAM,KAErC,OAAOrB,MAAAA,GAAP,UAAOA,EAAyBvyB,UAAhC,aAAO,EAAkCyf,KAAKjR,OAAOvO,OAEtD0d,OAAmBpT,SACnBspB,MAAK,CAACC,EAAGC,IAAMA,EAAEjyB,KAAOgyB,EAAEhyB,OAVpBwxB,GAAAA,GAWR,CAAClgB,EAAUmf,EAAwBhC,EAAae,IAE7C0C,GAA2BjzB,EAAAA,EAAAA,KAAY,KAC3C8xB,GAAwBD,KACvB,CAACA,IAEEqB,GAA4BlzB,EAAAA,EAAAA,KAAY,KAC5CgyB,GAAyBD,KACxB,CAACA,IAmBEoB,EAAenC,IAAmBA,EAAevS,QAAUuS,EAAetI,WAC1EwI,EAAavyB,SAAWsyB,EAActyB,SAAWi0B,EAAcj0B,OAErE,OAAK6wB,GAAgBe,EAKnB,mBAACzS,GAAA,EAAD,CACEzd,UAAU,2BACV0d,MAAO6U,EACP5U,WAAYiU,EAEZmB,sBAAoB,EACpBC,YAAU,GAET5B,GACC,0BAAKpxB,UAAU,4CACb,mBAAC,GAAD,CACEkwB,WAAYkB,EACZ3E,SAAU4E,KAIfyB,GACC,mBAACG,GAAA,EAAD,CACEhwB,KAAMrD,EAAK,6BACXoqB,YAAapqB,EAAK,4CAGnBixB,EAAavyB,QACd,0BAAK0B,UAAU,2CAA2CO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjF0uB,EAAahT,KAAKzgB,GACjB,mBAAC81B,GAAA,EAAD,CACEC,aAAc/1B,EACd6C,QAAS+xB,EACToB,SAAUh2B,SAKfyzB,EAAavyB,QACd,0BAAK0B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKX,EAAKoc,MAAQ,YAAS7Z,GACxD0uB,EAAavyB,OAvKK,GAwKjB,mBAACuxB,GAAA,EAAD,CAAM5vB,QAAS2yB,GACZhzB,EAAK4xB,EAAsB,2BAA6B,6BAG5D5xB,EAAK,oCAEPixB,EAAahT,KAAI,CAACzgB,EAAI4d,KACrB,GAAKwW,KAAuBxW,GA/KT,GAmLnB,OACE,mBAAC,GAAD,CACEpc,OAAQxB,EACR6C,QAAS8xB,UAMhBnB,EAActyB,QACf,0BAAK0B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKX,EAAKoc,MAAQ,YAAS7Z,GACxDyuB,EAActyB,OA/LI,GAgMjB,mBAACuxB,GAAA,EAAD,CAAM5vB,QAAS4yB,GACZjzB,EAAK8xB,EAAuB,2BAA6B,6BAG7D9xB,EAAK,mCAEPgxB,EAAc/S,KAAI,CAACzgB,EAAI4d,KACtB,GAAK0W,KAAwB1W,GAvMV,GA2MnB,OACE,mBAAC,GAAD,CACEpc,OAAQxB,EACRgwB,cAAY,EACZntB,QAAS8xB,UAMhBQ,EAAcj0B,QACf,0BAAK0B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKX,EAAKoc,MAAQ,YAAS7Z,GAAYvC,EAAK,mBAC3E2yB,EAAc1U,KA9GvB,SAA4B7f,GAC1B,MAAMiF,GAAO8sB,EAAAA,EAAAA,IAAsBnwB,EAAM5B,GACnCsC,EAAOge,EAAUtgB,EAAQY,QAE/B,GAAKqE,GAAS3C,EAId,OACE,mBAAC,GAAD,CACE1B,OAAQZ,EAAQY,OAChBZ,QAASA,EACTmxB,YAAaA,SASV,mBAAC,GAAD,CAAgBV,QAASA,QC/I9BT,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAK,GAyFjD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQ0f,KAAMC,GAAc3f,EAAOyf,OAC7B,cAAEhC,EAAeiM,UAAY6I,SAAUC,GAAvC,aAAiEjC,GAAiBvwB,GAClF,eAAEgyB,EAAF,cAAkB1e,GAAkBtT,EAAO6vB,cAE3C,SAAExc,IAAcC,MAAAA,OAAD,EAACA,EAAehP,OAAS,GAE9C,MAAO,CACLmZ,cAAAA,EACApK,SAAAA,EACAmf,uBAAAA,EACA7S,UAAAA,EACAqS,eAAAA,EACAzB,aAAAA,MAGJ,CAAC7vB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAjBpCZ,EAvFkD,EACpEywB,YAAAA,EACA/S,cAAAA,EACAgV,gBAAAA,EACApf,SAAAA,EACAmf,uBAAAA,EACA7S,UAAAA,EACAqS,eAAAA,EACAzB,aAAAA,EACAoC,qBAAAA,EACAD,mBAAAA,MAEA,MAAMzxB,GAAOC,EAAAA,EAAAA,KACP+xB,GAAiBjyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCmU,GAAgBnU,IAAc8W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBpkB,KAAM,OACN4kB,MAAO3C,EACPvwB,OAAQwd,SAIb,CAACA,EAAe8S,EAAcoC,EAAsBnC,IAEjDoD,GAAgB1wB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAgC,IAApBA,EAAS1T,OAInB0T,EACJ6L,KAAKzgB,IAAO,MACX,MAAOwB,EAAQC,GAAazB,EAAGo1B,MAAM,KAErC,OAAOrB,MAAAA,GAAP,UAAOA,EAAyBvyB,UAAhC,aAAO,EAAkCyf,KAAKjR,OAAOvO,OAEtD0d,OAAmBpT,SACnBspB,MAAK,CAACC,EAAGC,IAAMA,EAAEjyB,KAAOgyB,EAAEhyB,OAVpBwxB,GAAAA,GAWR,CAAClgB,EAAUmf,IAmBR2B,EAAenC,IAAmBA,EAAevS,QAAUuS,EAAetI,WAAakK,EAAcj0B,OAE3G,OACE,0BAAK0B,UAAU,cACb,mBAACyd,GAAA,EAAD,CACEzd,UAAU,yCACV0d,MAAO6U,EACP5U,WAAYiU,EACZoB,YAAU,GAET5B,GACC,0BAAKpxB,UAAU,4CACb,mBAAC,GAAD,CACEkwB,WAAYkB,EACZ3E,SAAU4E,KAIfyB,GACC,mBAACG,GAAA,EAAD,CACEhwB,KAAMrD,EAAK,6BACXoqB,YAAapqB,EAAK,4CAGnB2yB,EAAcj0B,QAAUi0B,EAAc1U,KAzC/C,SAA4B7f,GAC1B,MAAMiF,GAAO8sB,EAAAA,EAAAA,IAAsBnwB,EAAM5B,GACnCsC,EAAOge,EAAUtgB,EAAQY,QAE/B,GAAKqE,GAAS3C,EAId,OACE,mBAAC,GAAD,CACE1B,OAAQZ,EAAQY,OAChBZ,QAASA,EACTmxB,YAAaA,aCxEd,SAASkE,GAAsBnmB,GACpC,MAAO,CAACvO,EAAqB20B,KAAe,MAC1C,MAAQjV,KAAMC,GAAc3f,EAAOyf,OAC3BC,KAAMgQ,GAAc1vB,EAAO2vB,OAC7B,eACJqC,EADI,cACY1e,EADZ,OAC2BrT,GAC7BD,EAAO6vB,aAKL+E,EAAuB,UAATrmB,EAAmBA,EAAQomB,MAAAA,GAAAA,EAAOE,QAAU,QAAU,SAElEtC,SAAUC,GAA2BxyB,EAAO0pB,SAC9CrW,EAAWC,MAAAA,GAAH,UAAGA,EAAgBshB,UAAnB,aAAG,EAA8BvhB,SAEzCyhB,EAAkB90B,EAAO80B,gBAAgBvC,SAE/C,MAAO,CACLwC,OAAOC,EAAAA,EAAAA,IAAYh1B,GACnBi1B,eAAwBzxB,IAAb6P,KACL2e,GAAiBxnB,QAAQwnB,EAAevS,OAASuS,EAAetI,UACtE/J,UAAAA,EACA+P,UAAAA,EACA8C,uBAAAA,EACAnf,SAAAA,EACA6hB,aAAcj1B,EACd60B,gBAAAA,EACAvE,aAAcvwB,EAAOuwB,e,0BCnB3B,MAAM4E,GAAe,QACf9F,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAK,GAuGjD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,IAClB20B,GAAsBS,KACtB,CAACz0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,qBAJgBZ,EArG4C,EAC9DywB,YAAAA,EACA0E,aAAAA,EACAD,UAAAA,EACAzC,uBAAAA,EACAnf,SAAAA,EACAkd,aAAAA,EACAoC,qBAAAA,EACAnf,gBAAAA,MAEA,MAAMvS,GAAOC,EAAAA,EAAAA,KAEP+xB,GAAiBjyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCmU,GAAgBnU,IAAc8W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBpkB,KAAM4mB,GACNhC,MAAO3C,EACPvwB,OAAQi1B,SAIb,CAAC3E,EAAcoC,EAAsBnC,EAAa0E,IAE/CtB,GAAgB1wB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAamf,EAIXnf,EAAS6L,KAAKzgB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGo1B,MAAM,KAErC,iBAAOrB,EAAuBvyB,UAA9B,aAAO,EAAgCyf,KAAKjR,OAAOvO,OAClD0d,OAAOpT,SAPD+oB,GAAAA,GAQR,CAACf,EAAwBnf,IAEtB+hB,GAAoBp0B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACxDuT,EAAgB,CACdvT,OAAAA,EACAC,UAAAA,EACAhD,OAAQY,EAAAA,GAAAA,iBAET,CAAC0V,IA2BE6hB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC9E,GAAc+E,EAAAA,KAA+BN,EACpFO,EAAcH,GAAqBhiB,GAAYA,EAAS1T,OAAS,IAAM6wB,EACvEiF,EAAgBJ,GAAqBhiB,GAAYA,EAAS1T,OAAS,GAAK6wB,EAExEjrB,GAAaC,EAAAA,EAAAA,GACjB,+BACAiwB,GAAiB,aAGnB,OACE,0BAAKp0B,UAAU,cACb,mBAACyd,GAAA,EAAD,CACEzd,UAAWkE,EACXwZ,MAAO6U,EACP8B,aAAelF,EAAyB,YAAX,SAC7BxR,WAAYiU,EACZoB,YAAU,IAERgB,GAAqB,mBAAC7V,GAAA,EAAD,MACtB6V,KAAuBhiB,GAAgC,IAApBA,EAAS1T,SAC3C,mBAAC20B,GAAA,EAAD,CACEhwB,KAAMrD,EAAK,6BACXoqB,YAAapqB,EAAK,0CAGrBu0B,GAhDH,0BAAKn0B,UAAU,aAAaO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACnDowB,EAAc1U,KAAK7f,GAClB,mBAACs2B,GAAA,EAAD,CACEn0B,IAAKnC,EAAQZ,GACbm3B,SAAS,eACTv2B,QAASA,EACTiC,QAAS8zB,OA2CZK,GAnCE7B,EAAc1U,KAAK7f,GACxB,mBAAC,GAAD,CACEmC,IAAKnC,EAAQZ,GACbwB,OAAQZ,EAAQY,OAChBZ,QAASA,Y,wBCnEjB,MAAM81B,GAAe,QACf9F,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAK,GA4FjD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,IAClB20B,GAAsBS,KACtB,CAACz0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,kBAJgBZ,EA1F2C,EAC7DywB,YAAAA,EACA0E,aAAAA,EACAD,UAAAA,EACAtV,UAAAA,EACA+P,UAAAA,EACA8C,uBAAAA,EACAnf,SAAAA,EACAkd,aAAAA,EACAoC,qBAAAA,EACA7xB,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KACP+xB,GAAiBjyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCmU,GAAgBnU,IAAc8W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBpkB,KAAM4mB,GACNhC,MAAO3C,EACPvwB,OAAQi1B,SAIb,CAAC3E,EAAcoC,EAAsBnC,EAAa0E,IAE/CtB,GAAgB1wB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAamf,EAIXnf,EAAS6L,KAAKzgB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGo1B,MAAM,KAErC,iBAAOrB,EAAuBvyB,UAA9B,aAAO,EAAgCyf,KAAKjR,OAAOvO,OAClD0d,OAAOpT,SAPD+oB,GAAAA,GAQR,CAACf,EAAwBnf,IAEtBwiB,GAAqB70B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IA4BEu0B,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC9E,GAAc+E,EAAAA,KAA+BN,EAE1F,OACE,0BAAK5zB,UAAU,cACb,mBAACyd,GAAA,EAAD,CACEzd,UAAU,8CACV0d,MAAO6U,EACP5U,WAAYiU,EACZoB,YAAU,IAERgB,GAAqB,mBAAC7V,GAAA,EAAD,MACtB6V,KAAuBhiB,GAAgC,IAApBA,EAAS1T,SAC3C,mBAAC20B,GAAA,EAAD,CACEhwB,KAAMrD,EAAK,6BACXoqB,YAAapqB,EAAK,0CAGrBo0B,GAAqBhiB,GAAYA,EAAS1T,OAAS,GA1CjDi0B,EAAc1U,KAAI,CAAC7f,EAASgd,KACjC,MAAMyZ,EAAkC,IAAVzZ,IACzB0Z,EAAAA,EAAAA,IAAY12B,EAAQ0C,SAAUg0B,EAAAA,EAAAA,IAAYnC,EAAcvX,EAAQ,GAAGta,MACxE,OACE,0BACEV,UAAU,sBACVO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,EAC1BhC,IAAKnC,EAAQZ,IAEZq3B,GACC,wBAAGz0B,UAAU,kBAAkBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,IACtDwyB,EAAAA,EAAAA,IAAmB/0B,EAAM,IAAIwiB,KAAoB,IAAfpkB,EAAQ0C,QAG/C,mBAACk0B,GAAA,EAAD,CACEz0B,IAAKnC,EAAQZ,GACbY,QAASA,EACT8B,aAAa+0B,EAAAA,GAAAA,GAAcj1B,EAAM5B,EAASsgB,EAAW+P,GACrDyG,eAAgBN,c,eC7D5B,MAAMV,GAAe,YACf9F,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAK,GA+FjD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,IAClB20B,GAAsBS,KACtB,CAACz0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,kBAJgBZ,EA7F2C,EAC7DywB,YAAAA,EACA0E,aAAAA,EACAD,UAAAA,EACAtV,UAAAA,EACA+P,UAAAA,EACA8C,uBAAAA,EACAnf,SAAAA,EACAyhB,gBAAAA,EACAvE,aAAAA,EACAoC,qBAAAA,EACA7xB,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KACP+xB,GAAiBjyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCmU,GAAgBnU,IAAc8W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBpkB,KAAM4mB,GACNhC,MAAO3C,EACPvwB,OAAQi1B,SAIb,CAAC3E,EAAcoC,EAAsBnC,EAAa0E,IAE/CtB,GAAgB1wB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAamf,EAIXnf,EAAS6L,KAAKzgB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGo1B,MAAM,KAC/Bx0B,EAAO,UAAGmzB,EAAuBvyB,UAA1B,aAAG,EAAgCyf,KAAKjR,OAAOvO,IAE5D,OAAOb,IAAW0X,EAAAA,EAAAA,IAAmB1X,GAAWA,OAAUmE,KACzDoa,OAAOpT,SARD+oB,GAAAA,GASR,CAACf,EAAwBnf,IAEtBwiB,GAAqB70B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IA6BEu0B,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC9E,GAAc+E,EAAAA,KAA+BN,EAE1F,OACE,0BAAK5zB,UAAU,cACb,mBAACyd,GAAA,EAAD,CACEzd,UAAU,8CACV0d,MAAO6U,EACP5U,WAAYiU,EACZoB,YAAU,IAERgB,GAAqB,mBAAC7V,GAAA,EAAD,MACtB6V,KAAuBhiB,GAAgC,IAApBA,EAAS1T,SAC3C,mBAAC20B,GAAA,EAAD,CACEhwB,KAAMrD,EAAK,6BACXoqB,YAAapqB,EAAK,0CAGrBo0B,GAAqBhiB,GAAYA,EAAS1T,OAAS,GA3CjDi0B,EAAc1U,KAAI,CAAC7f,EAASgd,KAAU,MAC3C,MAAMyZ,EAAkC,IAAVzZ,IACzB0Z,EAAAA,EAAAA,IAAY12B,EAAQ0C,SAAUg0B,EAAAA,EAAAA,IAAYnC,EAAcvX,EAAQ,GAAGta,MACxE,OACE,0BACEV,UAAU,sBACVG,IAAKnC,EAAQZ,IAEZq3B,GACC,wBAAGz0B,UAAU,oBAAmB20B,EAAAA,EAAAA,IAAmB/0B,EAAM,IAAIwiB,KAAoB,IAAfpkB,EAAQ0C,QAE5E,mBAACq0B,GAAA,EAAD,CACE/2B,QAASA,EACTg3B,UAAQ,EACRC,SAAUj3B,EAAQ0C,KAClBw0B,SAAO,EACPn2B,QAAQ81B,EAAAA,GAAAA,GAAcj1B,EAAM5B,EAASsgB,EAAW+P,GAChDruB,UAAU,cACVm1B,YAAaX,EACb5zB,cAAa,UAAE6yB,EAAgBz1B,EAAQY,eAA1B,aAAE,EAAiCvB,SAASW,EAAQZ,gB,eCnE7E,MAAM4wB,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAK,GA2GjD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,IAClB20B,GAAsB,UACtB,CAACh0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,eACA,qBALgBZ,EAzG4C,EAC9Dg1B,MAAAA,EACAF,QAAAA,EACArE,YAAAA,EACA0E,aAAAA,EACAD,UAAAA,EACAtV,UAAAA,EACA+P,UAAAA,EACA8C,uBAAAA,EACAnf,SAAAA,EACAkd,aAAAA,EACAuE,gBAAAA,EACAnC,qBAAAA,EACA7xB,aAAAA,EACA21B,gBAAAA,MAEA,MAAMx1B,GAAOC,EAAAA,EAAAA,KACP0zB,EAAcC,EAAU,QAAU,QAClC5B,GAAiBjyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCmU,GAAgBnU,IAAc8W,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBpkB,KAAMqmB,EACNzB,MAAO3C,EACPvwB,OAAQi1B,SAIb,CAACN,EAAarE,EAAcoC,EAAsBnC,EAAa0E,IAE5DtB,GAAgB1wB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAamf,EAIXnf,EAAS6L,KAAKzgB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGo1B,MAAM,KAErC,iBAAOrB,EAAuBvyB,UAA9B,aAAO,EAAgCyf,KAAKjR,OAAOvO,OAClD0d,OAAOpT,SAPD+oB,GAAAA,GAQR,CAACf,EAAwBnf,IAEtBwiB,GAAqB70B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IAEE41B,GAAkB11B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACtDw2B,EAAgB,CAAEx2B,OAAAA,EAAQC,UAAAA,MACzB,CAACu2B,IAkCEpB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC9E,GAAc+E,EAAAA,KAA+BN,EAE1F,OACE,0BAAK5zB,UAAU,cACb,mBAACyd,GAAA,EAAD,CACEzd,UAAU,8CACV0d,MAAO6U,EACP5U,WAAYiU,EACZoB,YAAU,IAERgB,GAAqB,mBAAC7V,GAAA,EAAD,MACtB6V,KAAuBhiB,GAAgC,IAApBA,EAAS1T,SAC3C,mBAAC20B,GAAA,EAAD,CACEhwB,KAAMrD,EAAK,6BACXoqB,YAAapqB,EAAK,0CAGrBo0B,GAAqBhiB,GAAYA,EAAS1T,OAAS,GAhDjDi0B,EAAc1U,KAAI,CAAC7f,EAASgd,KAAU,MAC3C,MAAMyZ,EAAkC,IAAVzZ,IACzB0Z,EAAAA,EAAAA,IAAY12B,EAAQ0C,SAAUg0B,EAAAA,EAAAA,IAAYnC,EAAcvX,EAAQ,GAAGta,MACxE,OACE,0BACEV,UAAU,sBACVG,IAAKnC,EAAQZ,IAEZq3B,GACC,wBAAGz0B,UAAU,kBAAkBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,IACtDwyB,EAAAA,EAAAA,IAAmB/0B,EAAM,IAAIwiB,KAAoB,IAAfpkB,EAAQ0C,QAG/C,mBAAC40B,GAAA,EAAD,CACEn1B,IAAKnC,EAAQZ,GACbs2B,MAAOA,EACP11B,QAASA,EACTnC,OAAQ05B,EAAAA,GAAAA,OACRz1B,aAAa+0B,EAAAA,GAAAA,GAAcj1B,EAAM5B,EAASsgB,EAAW+P,GACrD3tB,KAAM1C,EAAQ0C,KACdwuB,aAAcA,EACdlvB,UAAU,cACVkM,OAAQmpB,EACRF,YAAaX,EACb5zB,cAAa,UAAE6yB,EAAgBz1B,EAAQY,eAA1B,aAAE,EAAiCvB,SAASW,EAAQZ,gBCpEvEo4B,GAAO,CACX,CAAEtoB,KAAMuoB,EAAAA,GAAAA,SAA8BpV,MAAO,uBAC7C,CAAEnT,KAAMuoB,EAAAA,GAAAA,MAA2BpV,MAAO,mBAC1C,CAAEnT,KAAMuoB,EAAAA,GAAAA,MAA2BpV,MAAO,mBAC1C,CAAEnT,KAAMuoB,EAAAA,GAAAA,MAA2BpV,MAAO,mBAC1C,CAAEnT,KAAMuoB,EAAAA,GAAAA,MAA2BpV,MAAO,mBAC1C,CAAEnT,KAAMuoB,EAAAA,GAAAA,MAA2BpV,MAAO,oBAGtCqV,GAAY,CAChB,CAAExoB,KAAMuoB,EAAAA,GAAAA,SAA8BpV,MAAO,mBAC1CmV,GAAKG,MAAM,IAGVC,GAA0Bh4B,OAAOi4B,KAAKJ,EAAAA,IAAqBn3B,OAAS,EA4F1E,IAAeqC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAEm3B,EAAF,OAAkBl3B,GAAWD,EAAO6vB,aAE1C,MAAO,CAAEsH,eAAAA,EAAgBl3B,OAAAA,MAE3B,CAACS,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAA0B,yBAN9DZ,EA1F0C,EAC5DywB,YAAAA,EACAe,WAAAA,EACAvU,SAAAA,EACAma,eAAAA,EAAiBL,EAAAA,GAAAA,SACjB72B,OAAAA,EACAm3B,uBAAAA,EACAC,oBAAAA,EACAvH,QAAAA,MAEA,MAAM7uB,GAAOC,EAAAA,EAAAA,MACNo2B,EAAWC,IAAgB5yB,EAAAA,EAAAA,IAASwyB,GACrC1E,GAAkBvvB,EAAAA,EAAAA,KAAQ,KAAMs0B,EAAAA,EAAAA,IAAgBhH,IAAc,CAACA,IAE/DiH,GAAkBz2B,EAAAA,EAAAA,KAAaqb,IACnC,MAAMqb,EAAMb,GAAKxa,GACjB+a,EAAuB,CAAEO,QAASD,EAAInpB,OACtCgpB,EAAalb,KACZ,CAAC+a,IAEEQ,GAAyB52B,EAAAA,EAAAA,KAAasN,IAC1C+oB,EAAoB,CAAEt1B,KAAMuM,EAAMyX,UAAY,QAC7C,CAACsR,KAEJla,EAAAA,EAAAA,IAAeH,EAAU8S,OAAStsB,OAAWA,GAAW,GAGxD,MAAM6a,GAAehX,EAAAA,EAAAA,IAAuB,MACtCmV,GAAgB+B,EAAAA,GAAAA,GAA0BF,EAAcrB,OAAUxZ,EAAW,oBAAoB,GAEvG,OACE,0BAAKnC,UAAU,aAAa2H,IAAKqV,EAAcK,UAAWlC,GACxD,mBAACqb,GAAA,EAAD,CAASP,UAAWA,EAAWQ,KAAM73B,EAAS82B,GAAYF,GAAMkB,YAAaN,IAC7E,mBAACna,EAAA,EAAD,CACEE,KAAMvc,EAAKoc,MAAQ,iBAAmB,QACtC2a,YAAaf,GACb1Z,UAAW4Z,IAEV,KACC,OAAQA,GACN,KAAKL,EAAAA,GAAAA,SACH,OAAI72B,EAEA,mBAAC,GAAD,CACEuwB,YAAaA,EACbiC,gBAAiBA,EACjB3C,QAASA,EACT4C,mBAAoBkF,IAKxB,mBAAC,GAAD,CACEpH,YAAaA,EACbe,WAAYA,EACZkB,gBAAiBA,EACjB3C,QAASA,EACT4C,mBAAoBkF,IAG1B,KAAKd,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAActG,YAAaA,IACpC,KAAKsG,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAatG,YAAaA,IACnC,KAAKsG,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAatG,YAAaA,IACnC,KAAKsG,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACEt1B,IAAI,QACJgvB,YAAaA,IAGnB,KAAKsG,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACEt1B,IAAI,QACJqzB,SAAO,EACPrE,YAAaA,IAGnB,QACE,gB,eC3Hd,MAAMyH,GAA4B,CAChCC,gBAAiB,GACjBC,SAAU,GACVC,KAAM,GACNC,MAAO,IAGHC,GAAuD,CAC3DC,EACAC,KAEA,OAAQA,EAAOjqB,MACb,IAAK,qBACH,MAAO,IACFgqB,EACHL,gBAAiBM,EAAOC,SAG5B,IAAK,cACH,MAAO,IACFF,EACHJ,SAAUK,EAAOC,SAGrB,IAAK,UACH,MAAO,IACFF,EACHH,KAAMI,EAAOC,SAGjB,IAAK,WACH,MAAO,IACFF,EACHF,MAAOG,EAAOC,SAGlB,IAAK,QACH,OAAOR,GAET,QACE,OAAOM,ICmNb,IAAev2B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,SAClByD,GACA,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,UAAW,sBAF/CZ,EA9OiC,EACnD24B,cAAAA,EACAC,eAAAA,EACA7I,QAAAA,EACA8I,aAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAC,eAAAA,MAEA,MAAOC,EAAqBC,IAA0Bt0B,EAAAA,EAAAA,KAAS,IACxDu0B,EAA0BC,IAA+Bx0B,EAAAA,EAAAA,KAAS,GAEnEy0B,GAA0Bp4B,EAAAA,EAAAA,KAAY,KAC1Ci4B,GAAuB,KACtB,IAEGI,GAA2Br4B,EAAAA,EAAAA,KAAY,KAC3Ci4B,GAAuB,KACtB,IAEGK,GAA+Bt4B,EAAAA,EAAAA,KAAY,KAC/Cm4B,GAA4B,KAC3B,IAEGI,GAAgCv4B,EAAAA,EAAAA,KAAY,KAChDm4B,GAA4B,KAC3B,IAEGK,GAAuBx4B,EAAAA,EAAAA,KAAY,KACvCq4B,IACAR,MACC,CAACQ,EAA0BR,IAExBY,GAA4Bz4B,EAAAA,EAAAA,KAAY,KAC5Cu4B,IACAT,EAAiB,CAAEr6B,GAAIk6B,IACvB7I,MACC,CAAC6I,EAAgBY,EAA+BT,EAAkBhJ,IAE/D4J,GAAsEx2B,EAAAA,EAAAA,KAAQ,IAC3E,EAAGC,UAAAA,EAAWC,OAAAA,KACnB,mBAACC,EAAA,EAAD,CACEC,OAAK,EACL4F,QAASxF,EAAAA,GACTjC,KAAK,UACL8B,MAAM,cACNlC,UAAW+B,EAAS,SAAW,GAC/B9B,QAAS6B,EACTM,UAAU,gBAEV,wBAAGpC,UAAU,gBAGhB,IAEGJ,GAAOC,EAAAA,EAAAA,KAuJb,OACE,0BAAKG,UAAU,eACb,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAASwuB,EACTrsB,UAAWxC,EAAK,mBAEhB,wBAAGI,UAAU,qBA9JnB,WACE,OAAQq3B,GACN,KAAKiB,EAAAA,GAAAA,YACH,OAAO,6BAAK14B,EAAK,6BACnB,KAAK04B,EAAAA,GAAAA,QACH,OAAO,6BAAK14B,EAAK,YACnB,KAAK04B,EAAAA,GAAAA,cACH,OAAO,6BAAK14B,EAAK,kBACnB,KAAK04B,EAAAA,GAAAA,YACH,OAAO,6BAAK14B,EAAK,iBACnB,KAAK04B,EAAAA,GAAAA,QACH,OAAO,6BAAK14B,EAAK,oBACnB,KAAK04B,EAAAA,GAAAA,SACH,OAAO,6BAAK14B,EAAK,aAEnB,KAAK04B,EAAAA,GAAAA,sBACH,OAAO,6BAAK14B,EAAK,mBACnB,KAAK04B,EAAAA,GAAAA,2BACH,OAAO,6BAAK14B,EAAK,aAEnB,KAAK04B,EAAAA,GAAAA,mBACH,OAAO,6BAAK14B,EAAK,iBACnB,KAAK04B,EAAAA,GAAAA,gBACH,OAAO,6BAAK14B,EAAK,oBACnB,KAAK04B,EAAAA,GAAAA,oBACH,OAAO,6BAAK14B,EAAK,yBACnB,KAAK04B,EAAAA,GAAAA,kBACH,OAAO,6BAAK14B,EAAK,oBACnB,KAAK04B,EAAAA,GAAAA,kBACH,OAAO,6BAAK14B,EAAK,2BACnB,KAAK04B,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO,6BAAK14B,EAAK,oBACnB,KAAK04B,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAO,6BAAK14B,EAAK,mBAEnB,KAAK04B,EAAAA,GAAAA,sBACH,OAAO,6BAAK14B,EAAK,kBACnB,KAAK04B,EAAAA,GAAAA,oBACH,OAAO,6BAAK14B,EAAK,iBAEnB,KAAK04B,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACH,OAAO,6BAAK14B,EAAK,wBACnB,KAAK04B,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACH,OAAO,6BAAK14B,EAAK,+BACnB,KAAK04B,EAAAA,GAAAA,wBACH,OAAO,6BAAK14B,EAAK,0BACnB,KAAK04B,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO,6BAAK14B,EAAK,iBACnB,KAAK04B,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,mBACH,OAAO,6BAAK14B,EAAK,uBACnB,KAAK04B,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,uBACH,OAAO,oDACT,KAAKA,EAAAA,GAAAA,qBACH,OAAO,6BAAK14B,EAAK,mCACnB,KAAK04B,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO,6BAAK14B,EAAK,+BAEnB,KAAK04B,EAAAA,GAAAA,QACH,OAAO,6BAAK14B,EAAK,YACnB,KAAK04B,EAAAA,GAAAA,oBACH,OAAO,6BAAK14B,EAAK,cACnB,KAAK04B,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,0BAAKt4B,UAAU,wBACb,6BAAKJ,EAAK,eAET03B,GACC,mBAACh1B,EAAA,EAAD,CACEtC,UAAU,qBACVuC,QAAS81B,EACT71B,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,SAAS8pB,aAAW,EAACvsB,QAASg4B,GAC1Cr4B,EAAK,aAMlB,KAAK04B,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,0BAAKt4B,UAAU,wBACXq3B,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,iCACnB,6BAAK14B,EAAK,kBAEV,6BAAKA,EAAK,kBAGd,mBAACoC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNlC,UAAU,gBACVC,QAASs3B,EACTn1B,UAAWxC,EAAK,sBAEhB,wBAAGI,UAAU,iBAKrB,QACE,OACE,0BAAKA,UAAU,wBACb,6BAAKJ,EAAK,aAEV,mBAACoC,EAAA,EAAD,CACEC,OAAK,EACL4F,QAASxF,EAAAA,GACTjC,KAAK,UACL8B,MAAM,cACNjC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,aAC9Bl2B,UAAWxC,EAAK,6BAEhB,wBAAGI,UAAU,eAEf,mBAACsC,EAAA,EAAD,CACEtC,UAAU,qBACVuC,QAAS81B,EACT71B,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,SAASzC,QAAS83B,GAA0Bn4B,EAAK,mBAkBvE24B,GACD,mBAAC9W,GAAA,EAAD,CACE1f,OAAQ41B,EACRpvB,QAASyvB,EACT/0B,KAAMrD,EAAK,mBACX8hB,aAAc9hB,EAAK,0BACnB+hB,eAAgBwW,EAChBK,sBAAoB,IAEtB,mBAAC/W,GAAA,EAAD,CACE1f,OAAQ81B,EACRtvB,QAAS2vB,EACTj1B,KAAMrD,EAAK,qBACX8hB,aAAc9hB,EAAK,UACnB+hB,eAAgByW,EAChBI,sBAAoB,S,wBCtO5B,MA2EA,IAAe73B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEyd,EAAF,aAAiB8S,GAAiBvwB,EAExC,MAAO,CACL85B,YAAarc,GAAgBnd,EAAAA,EAAAA,IAAWN,EAAQyd,QAAiBja,EACjE+sB,aAAAA,MAGJ,CAAC7vB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,uBATpCZ,EA3E4C,EAC9Did,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAiK,kBAAAA,EACAD,YAAAA,EACAvJ,aAAAA,MAEA,MAAMtvB,GAAOC,EAAAA,EAAAA,KACP84B,EAAYF,MAAAA,OAAH,EAAGA,EAAar7B,GAU/B,OARAmG,EAAAA,EAAAA,KAAU,KACJo1B,GAAazJ,GACfwJ,EAAkB,CAAEC,UAAAA,MAErB,CAACzJ,EAAcyJ,EAAWD,KAE7B5c,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,MAGhD,0BAAKt4B,UAAU,kCACb,0BAAKA,UAAU,sBACZy4B,GACC,mBAACG,GAAA,EAAD,CACE3a,OAAQwa,EAAYr7B,GACpBy7B,eAAa,IAGhBJ,GACC,mBAACK,GAAA,EAAD,CACE3F,aAAcsF,EAAYr7B,GAC1By7B,eAAa,IAGjB,mBAAC/a,GAAA,EAAD,CACEpb,KAAK,WACLzC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,UAE7B14B,EAAK,2CAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,SACLzC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,gBAE7B14B,EAAK,kBAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,OACLzC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,UAE7B14B,EAAK,oBAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,OACLzC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,cAE7B14B,EAAK,iBAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,SACLzC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,UAE7B14B,EAAK,YAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,WACLzC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,WAE7B14B,EAAK,mB,yBC9EhB,MAEMm5B,GAAc,gBACdC,GAAoB,sBACpBC,GAAiB,oBAEjBC,IAA+BC,EAAAA,EAAAA,KAAUlL,GAAOA,KAAM,KAAK,GAkFjE,IAAettB,EAAAA,EAAAA,KA1E2B,EACxCy4B,gBAAAA,EACAC,OAAAA,EACAzF,UAAAA,EACA0F,oBAAAA,EACAC,cAAAA,EACApsB,SAAAA,MAEA,MAAOmlB,EAAUkH,IAAel2B,EAAAA,EAAAA,IAAS81B,GAAmB,IAEtDx5B,GAAOC,EAAAA,EAAAA,KACP45B,EAAaJ,EAAS,SAAW,WACjC9O,EAAiB3qB,EAATy5B,EAAc,oBAA4B,aAEjDK,EAAiBC,IAAiB93B,EAAAA,EAAAA,KAAQ,IAC1CywB,EAASh0B,OAIVg0B,EAASh0B,OAjCW,EAkCf,MAAC6D,EAAY,GAAEooB,kBAEpB+H,EAASh0B,OAnCW,GAoCf,MAAC6D,EAAY,GAAEooB,iBAEnB0O,GAAeW,KAAKtH,QAIGnwB,IAAxBm3B,EACK,GAIF,CACLA,EAAsB15B,EAAM,GAAE65B,aAAuB,iBAAct3B,GAC3C,IAAxBm3B,EAAgC15B,EAAM,GAAE65B,eAAqBt3B,GAVtD,MAACA,EAAY,GAAEooB,iCAVf,IAsBR,CAAC+H,EAAUgH,EAAqB15B,EAAM65B,EAAYlP,KAErDhnB,EAAAA,EAAAA,KAAU,KACRi2B,EAAYJ,GAAmB,MAC9B,CAACC,EAAQD,IAEZ,MAAMS,GAAuBl6B,EAAAA,EAAAA,KAAayE,IACxC,MAAM01B,EAAc11B,EAAEiJ,OAAOJ,MAAM8sB,OAAOnU,QAAQoT,GAAmB,IACrEQ,EAAYM,GACZ11B,EAAEiJ,OAAOJ,MAAS,GAAEosB,EAASN,GAAc,KAAKe,IAEhD,MAAME,EAvDV,SAAyB1H,GACvB,OAAOA,EAASh0B,QATU,GAUrBg0B,EAASh0B,QATY,IAUrB26B,GAAeW,KAAKtH,GAoDP2H,CAAgBH,GAE5BE,GACFd,IAA6B,KAC3BK,EAAc,CAAEjH,SAAUwH,OAI1B3sB,GACFA,IAAS6sB,GAAUF,KAEpB,CAACT,EAAQE,EAAepsB,IAE3B,OACE,mBAACiQ,GAAA,EAAD,CACEnQ,MAAQ,GAAEosB,EAASN,GAAc,KAAKzG,IACtCnlB,SAAU0sB,EACVtP,MAAOA,EACP3K,MAAO+Z,EACPO,QAASR,EACTS,SAAUvG,OCzDV5F,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAO,GAI7CmM,GAA2B,iCAC3BC,GAAqB,wCA8M3B,IAAe15B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEyd,GAAkBzd,GACpB,SAAEoE,EAAF,oBAAYu2B,GAAwB36B,EAAO27B,aAAe,GAC1D7B,EAAcrc,GAAgBnd,EAAAA,EAAAA,IAAWN,EAAQyd,QAAiBja,EAExE,IAAKs2B,EACH,MAAO,CACL11B,SAAAA,EACAu2B,oBAAAA,GAIJ,MACEiB,UAAWC,EACXC,SAAUC,EACVpI,SAAU8G,EAHN,SAIJuB,GACElC,GACImC,IAAKC,GAAeF,GAAY,GAGxC,MAAO,CACLG,mBAHwBrmB,EAAAA,EAAAA,IAAkBgkB,GAI1C+B,iBAAAA,EACAE,gBAAAA,EACAG,WAAAA,EACAzB,gBAAAA,EACAr2B,SAAAA,EACAu2B,oBAAAA,MAGJ,CAACj6B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,gBACA,mBAnCgBZ,EA5MmD,EACrEid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAqM,kBAAAA,EACAN,iBAAAA,EACAE,gBAAAA,EACAG,WAAAA,EACAzB,gBAAAA,EACAr2B,SAAAA,EACAu2B,oBAAAA,EACAyB,gBAAAA,EACAC,cAAAA,EACAzB,cAAAA,MAEA,MAAM35B,GAAOC,EAAAA,EAAAA,MAENo7B,EAAmBC,IAAwB53B,EAAAA,EAAAA,KAAS,IACpD63B,EAAwBC,IAA6B93B,EAAAA,EAAAA,KAAS,IAC9Dsc,EAAOyb,IAAY/3B,EAAAA,EAAAA,OAEnBiP,EAAO+oB,IAAYh4B,EAAAA,EAAAA,OACnBi3B,EAAWgB,IAAgBj4B,EAAAA,EAAAA,IAASk3B,GAAoB,KACxDC,EAAUe,IAAel4B,EAAAA,EAAAA,IAASo3B,GAAmB,KACrDE,EAAKa,IAAUn4B,EAAAA,EAAAA,IAASu3B,GAAc,KACtCvI,EAAUkH,IAAel2B,EAAAA,EAAAA,IAAyB81B,GAAmB,IAEtEsC,GAAuB/mB,EAAAA,EAAAA,GAASmmB,GAAmB,EAAOlmB,EAAAA,GAAAA,SAE1Dgf,EAAY7wB,IAAa44B,EAAAA,GAAAA,WACzBC,GAA+B,IAAbtJ,EAElBuJ,GAAoBh6B,EAAAA,EAAAA,KAAQ,KAC5B+5B,IAIGzyB,QAAQoJ,IAAU4oB,IAAkD,IAAxB7B,IAClD,CAAC/mB,EAAO4oB,EAAwBS,EAAiBtC,KAEpDxd,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,cAIlD/0B,EAAAA,EAAAA,KAAU,KACRyqB,IAAa,KACX+M,SAED,CAACA,KAEJx3B,EAAAA,EAAAA,KAAU,KACR+3B,OAASn5B,KACR,CAACu5B,KAEJn4B,EAAAA,EAAAA,KAAU,KACRg4B,EAAaf,GAAoB,IACjCgB,EAAYd,GAAmB,IAC/Be,EAAOZ,GAAc,MACpB,CAACL,EAAkBE,EAAiBG,KAEvCt3B,EAAAA,EAAAA,KAAU,KACRi2B,EAAYJ,GAAmB,MAC9B,CAACA,KAEJ71B,EAAAA,EAAAA,KAAU,KACJR,IAAa44B,EAAAA,GAAAA,WACfP,GAA0B,GAC1BF,GAAqB,GACrBG,OAASl5B,MAEV,CAACY,IAEJ,MAAM+4B,GAAoBn8B,EAAAA,EAAAA,KAAao8B,IACrCT,EAASS,KACR,IAEGC,GAAwBr8B,EAAAA,EAAAA,KAAayE,IACzCm3B,EAAan3B,EAAEiJ,OAAOJ,OACtBmuB,GAA0B,KACzB,IAEGa,GAAuBt8B,EAAAA,EAAAA,KAAayE,IACxCo3B,EAAYp3B,EAAEiJ,OAAOJ,OACrBmuB,GAA0B,KACzB,IAEGc,GAAkBv8B,EAAAA,EAAAA,KAAayE,IACnCq3B,EAAOr3B,EAAEiJ,OAAOJ,OAChBmuB,GAA0B,KACzB,IAEGvB,GAAuBl6B,EAAAA,EAAAA,KAAasN,IACxCusB,EAAYvsB,GACZiuB,GAAqB,KACpB,IAEGiB,GAAoBx8B,EAAAA,EAAAA,KAAY,KACpC,MAAMy8B,EAAmB7B,EAAUR,OAC7BsC,EAAkB5B,EAASV,OAC3BuC,EAAa1B,EAAIb,OAElBqC,EAAiB99B,OAKlBg+B,EAAWh+B,OA/GI,GAgHjB+8B,EAAShB,IAIXW,EAAc,CACZzoB,MAAAA,KACI4oB,GAA0B,CAC5BZ,UAAW6B,EACX3B,SAAU4B,EACVzB,IAAK0B,MAEHrB,GAAqB,CACvB3I,SAAAA,KAjBF+I,EAASjB,MAoBV,CACD7nB,EACAgoB,EAAWE,EAAUG,EAAKO,EAC1B7I,EAAU2I,EACVD,IAGF,OACE,0BAAKh7B,UAAU,wBACb,0BAAKA,UAAU,kCACb,0BAAKA,UAAU,yBACb,mBAACu8B,GAAA,EAAD,CACEb,qBAAsBA,EACtBvuB,SAAU2uB,EACVzb,MAAM,0BACNtT,SAAU6mB,IAEZ,mBAACxW,GAAA,EAAD,CACEnQ,MAAOstB,EACPptB,SAAU6uB,EACVzR,MAAO3qB,EAAK,aACZmN,SAAU6mB,EACVhU,MAAOA,IAAUwa,GAA2Bxa,OAAQzd,IAEtD,mBAACib,GAAA,EAAD,CACEnQ,MAAOwtB,EACPttB,SAAU8uB,EACV1R,MAAO3qB,EAAK,YACZmN,SAAU6mB,IAEZ,mBAACxW,GAAA,EAAD,CACEnQ,MAAO2tB,EACPztB,SAAU+uB,EACV3R,MAAO3qB,EAAK,WACZmN,SAAU6mB,EACVhU,MAAOA,IAAUya,GAAqBza,OAAQzd,IAGhD,wBAAGnC,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,IAChE3B,EAAAA,EAAAA,GAAWZ,EAAK,0BAA2B,CAAC,KAAM,sBAIvD,0BAAKI,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,aAEhF,mBAAC48B,GAAD,CACEpD,gBAAiB9G,GAAY,GAC7BsB,UAAWA,EACX0F,oBAAqBA,EACrBC,cAAeA,EACfpsB,SAAU0sB,IAGZ,wBAAG75B,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,IAChE3B,EAAAA,EAAAA,GAAWZ,EAAK,gBAAiB,CAAC,KAAM,qBAE1C0yB,GACC,wBAAGtyB,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChEvC,EAAK,qBAAqB,8BAC3B,2BAAMI,UAAU,iBAAhB,gBAA8CsyB,MAMtD,mBAACmK,GAAA,EAAD,CACEjwB,QAASqvB,EACT57B,QAASk8B,EACTpvB,SAAU6mB,EACVxxB,UAAU,gBAETwxB,EACC,mBAAC/iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,qB,0BC/MvB,MAqIA,IAAeW,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQY,EAAAA,EAAAA,IAAKZ,EAAOwS,SAASC,MAAO,CACjC,+BACA,iCACA,2BACA,6BACA,+BACA,iCACA,2BACA,6BACA,8BACA,gCACA,0BACA,4BACA,kBACA,oBACA,4BAGJ,CAAC/R,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,sBArBgBZ,EArImD,EACrEid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAiO,6BAAAA,EACAC,+BAAAA,EACAC,yBAAAA,EACAC,2BAAAA,EACAC,6BAAAA,EACAC,+BAAAA,EACAC,yBAAAA,EACAC,2BAAAA,EACAC,4BAAAA,EACAC,8BAAAA,EACAC,wBAAAA,EACAC,0BAAAA,EACAC,gBAAAA,EACAC,kBAAAA,EACAC,sBAAAA,EACAC,iBAAAA,MAEA,MAAM79B,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,SAElD,MAAMoF,GAAyB/9B,EAAAA,EAAAA,KAAasN,GACnCrN,EAAK,4BAA6BA,EAAK,cAAe+iB,OAAOgb,EAAAA,GAAgC1wB,IAAS,OAC5G,CAACrN,IAEEg+B,GAAuBj+B,EAAAA,EAAAA,KAAasN,IACxCwwB,EAAiB,CAAED,sBAAuBG,EAAAA,GAAgC1wB,OACzE,CAACwwB,IAmBJ,SAASI,EACPxd,EACAlgB,EACA29B,EACAC,EACAC,EACAC,GAEA,OACE,0BAAKj+B,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYke,GAE3E,mBAAC6d,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,iCACZu+B,QAASL,EACTM,QAAUC,GAAcZ,EAAiB,CAAE,CAAE,cAAat9B,iBAAoBk+B,MAEhF,mBAACH,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,qCACZu+B,QAASJ,EACTK,QAAUC,GAAcZ,EAAiB,CAAE,CAAE,cAAat9B,mBAAsBk+B,MAElF,mBAACH,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,mCACZu+B,QAASH,EACTI,QAAUC,GAAcZ,EAAiB,CAAE,CAAE,cAAat9B,aAAgBk+B,MAE5E,mBAACH,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,iCACZu+B,QAASF,EACTG,QAAUC,GAAcZ,EAAiB,CAAE,CAAE,cAAat9B,eAAkBk+B,MAGrE,SAARl+B,GAlDP,WACE,MAAM8M,EAAQ0wB,EAAAA,GAAAA,QAAwCH,GAEtD,OACE,0BAAKx9B,UAAU,QACb,mBAACs+B,GAAA,EAAD,CACE/T,MAAO3qB,EAAK,2BACZoH,IAAK,EACLD,IAAK,EACLkG,OAAkB,IAAXA,EAAeA,EAAQ,EAC9BsxB,YAAab,EACbvwB,SAAUywB,KAuCOY,IAKzB,OACE,0BAAKx+B,UAAU,kCACZ69B,EACCj+B,EAAK,2BACL,QACA88B,EACAC,EACAC,EACAC,GAEDgB,EACCj+B,EAAK,2BACL,QACAk9B,EACAC,EACAC,EACAC,GAEDY,EACC,sBACA,OACAX,EACAC,EACAC,EACAC,GAGF,0BAAKr9B,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,kBAEhF,mBAACs+B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,YACZu+B,QAASb,EACTc,QAAUC,GAAcZ,EAAiB,CAAEH,gBAAiBe,MAE9D,mBAACH,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,kCACZu+B,QAASZ,EACTa,QAAUC,GAAcZ,EAAiB,CAAEF,kBAAmBc,Y,0BC7HxE,MAAMI,IAAiC36B,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAO,GAyLrE,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEyf,OAASC,KAAMC,GACfgQ,OAASjQ,KAAMgQ,IACb1vB,GAGF+/B,WAAYC,EACZtgB,KAAMugB,EACNC,YAAaC,GACXngC,EAAOogC,YAEX,MAAO,CACLzgB,UAAAA,EACA+P,UAAAA,EACAsQ,iBAAAA,EACAC,YAAAA,EACAE,uBAAAA,EACAE,gBAAgB9R,EAAAA,EAAAA,IAAqBvuB,GACrCsgC,kBAAkB9R,EAAAA,EAAAA,IAAuBxuB,OAG7C,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,6BAA8B,gBAAiB,gBAvBnFZ,EArLmD,EACrEwgC,eAAAA,EACAC,aAAAA,EACAxjB,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAnQ,UAAAA,EACA+P,UAAAA,EACAsQ,iBAAAA,EACAC,YAAAA,EACAE,uBAAAA,EACAE,eAAAA,EACAC,iBAAAA,EACAG,2BAAAA,EACAC,cAAAA,EACAC,WAAAA,MAEA,MAAOC,EAAeC,IAAoBl8B,EAAAA,EAAAA,OACnCm8B,EAAmBC,IAAwBp8B,EAAAA,EAAAA,KAAS,GACrDq8B,GAAsBhgC,EAAAA,EAAAA,KAAY,IAAM+/B,GAAqB,IAAO,KAE1En8B,EAAAA,EAAAA,KAAU,KACHg8B,IACHK,EAAAA,GAAAA,GAAiB,cAAcC,KAAKL,KAErC,CAACD,KAIJh8B,EAAAA,EAAAA,KAAU,KACRk7B,IAA+B,KAC7BW,SAED,CAACA,IAEJ,MAAMU,GAAqBngC,EAAAA,EAAAA,KAAY,KACjC/B,OAAOi4B,KAAK+I,GAAatgC,QAtCL,GAuCtBghC,EAAW,CACTS,KAAM,CACJ/hC,QAAS,0BACT8hB,aAAa,KAOnBof,MACC,CAACN,EAAaU,EAAYJ,IAEvBt/B,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,SAElD,MAAM0H,GAAcn+B,EAAAA,EAAAA,KAAQ,KAC1B,IAAK88B,EACH,OAGF,MAAMzf,EAAUthB,OAAOi4B,KAAKvX,GAE5B,OAAOqgB,EAAiB9gB,KAAKzgB,IAC3B,MAAM6iC,EAASrB,EAAYxhC,GAE3B,MAAO,CACLA,GAAI6iC,EAAO7iC,GACXijB,MAAO4f,EAAO5f,MACd6f,UAAUC,EAAAA,EAAAA,IACRvgC,EAAM0e,EAAW+P,EAAW4R,EAAQ/gB,EAAS8f,EAAgBC,SAIlE,CAACN,EAAkBrgB,EAAWsgB,EAAavQ,EAAW2Q,EAAgBC,EAAkBr/B,IAErFwgC,GAAoCzgC,EAAAA,EAAAA,KAAasgC,IACjDriC,OAAOi4B,KAAK+I,GAAatgC,QA7EL,GA8EtBghC,EAAW,CACTS,KAAM,CACJ/hC,QAAS,0BACT8hB,aAAa,KAOnBuf,EAAc,CAAEY,OAAAA,MACf,CAACrB,EAAaS,EAAeC,IAEhC,OACE,0BAAKt/B,UAAU,kCACb,0BAAKA,UAAU,2BACb,0BAAKA,UAAU,yBACZu/B,GACC,mBAACc,GAAA,EAAD,CACEjjC,GAAG,sBACHgD,KAAMkgC,EAAAA,GACNf,cAAeA,EACfgB,KAAMd,EACNe,QAAM,EACNC,OAAQd,KAKd,wBAAG3/B,UAAU,iCAAiCO,IAAI,QAC/CX,EAAK,wBAGR,mBAACoC,EAAA,EAAD,CAEEhC,UAAU,iBACVkC,MAAM,UACN9B,KAAK,UACLsgC,MAAI,EACJC,OAAK,EACL1gC,QAAS6/B,EACT9jB,MAAOpc,EAAKoc,OAEZ,wBAAGhc,UAAU,aACZJ,EAAK,qBAIV,0BAAKI,UAAU,sBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,YAEpFogC,MAAAA,GAAAA,EAAa1hC,OAAS0hC,EAAYniB,KAAKoiB,GACtC,mBAACniB,GAAA,EAAD,CACE9d,UAAU,eACV4gC,QAAM,EACNC,WAAS,EACT5gC,QAAS,IAAMk/B,EAAaP,EAAYqB,EAAO7iC,MAE/C,2BAAM4C,UAAU,SAASigC,EAAO5f,OAChC,2BAAMrgB,UAAU,YAAYigC,EAAOC,aAElCF,IAAgBA,EAAY1hC,OAC/B,wBAAG0B,UAAU,iCAAiCO,IAAI,QAAlD,4BAGE,mBAAC4d,GAAA,EAAD,OAGJ2gB,KAA4BA,EAAuBxgC,QACnD,0BAAK0B,UAAU,sBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjEvC,EAAK,sBAGPk/B,EAAuBjhB,KAAKoiB,GAC3B,mBAACniB,GAAA,EAAD,CACE9d,UAAU,OACV4gC,QAAM,EACN3gC,QAAS,IAAMmgC,EAAkCH,IAEjD,0BAAKjgC,UAAU,qCACb,0BAAKA,UAAU,kBACb,2BAAMA,UAAU,SAASigC,EAAO5f,OAChC,2BAAMrgB,UAAU,YAAYigC,EAAOjW,cAGrC,mBAAChoB,EAAA,EAAD,CACEhC,UAAU,OACVkC,MAAM,UACN9B,KAAK,OACLsgC,MAAI,EACJC,OAAK,EACL3kB,MAAOpc,EAAKoc,OAEXpc,EAAK,kB,eCzMxB,MAyBA,GAzBqC,EACnCkhC,MAAAA,EACAC,SAAAA,EACAC,eAAAA,EACApN,UAAAA,EACA3zB,QAAAA,MAEA,MAAML,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACmC,EAAA,EAAD,CACEhC,UAAU,iBACVkC,MAAM,cACN9B,KAAK,UACLsgB,QAAM,EACNkT,UAAWA,EACX5X,MAAOpc,EAAKoc,MACZ/b,QAASA,GAET,wBAAGD,UAAU,cATf,QAUQ8gC,EAVR,SAUqBA,EAAQ,EAAIE,GAAmB,GAAED,KAAcA,ICiBlEE,GAAiB,0CACjBC,GAAiB,8BAqQvB,IAAevgC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAE4f,GAAY5f,EAAOyf,MAE3B,MAAO,CACL+iB,oBAAqB5iB,EAAQG,OAC7B0iB,sBAAuB7iB,EAAQM,aAGnC,CAACxf,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,iBAAkB,gBAAiB,mBATvEZ,EAnQmD,EACrEw4B,MAAAA,EACAmK,SAAAA,EACAC,mBAAAA,EACAC,mBAAAA,EACA5lB,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACA+S,OAAAA,EACAL,oBAAAA,EACAC,sBAAAA,EACAK,eAAAA,EACApC,cAAAA,EACArgB,cAAAA,MAEA,MAAOugB,EAAeC,IAAoBl8B,EAAAA,EAAAA,OACnCm8B,EAAmBC,IAAwBp8B,EAAAA,EAAAA,KAAS,GACrDq8B,GAAsBhgC,EAAAA,EAAAA,KAAY,IAAM+/B,GAAqB,IAAO,KAEnEgC,EAA6BC,IAAkCr+B,EAAAA,EAAAA,KAAS,IACxEs+B,EAA6BC,IAAkCv+B,EAAAA,EAAAA,KAAS,IAG7Ew+B,gBAAiBC,EACjBC,kBAAmBC,IACjBC,EAAAA,GAAAA,IAAkBhL,EAAO,aAE3B4K,gBAAiBK,EACjBH,kBAAmBI,IACjBF,EAAAA,GAAAA,IAAkBhL,EAAO,aAE7B3zB,EAAAA,EAAAA,KAAU,KACHg8B,IACHK,EAAAA,GAAAA,GAAiB,cAAcC,KAAKL,KAErC,CAACD,KAEJh8B,EAAAA,EAAAA,KAAU,KACRo+B,GAA+B,GAC/BE,GAA+B,KAC9B,CAAC3K,EAAMmL,WAEV,MAAOC,EAAwBC,IAA0B1gC,EAAAA,EAAAA,KAAQ,KAC/D,MAAM2gC,EAAoB,IAAIC,IAAI,IAC5BtB,GAAuB,MACvBC,GAAyB,KAGzBsB,GAAwBC,EAAAA,EAAAA,IAAwBZ,EAAiBS,GACjEI,GAAwBD,EAAAA,EAAAA,IAAwBR,EAAiBK,GAEvE,MAAO,CACLd,EACIgB,EACAA,EAAsB/M,MAAM,EA3DV,EA2DmCsM,EAAkB3jC,QAC3EsjC,EACIgB,EACAA,EAAsBjN,MAAM,EA9DV,EA8DmCyM,EAAkB9jC,WAE5E,CACD6jC,EAAiBJ,EAAiBE,EAAmBG,EACrDR,EAA6BF,EAC7BP,EAAqBC,KAGvB79B,EAAAA,EAAAA,KAAU,MAEN++B,EAAuBhkC,OAASyjC,EAAgBzjC,QAC7CikC,EAAuBjkC,OAAS6jC,EAAgB7jC,SAEnD0gB,EAAc,CAAE6jB,SAAU,aAE3B,CACD7jB,EACAmjB,EAAgB7jC,OAChByjC,EAAgBzjC,OAChBikC,EAAuBjkC,OACvBgkC,EAAuBhkC,SAGzB,MAAMsB,GAAOC,EAAAA,EAAAA,KA0Db,SAASijC,EAAYC,GACnB,MAAMf,EAA6B,aAATe,EAAsBd,EAAoBG,EAC9DY,EAA0B,aAATD,EAAsBT,EAAyBC,EAEhEU,EAAsB,aAATF,EAAsBrB,EAA8BE,EAEjEsB,GADsB,aAATH,EAAsBhB,EAAkBI,GACzB7jC,OAAS0jC,EAAkB1jC,OAAS0kC,EAAe1kC,OAC/E6kC,EAAwB,aAATJ,EACjB,IAAMpB,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACE,sCACGG,EAAkBnkB,KAAK1d,GAnC9B,SAAwBA,EAAa4iC,GACnC,MAAMK,EAAoB,aAATL,EACbM,GAAAA,GAAAA,MAAyB,EAAGljC,IAAKmjC,KAAcA,IAAYnjC,IAC3DojC,GAAAA,GAAAA,MAAyB,EAAGpjC,IAAKmjC,KAAcA,IAAYnjC,IAE/D,GAAKijC,EAIL,OACE,mBAACtlB,GAAA,EAAD,CACE3d,IAAKijC,EAASjjC,IACdH,UAAU,kCACV0C,KAAM0gC,EAAS1gC,KACfk+B,QAAM,EACN4C,UAAQ,GAEP5jC,EAAKwjC,EAAS/iB,QAkBiBojB,CAAetjC,EAAK4iC,KACnDC,EAAenlB,KAAKzgB,GACnB,mBAAC0gB,GAAA,EAAD,CACE9d,UAAU,kCACV4gC,QAAM,EACN4C,UAAQ,IAEPxkC,EAAAA,EAAAA,IAAS5B,GACR,mBAAC2gB,GAAA,EAAD,CAAiB+P,WAAW,QAAQ7P,OAAQ7gB,IAE5C,mBAAC8gB,GAAA,EAAD,CAAe4P,WAAW,QAAQlvB,OAAQxB,QAI7C6lC,GAAcC,EAAiB,GAChC,mBAAC,GAAD,CACEpC,MAAOoC,EACPnC,SAAS,OACT9gC,QAASkjC,KAOnB,OA9FArnB,EAAAA,EAAAA,IAAeH,EAAU6lB,EAAQ9J,EAA+B,SAAfR,EAAM6L,KACnDzK,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBA6FF,0BAAKt4B,UAAU,wBACb,0BAAKA,UAAU,kCACb,0BAAKA,UAAU,2BACb,0BAAKA,UAAU,yBACZu/B,GACC,mBAACc,GAAA,EAAD,CACEjjC,GAAG,sBACHgD,KAAMkgC,EAAAA,GACNf,cAAeA,EACfgB,KAAMd,GAAqB9c,OAAOuU,EAAMmL,UACxC7B,QAAM,EACNC,OAAQd,KAKE,WAAfzI,EAAM6L,MACL,wBAAG/iC,UAAU,iCAAiCO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACrEvC,EAAK,sBAIV,mBAACwd,GAAA,EAAD,CACEpd,UAAU,OACVuqB,MAAO3qB,EAAK,kBACZqN,MAAOiqB,EAAM+I,OAAO5f,MACpBlT,SArHV,SAAsBu2B,GACpB,MAAM,cAAEv4B,GAAkBu4B,EAC1BrC,EAAS,CAAEn0B,KAAM,WAAYkqB,QAASjsB,EAAc8B,MAAM8sB,UAoHlDna,MAAOsX,EAAMtX,OAASsX,EAAMtX,QAAUqhB,GAAiBA,QAAiB9+B,KAI5E,0BAAKnC,UAAU,gCACZk3B,EAAMtX,OAASsX,EAAMtX,QAAUshB,IAC9B,wBAAGlhC,UAAU,8CAA8CO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAClFvC,EAAKs3B,EAAMtX,QAIhB,yBAAI5f,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,kBAErF,mBAACke,GAAA,EAAD,CACE9d,UAAU,gDACV0C,KAAK,MACLzC,QAASqhC,GAER1hC,EAAK,mBAGPkjC,EAAY,aAGf,0BAAK9iC,UAAU,gCACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,kBAErF,mBAACke,GAAA,EAAD,CACE9d,UAAU,gDACV0C,KAAK,MACLzC,QAASshC,GAER3hC,EAAK,mBAGPkjC,EAAY,cAIjB,mBAACrG,GAAA,EAAD,CACEjwB,UAAW0qB,EAAMyM,UACjB52B,SAAUmqB,EAAMtD,UAChB3zB,QA3JN,WACE,MAAM,MAAEogB,GAAU6W,EAAM+I,OAEnB5f,EAKA0hB,EAAgBzjC,QAAWV,OAAOi4B,KAAKoM,GAAmB3jC,QAK/D+iC,EAAS,CAAEn0B,KAAM,eAAgBkqB,SAAS,IACvB,SAAfF,EAAM6L,KACRtB,EAAe,CAAErkC,GAAI85B,EAAMmL,SAAUuB,aAAc1M,EAAM+I,SAEzDZ,EAAc,CAAEY,OAAQ/I,EAAM+I,SAGhC95B,YAAW,KACTsoB,MAvHiB,MA2GjB4S,EAAS,CAAEn0B,KAAM,WAAYkqB,QAAS8J,KALtCG,EAAS,CAAEn0B,KAAM,WAAYkqB,QAAS6J,MAwJpC7+B,UAA0B,SAAf80B,EAAM6L,KAAkB,eAAiB,iBAEnD7L,EAAMtD,UACL,mBAAC/iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,qBC3FvB,IAAeW,EAAAA,EAAAA,KA7KkC,EAC/CoiC,KAAAA,EACA7jB,QAAAA,EACA2kB,YAAAA,EACA7B,kBAAAA,EACA8B,YAAAA,EACAC,oBAAAA,EACAC,0BAAAA,EACAvnB,eAAAA,EACAkB,WAAAA,MAGA,MAAM/Q,GAAW5G,EAAAA,EAAAA,IAAyB,MACpCi+B,EAAqB,aAATlB,EAAsBM,GAAAA,GAAsBE,GAAAA,GACxDW,EAAiBL,EAAYvlC,OAAS0jC,EAAkB1jC,OAjBzC,GAkBf6lC,EAAcN,EAAYvlC,QAnBhB,KAqBhBiF,EAAAA,EAAAA,KAAU,KACR4C,YAAW,KACT0S,uBAAsB,KACpBjM,EAASpG,QAAS49B,aA1BH,OA6BlB,IAEH,MAAMC,GAAkB1kC,EAAAA,EAAAA,KAAavC,IACnC,MAAMknC,EAAiB,IAAIT,GACvBS,EAAejnC,SAASD,GAC1BknC,EAAeC,OAAOD,EAAe/wB,QAAQnW,GAAK,GAElDknC,EAAe/e,KAAKnoB,GAEtB2mC,EAAoBO,KACnB,CAACT,EAAaE,IAEXS,GAAsB7kC,EAAAA,EAAAA,KAAaQ,IACvC,MAAMskC,EAAuB,IAAIzC,GAC7ByC,EAAqBpnC,SAAS8C,GAChCskC,EAAqBF,OAAOE,EAAqBlxB,QAAQpT,GAAM,GAE/DskC,EAAqBlf,KAAKplB,GAE5B6jC,EAA0BS,KACzB,CAACzC,EAAmBgC,IAEjB/mB,GAAqBtd,EAAAA,EAAAA,KAAayE,IACtC,MAAM,MAAE6I,GAAU7I,EAAE+G,cACpBsR,EAAexP,KACd,CAACwP,IAEE7c,GAAOC,EAAAA,EAAAA,MAgEN+c,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBa,EAAYuB,EAAS/V,QAAQ26B,IAE9E,OACE,0BAAK9jC,UAAU,qCACb,0BAAKA,UAAU,+BACZgiC,EAAkBnkB,KAnEzB,SAAgC1d,GAC9B,MAAMukC,EAAeT,EAAUU,MAAK,EAAGxkC,IAAKmjC,KAAcnjC,IAAQmjC,IAClE,GAAKoB,EAIL,OACE,mBAACxR,GAAA,EAAD,CACExwB,KAAMgiC,EAAahiC,KACnB2d,MAAOzgB,EAAK8kC,EAAarkB,OACzBukB,YAAaV,EACbW,UAAQ,EACR5kC,QAASukC,EACTpR,SAAUsR,EAAavkC,SAuDtB0jC,EAAYhmB,KAAI,CAACzgB,EAAIkoB,IACpB,mBAAC4N,GAAA,EAAD,CACEC,aAAc/1B,EACdwnC,YAAaV,GAAkB5e,EAAIue,EAAYvlC,OA7H3B,EA8HpBumC,UAAQ,EACR5kC,QAASokC,EACTjR,SAAUh2B,MAGZ+mC,EAQA,wBAAGnkC,UAAU,oBAAoBO,IAAI,QACjC,6CARJ,mBAAC6c,GAAA,EAAD,CACEzV,IAAKiF,EACLK,MAAO62B,EACP32B,SAAU8P,EACVK,YAAa1d,EAAK,aAQxB,mBAAC6d,GAAA,EAAD,CACEzd,UAAU,4BACVq0B,aAAa,aACb3W,MAAOd,EACPe,WAAYd,KAETD,IAAgBA,EAAYte,QAAUse,EAAYvf,SAAS6hB,EAAQ,MACpE,sCACE,yBAAI/e,IAAI,UAAUH,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC1EvC,EAAK,oBAEPqkC,EAAUpmB,KAnFrB,SAAwB3Q,GACtB,OACE,mBAAC4Q,GAAA,EAAD,CACE3d,IAAK+M,EAAK/M,IACVH,UAAU,sDACVC,QAAS,IAAMukC,EAAoBt3B,EAAK/M,KACxC0H,QAAM,GAEN,wBAAG7H,UAAY,QAAOkN,EAAKxK,SAC3B,yBAAI1C,UAAU,YAAYO,IAAI,QAAQX,EAAKsN,EAAKmT,QAChD,mBAAC6d,GAAA,EAAD,CACE3T,MAAM,GACN4T,QAAS6D,EAAkB3kC,SAAS6P,EAAK/M,KACzC8B,OAAK,QAuEH,0BAAK9B,IAAI,UAAUH,UAAU,wBAC7B,yBAAIG,IAAI,UAAUH,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC1EvC,EAAK,iBAKXgd,MAAAA,GAAAA,EAAate,OACZse,EAAYiB,KAzEpB,SAAoBzgB,GAClB,MAAM0nC,EAAajB,EAAYxmC,SAASD,GAExC,OACE,mBAAC0gB,GAAA,EAAD,CACE3d,IAAK/C,EACL4C,UAAU,iDACVC,QAAS,IAAMokC,EAAgBjnC,GAC/ByK,QAAM,EACNkF,UAAW+3B,GAAcX,IAExBnlC,EAAAA,EAAAA,IAAS5B,GACR,mBAAC2gB,GAAA,EAAD,CAAiBE,OAAQ7gB,IAEzB,mBAAC8gB,GAAA,EAAD,CAAetf,OAAQxB,EAAI2nC,cAAY,IAEzC,mBAAC7G,GAAA,EAAD,CACE3T,MAAM,GACN4T,QAAS2G,EACT7iC,OAAK,QAuDH2a,IAAgBA,EAAYte,OAC9B,wBAAG0B,UAAU,aAAaG,IAAI,cAA9B,yBAEA,mBAACge,GAAA,EAAD,CAAShe,IAAI,iBC9CvB,IAAeQ,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEyf,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,IAEA7f,EAEJ,MAAO,CACL2f,UAAAA,EACAC,QAASA,EAAQG,OACjBF,iBAAkBA,EAAiBE,OACnCsmB,kBAAmBxmB,EAAiBK,SACpCD,gBAAiBL,EAAQM,aAG7B,CAACxf,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAlBpCZ,EAzH0D,EAC5Eid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAsU,KAAAA,EACA7L,MAAAA,EACAmK,SAAAA,EACA/iB,UAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAI,gBAAAA,EACAomB,kBAAAA,EACAhmB,cAAAA,MAEA,MAAM,WAAEimB,GAAe/N,GACjB,gBAAE4K,EAAF,kBAAmBE,IAAsBE,EAAAA,GAAAA,IAAkBhL,EAAO6L,GAAM,GAExEnjC,GAAOC,EAAAA,EAAAA,KACPue,GAAQvc,EAAAA,EAAAA,KAAQ,KACpB,MAAMqjC,EAAmB3mB,GACrB4mB,EAAAA,EAAAA,GAAgB7mB,EAAWC,EAASC,EAAkB,YACtDrc,EACEijC,EAAqBxmB,GACvBumB,EAAAA,EAAAA,GAAgB7mB,EAAWM,EAAiBomB,EAAmB,iBAC/D7iC,EAEJ,GAAK+iC,GAAqBE,EAI1B,MAAO,IACDF,EACA,IAAIA,EAAiBG,eAAgBH,EAAiBI,YACtD,MAEAF,EAAqBA,EAAmBE,WAAa,MAE1D,CAAChnB,EAAWC,EAASC,EAAkBI,EAAiBomB,IAErDO,GAAe1jC,EAAAA,EAAAA,KAAQ,KAC3B,GAAKuc,EAIL,OAAOA,EACJ7B,QAAQjc,IACN2kC,IACEzlB,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAa7f,EAAMU,GAAO2kC,IACtCnD,EAAgBzkC,SAASiD,EAAKlD,MAElCygB,KAAI,EAAGzgB,GAAAA,KAASA,MAClB,CAACghB,EAAO6mB,EAAYrlC,EAAMkiC,IAEvB7kB,GAAqBtd,EAAAA,EAAAA,KAAa6lC,IACtCnE,EAAS,CACPn0B,KAAM,gBACNkqB,QAASoO,MAEV,CAACnE,IAEEoE,GAA0B9lC,EAAAA,EAAAA,KAAa+lC,IAEzCrE,EADW,aAAT0B,EACO,CACP71B,KAAM,oBACNkqB,QAAS,IAAKF,EAAMyO,eAAgB5D,gBAAiB2D,IAG9C,CACPx4B,KAAM,oBACNkqB,QAAS,IAAKF,EAAM0O,eAAgBzD,gBAAiBuD,OAGxD,CAAC3C,EAAM7L,EAAOmK,IAEXwE,GAAgClmC,EAAAA,EAAAA,KAAak2B,IACjD,MAAMiQ,EAAsC,GAC5CjQ,EAAKkQ,SAAS5lC,IACZ2lC,EAAW3lC,IAAO,KAIlBkhC,EADW,aAAT0B,EACO,CACP71B,KAAM,oBACNkqB,QAAS,CACP2K,gBAAiBD,KACdgE,IAIE,CACP54B,KAAM,oBACNkqB,QAAS,CACP+K,gBAAiBL,KACdgE,OAIR,CAAC/C,EAAMjB,EAAiBT,IAK3B,OAHAvlB,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EACvB,aAATqL,EAAsBzK,EAAAA,GAAAA,qBAAuCA,EAAAA,GAAAA,sBAE1DiN,EAKH,mBAAC,GAAD,CACExC,KAAMA,EACN7jB,QAASqmB,EACT1B,YAAa/B,EACbE,kBAAmBA,EACnB8B,YAAamB,EACblB,oBAAqB0B,EACrBzB,0BAA2B6B,EAC3BppB,eAAgBQ,EAChBU,WAAYqB,IAbP,mBAACb,GAAA,EAAD,UCKX,IAAexd,EAAAA,EAAAA,KA9HuB,EACpC02B,cAAAA,EACA2O,YAAAA,EACA9O,MAAAA,EACAmK,SAAAA,EACA1lB,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,MAEA,MAAMwX,GAActmC,EAAAA,EAAAA,KAAY,KAE5B03B,IAAkBiB,EAAAA,GAAAA,qBACfjB,IAAkBiB,EAAAA,GAAAA,mBAClBjB,IAAkBiB,EAAAA,GAAAA,+BAErBnyB,YAAW,KACTk7B,EAAS,CAAEn0B,KAAM,YA5BG,KAiCtBmqB,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,qBAUvB7J,IARqB,WAAfyI,EAAM6L,KACRrL,EAAeY,EAAAA,GAAAA,qBAEfZ,EAAeY,EAAAA,GAAAA,qBAMlB,CACDpB,EAAM6L,KAAM1B,EACZhK,EAAe5I,EAASiJ,IAGpBoI,GAAqBngC,EAAAA,EAAAA,KAAY,KACrC0hC,EAAS,CAAEn0B,KAAM,UACjBwqB,EAAeY,EAAAA,GAAAA,uBACd,CAACZ,EAAgB2J,IAEd6E,GAAmBvmC,EAAAA,EAAAA,KAAasgC,IACpCoB,EAAS,CAAEn0B,KAAM,aAAckqB,QAAS6I,IACxCvI,EAAeY,EAAAA,GAAAA,qBACd,CAAC+I,EAAU3J,IAERyO,GAAyBxmC,EAAAA,EAAAA,KAAY,KACzC0hC,EAAS,CAAEn0B,KAAM,uBACjBwqB,EAAeL,IAAkBiB,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACjB,EAAegK,EAAU3J,IAEvB0O,GAAyBzmC,EAAAA,EAAAA,KAAY,KACzC0hC,EAAS,CAAEn0B,KAAM,uBACjBwqB,EAAeL,IAAkBiB,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACjB,EAAegK,EAAU3J,IAE7B,OAAQL,GACN,KAAKiB,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACE4G,eAAgBY,EAChBX,aAAc+G,EACdxO,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAGf,KAAK6J,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,mBAAC,GAAD,CACEpB,MAAOA,EACPmK,SAAUA,EACVC,mBAAoB6E,EACpB5E,mBAAoB6E,EACpB3X,QAASwX,EACTvO,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXxE,OAAQ/S,IAGd,KAAK6J,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEyK,KAAK,WACL7L,MAAOA,EACPmK,SAAUA,EACV5S,QAASwX,EACTvO,eAAgBA,EAChB/b,SAAUA,IAGhB,KAAK2c,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEyK,KAAK,WACL7L,MAAOA,EACPmK,SAAUA,EACV5S,QAASwX,EACTvO,eAAgBA,EAChB/b,SAAUA,IAIhB,QACE,W,8CC/HN,MAmCA,IAAehb,EAAAA,EAAAA,KAnC+B,EAC5CP,KAAAA,EAAOimC,EAAAA,GACPC,WAAAA,EACAC,oBAAAA,MAGA,MAAM5+B,GAAM3B,EAAAA,EAAAA,IAAuB,MAE7BwgC,GAAiBC,EAAAA,GAAAA,IAAkB9+B,EAAK4+B,GAExCG,EAAa,aAAYJ,EAAWlpC,KACpCupC,GAAahyB,EAAAA,EAAAA,GAAS+xB,GAAYF,EAAgB5xB,EAAAA,GAAAA,QAClDrK,GAAuBq8B,EAAAA,GAAAA,GAAmBD,GAE1CE,GAAehlC,EAAAA,EAAAA,KAAQ,KAC3B,IAAI8kC,EAEJ,OAAOG,EAAAA,GAAAA,IAAgBR,EAAWjmB,MAAO,KACxC,CAACsmB,EAAYL,EAAWjmB,QAE3B,OACE,0BAAK1Y,IAAKA,EAAK3H,UAAU,qBACtB6mC,EACAF,GACC,mBAACtG,GAAA,EAAD,CACEjjC,GAAIspC,EACJtmC,KAAMA,EACNm/B,cAAeoH,EACf3mC,UAAWuK,QCTrB,IAAe5J,EAAAA,EAAAA,KAvBuB,EAAG2lC,WAAAA,EAAYC,oBAAAA,MAEnD,MAAM5+B,GAAM3B,EAAAA,EAAAA,IAAuB,MAE7BwgC,GAAiBC,EAAAA,GAAAA,IAAkB9+B,EAAK4+B,GAExCzlC,GAAY6T,EAAAA,EAAAA,GAAS2xB,EAAWS,cAAiB,aAAYT,EAAWlpC,MAAOopC,GAC/Ej8B,GAAuBq8B,EAAAA,GAAAA,GAAmB9lC,GAE1C+lC,GAAehlC,EAAAA,EAAAA,KAAQ,KAC3B,IAAIf,EAEJ,OAAOgmC,EAAAA,GAAAA,IAAgBR,EAAWjmB,MAAO,KACxC,CAACvf,EAAWwlC,EAAWjmB,QAE1B,OACE,0BAAK1Y,IAAKA,EAAK3H,UAAU,qBACtB6mC,EACD,0BAAKxqC,IAAKyE,EAAWd,UAAWuK,EAAsBoG,IAAI,S,eCXhE,MAmEA,IAAehQ,EAAAA,EAAAA,KAnE0B,EACvC2lC,WAAAA,EACAC,oBAAAA,EACAtmC,QAAAA,MACI,MACJ,MAAML,GAAOC,EAAAA,EAAAA,KAEb,IAAKymC,IAAeA,EAAWU,SAC7B,OAGF,MAAMC,EAAY,UAAGX,EAAWU,gBAAd,aAAG,EAAsB,GAE3C,OAAIV,EAAWS,eAAiBE,EAE5B,mBAACnpB,GAAA,EAAD,CACE8iB,QAAM,EACN5gC,UAAU,qBACVwjC,UAAWyD,EACXhnC,QAAS,IAAMgnC,GAAgBhnC,EAAQgnC,IAEvC,mBAACjlC,EAAA,EAAD,CACEI,UAAWkkC,EAAWjmB,MACtBne,MAAM,cACN8Z,MAAOpc,EAAKoc,OAEXsqB,EAAWY,WACV,mBAAC,GAAD,CACE9mC,KAAM+mC,EAAAA,GACNb,WAAYA,EACZC,oBAAqBA,IAGvB,mBAAC,GAAD,CACED,WAAYA,EACZC,oBAAqBA,KAI3B,0BAAKvmC,UAAU,uBACb,0BAAKA,UAAU,SAASsmC,EAAWjmB,OACnC,0BAAKrgB,UAAU,YAAYJ,EAAK,2BAA4B0mC,EAAWxF,MAAO,QAMlF,mBAAChjB,GAAA,EAAD,CACE8iB,QAAM,EACN5gC,UAAU,qBACVC,QAAS,IAAMA,EAAQgnC,IAEvB,mBAACG,GAAA,EAAD,CACEC,QAASJ,EACT7mC,KAAM+mC,EAAAA,GACN9mB,MAAOimB,EAAWjmB,MAClBkmB,oBAAqBA,IAEvB,0BAAKvmC,UAAU,uBACb,0BAAKA,UAAU,SAASsmC,EAAWjmB,OACnC,0BAAKrgB,UAAU,YAAYJ,EAAK,2BAA4B0mC,EAAWxF,MAAO,W,eCrCxF,MAAMwG,GAA0B,CAC9B,mBACA,gBACA,iBAGIC,GAAsC,CAAC,CAC3Chd,MAAO,UACPtd,MAAO,OACN,CACDsd,MAAO,UACPtd,MAAO,QAoLT,IAAetM,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,KACFY,EAAAA,EAAAA,IAAKZ,EAAOwS,SAASC,MAAO,CAC7B,kBACA,iBACA,sBACA,wBACA,qBACA,qBACA,qBACA,eAEFo2B,cAAe7oC,EAAOqoC,SAASS,MAAMC,OACrCC,gBAAiBhpC,EAAOqoC,SAASY,aAGrC,CAACvoC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,mBAAoB,kBAAmB,uBAlBvBZ,EAjL+C,EACjEid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACA+Y,cAAAA,EACAG,gBAAAA,EACAE,gBAAAA,EACA32B,eAAAA,EACA42B,oBAAAA,EACAC,sBAAAA,EACAC,mBAAAA,EACAC,WAAAA,EACAxK,iBAAAA,EACAyK,gBAAAA,EACAC,kBAAAA,MAGA,MAAMC,GAAqBpiC,EAAAA,EAAAA,IAAuB,OAC1CqiC,QAASC,IAAiCC,EAAAA,GAAAA,IAAwB,CAAEC,QAASJ,KAC9EK,EAAaC,EAAWC,IAAc9kB,EAAAA,GAAAA,MACtCwjB,EAASuB,IAActlC,EAAAA,EAAAA,MAExB1D,GAAOC,EAAAA,EAAAA,KAEPgpC,EAAyBngC,EAAAA,QAO3BvG,EAP0C,CAC5C,CAAE8K,MAAO,QAASsd,MAAO3qB,EAAK,2BAA4BkpC,SAAU,6BACpE,CACE77B,MAAO,aACPsd,MAAO3qB,EAAKmpC,EAAAA,GAAY,6BAA+B,+BACvDD,SAAU,uBAIdvlC,EAAAA,EAAAA,KAAU,KACR2kC,MACC,CAACA,KAEJ3kC,EAAAA,EAAAA,KAAU,KACJikC,MAAAA,GAAAA,EAAelpC,QACjB6pC,MAED,CAACX,EAAeW,IAEnB,MAAMa,GAA6BrpC,EAAAA,EAAAA,KAAaspC,IAC9C3B,GAAwBvB,SAAQ,CAACmD,EAAG5jB,KAClCvpB,SAASsK,KAAKpK,UAAU8Z,OAAQ,mBAAkBuP,IAAK2jB,IAAa3jB,MAGtEmY,EAAiB,CAAEvsB,eAAgB+3B,MAClC,CAACxL,IAEE0L,GAA8BxpC,EAAAA,EAAAA,KAAaypC,IAC/CrtC,SAASstC,gBAAgBvrC,MAAMwrC,YAC7B,uBAAyB,GAAE3mC,KAAKoE,IAAIqiC,EAASzgC,EAAAA,GAAS,GAAK,SAE7D5M,SAASstC,gBAAgBvrC,MAAMwrC,YAAY,wBAA0B,GAAE3mC,KAAKkC,MAAgB,OAAVukC,QAClFrtC,SAASstC,gBAAgBvrC,MAAMwrC,YAAY,sBAAwB,GAAEF,OACrErtC,SAASstC,gBAAgBE,aAAa,yBAA0BH,EAAQt5B,YAExE2tB,EAAiB,CAAEoK,gBAAiBuB,MACnC,CAAC3L,IAEE+L,GAAyB7pC,EAAAA,EAAAA,KAAa8pC,IAC1ChM,EAAiB,CAAEwK,WAAYwB,IAC/BhM,EAAiB,CAAEiM,0BAA0B,KAE7CC,EAAAA,GAAAA,IAAcF,KACb,CAAChM,IAEEmM,GAAwBjqC,EAAAA,EAAAA,KAAasN,IACzC27B,EAAW37B,GACXy7B,MACC,CAACA,IAEEmB,EAAcrC,GAAiBA,EAAc3pB,KAAKzgB,IAAe,MACrE,QAAOuqC,MAAAA,GAAA,UAAAA,EAAkBvqC,UAAlB,UAAuB0sC,gBAAgBnC,EAAgBvqC,MAC7Dmf,OAAsBpT,SAIzB,OAFA2S,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,SAGhD,0BAAKt4B,UAAU,kCACb,0BAAKA,UAAU,sBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,aAEhF,mBAAC0+B,GAAA,EAAD,CACE/T,MAAO3qB,EAAK,YACZoH,IAAK,GACLD,IAAK,GACLkG,MAAO46B,EACP16B,SAAUg8B,IAGZ,mBAACrrB,GAAA,EAAD,CACEpb,KAAK,QACLzC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,wBAE7B14B,EAAK,oBAIV,0BAAKI,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAA/D,eAGA,mBAACqoB,GAAA,EAAD,CACErO,KAAK,aACLsO,QAAS8c,GACT7c,SAAUud,EACV96B,SAAUq8B,KAId,0BAAKxpC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAA/D,mBAGA,wBAAGnC,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAnE,yCAIA,mBAACm8B,GAAA,EAAD,CACE7T,QAAS6c,GACTr6B,MAAOiE,EACP/D,SAAU67B,KAIbH,GACC,0BAAK7oC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,uBAEhF,mBAAC4qB,GAAA,EAAD,CACErO,KAAK,yBACLsO,QAASoe,EACT17B,SAAWF,GAAUwwB,EAAiB,CAAEqK,oBAAqB76B,IAC7Dyd,SAAUod,KAKhB,0BAAK9nC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,qBAEhF,mBAACs+B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,mBACZu+B,QAAS4J,EACT3J,QAAUC,GAAcZ,EAAiB,CAAEsK,sBAAuB1J,MAEpE,mBAACH,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,wBACZu+B,QAAS6J,EACT5J,QAAUC,GAAcZ,EAAiB,CAAEuK,mBAAoB3J,MAGjE,0BAAKr+B,UAAU,OAAO2H,IAAKygC,GACxByB,GAAeA,EAAYhsB,KAAKyoB,GAC/B,mBAAC,GAAD,CACEnmC,IAAKmmC,EAAWlpC,GAChBkpC,WAAYA,EACZC,oBAAqB+B,EACrBroC,QAAS2pC,OAIdvC,GACC,mBAAC,KAAD,CACEtlC,OAAQ0mC,EACRsB,YAAa1C,EACb9+B,QAASogC,UCrOrB,IAAIqB,GAEG,SAASC,GAAsBC,EAAS,IAAKC,EAA8BC,GAAa,GACxFJ,KACHA,GAAejuC,SAASC,cAAc,SACtCguC,GAAaT,aAAa,OAAQ,SAGpCS,GAAaT,aAAa,SAAUW,GAEhCE,EACFJ,GAAaK,gBAAgB,YAE7BL,GAAaT,aAAa,WAAY,YAIxCS,GAAaM,SAAW,KACxBN,GAAa/8B,MAAQ,GACrB+8B,GAAaM,SAAWH,EAExBH,GAAaO,Q,eCPR,SAASC,GAAQC,GACtB,MAAO,CACLC,SAASD,EAAME,UAAU,EAAG,GAAI,IAChCD,SAASD,EAAME,UAAU,EAAG,GAAI,IAChCD,SAASD,EAAME,UAAU,EAAG,GAAI,KAS7B,SAASC,GAAQH,GACtB,MAAMI,EAAKJ,EAAM,GAAG36B,SAAS,IACvBg7B,EAAKL,EAAM,GAAG36B,SAAS,IACvBi7B,EAAKN,EAAM,GAAG36B,SAAS,IAC7B,OAAqB,GAAb+6B,EAAGvsC,OAAc,IAAMusC,EAAKA,IAAoB,GAAbC,EAAGxsC,OAAc,IAAMwsC,EAAKA,IAAoB,GAAbC,EAAGzsC,OAAc,IAAMysC,EAAKA,GAcrG,SAASC,IAASC,EAAGC,EAAGvY,IAC7BsY,GAAK,IACLC,GAAK,IACLvY,GAAK,IAEL,IACIwY,EAAYC,EADZrkC,EAAMpE,KAAKoE,IAAIkkC,EAAGC,EAAGvY,GAAI3rB,EAAMrE,KAAKqE,IAAIikC,EAAGC,EAAGvY,GACvB0Y,EAAYtkC,EAEnCqf,EAAIrf,EAAMC,EAGd,GAFAokC,EAAW,GAAPrkC,EAAW,EAAIqf,EAAIrf,EAEnBA,GAAOC,EACTmkC,EAAI,MACC,CACL,OAAQpkC,GACN,KAAKkkC,EACHE,GAAKD,EAAIvY,GAAKvM,GAAK8kB,EAAIvY,EAAI,EAAI,GAC/B,MACF,KAAKuY,EACHC,GAAKxY,EAAIsY,GAAK7kB,EAAI,EAClB,MACF,KAAKuM,EACHwY,GAAKF,EAAIC,GAAK9kB,EAAI,EAItB+kB,GAAK,EAGP,MAAO,CAACA,EAAGC,EAAGC,GAcT,SAASC,IAASH,EAAGC,EAAGC,IAC7B,IAAIJ,EAAYC,EAAYvY,EAExBrN,EAAI3iB,KAAKkC,MAAU,EAAJsmC,GACfI,EAAQ,EAAJJ,EAAQ7lB,EACZkmB,EAAIH,GAAK,EAAID,GACbK,EAAIJ,GAAK,EAAIE,EAAIH,GACjBM,EAAIL,GAAK,GAAK,EAAIE,GAAKH,GAE3B,OAAQ9lB,EAAI,GACV,KAAK,EACH2lB,EAAII,EACJH,EAAIQ,EACJ/Y,EAAI6Y,EACJ,MACF,KAAK,EACHP,EAAIQ,EACJP,EAAIG,EACJ1Y,EAAI6Y,EACJ,MACF,KAAK,EACHP,EAAIO,EACJN,EAAIG,EACJ1Y,EAAI+Y,EACJ,MACF,KAAK,EACHT,EAAIO,EACJN,EAAIO,EACJ9Y,EAAI0Y,EACJ,MACF,KAAK,EACHJ,EAAIS,EACJR,EAAIM,EACJ7Y,EAAI0Y,EACJ,MACF,KAAK,EACHJ,EAAII,EACJH,EAAIM,EACJ7Y,EAAI8Y,EAIR,MAAO,CACL9oC,KAAKV,MAAU,IAAJgpC,GACXtoC,KAAKV,MAAU,IAAJipC,GACXvoC,KAAKV,MAAU,IAAJ0wB,IAuDR,SAASgZ,GAAgBC,GAC9B,IAAKC,EAAKC,EAAY7+B,GAAS+9B,GAAQY,GAOvC,OALAE,EAAanpC,KAAKqE,IAAI,EAAG8kC,EAAa,IAAO,IAAO,EAAIA,IACxD7+B,EAAQA,EAAQ,GACZtK,KAAKoE,IAAI,EAAW,IAARkG,GACZtK,KAAKoE,IAAI,EAAGpE,KAAKqE,IAAI,EAAG,EAAY,IAARiG,IAExB,QAAa,IAAN4+B,MAA2B,IAAbC,OAA8B,IAAR7+B,U,0BCzKrD,MAiFA,IAAetM,EAAAA,EAAAA,KAjFqB,EAClCorC,UAAAA,EACArY,MAAAA,EACAoR,WAAAA,EACA7kC,QAAAA,MACI,MACJ,MAAM,KAAE+rC,EAAF,SAAQjwC,GAAagwC,EACrBE,EAAkB,YAAWlwC,EAASqB,KACtC6X,EAAelZ,EAAS+Y,eACxBA,GAAiBH,EAAAA,EAAAA,GAAU,GAAEs3B,YAC7BC,GAAWC,EAAAA,GAAAA,GAAa,UAACpwC,EAASqwC,iBAAV,aAAC,EAAoBC,QAASljC,QAAQ2L,IAAiB,IAC/E,qBAAEvK,IAAyBE,EAAAA,EAAAA,GAC/BtB,QAAQ2L,GAAkBG,QAC1B9S,OACAA,EACA,SAEKmqC,EAAeC,IAAoBjpC,EAAAA,EAAAA,KAAS,IAEjDxC,UAAW0rC,EADP,aACkBjrC,IACpBE,EAAAA,EAAAA,GAAyBwqC,GAAiBK,GACxCG,GAAiD,KAA/B9/B,EAAAA,EAAAA,GAAY2/B,IAC5BjiC,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,EAAAA,GACpF6hC,IAAkBE,GAAcR,IAASU,EAAAA,QAC1CvqC,EACAsqC,EACA,QAGIE,GAAc3mC,EAAAA,EAAAA,MACpB2mC,EAAYnmC,QAAUktB,EAEtB,MAAMkZ,GAAejtC,EAAAA,EAAAA,KAAY,KAC/B,WACE,MAAMktC,QAAaC,EAAAA,GAAAA,IAAUN,SACvBO,GAASC,KAAKC,EAAAA,GAAsBN,EAAYnmC,QAAUqmC,GAChE5sC,EAAQ+rC,IAHV,KAKC,CAACQ,EAAWvsC,EAAS+rC,KAExBzoC,EAAAA,EAAAA,KAAU,KACJipC,GACFI,MAED,CAACJ,EAAWI,IAEf,MAAMhf,GAAcjuB,EAAAA,EAAAA,KAAY,KAC1B6sC,EACFI,IAEAL,GAAkBW,IAAeA,MAElC,CAACV,EAAWI,IAET5sC,GAAYmE,EAAAA,EAAAA,GAChB,gBACA2gC,GAAc,YAGhB,OACE,0BAAK9kC,UAAWA,EAAWC,QAAS2tB,GAClC,0BAAK5tB,UAAU,eACb,6BACE2H,IAAKukC,EACLlsC,UAAU,cAEZ,0BACE3D,IAAKyY,GAAkBG,EACvBjV,WAAWmE,EAAAA,EAAAA,GAAe,aAAcoG,GACxCoG,IAAI,KAELrG,GACC,0BAAKtK,WAAWmE,EAAAA,EAAAA,GAAe,oBAAqBqG,IAClD,mBAAC1H,EAAA,EAAD,CAAiBC,SAAUxB,EAActB,QAAS2tB,UCxDxDI,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAO,GA0HnD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM+0B,GAAQC,EAAAA,EAAAA,IAAYh1B,IACpB,WAAEwuC,EAAF,UAAcC,GAAczuC,EAAOwS,SAASk8B,OAAO3Z,IAAU,IAC7D,iBAAE4Z,GAAqB3uC,EAAOwS,SAEpC,MAAO,CACLg8B,WAAAA,EACAC,UAAAA,EACAE,iBAAAA,EACA5Z,MAAAA,MAGJ,CAACr0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,kBAAmB,sBAdrBZ,EAxHyD,EAC3Eid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACA0e,WAAAA,EACAC,UAAAA,EACAE,iBAAAA,EACA5Z,MAAAA,EACA6Z,eAAAA,EACAC,gBAAAA,EACAC,iBAAAA,MAEA,MAAMC,GAAW1nC,EAAAA,EAAAA,MACjB0nC,EAASlnC,QAAUktB,GAGnBnwB,EAAAA,EAAAA,KAAU,KACRyqB,IAAa,KACXuf,SAED,CAACA,IAEJ,MAAMI,GAAmBhuC,EAAAA,EAAAA,KAAayE,IACpC,MAAM,MAAEwpC,GAAUxpC,EAAEiJ,OAEhBugC,GAASA,EAAMtvC,OAAS,GAC1BkvC,EAAgBI,EAAM,MAEvB,CAACJ,IAEEK,GAAwBluC,EAAAA,EAAAA,KAAY,KACxCsqC,GAnCoB,aAmCmB0D,GAAkB,KACxD,CAACA,IAEEG,GAAiBnuC,EAAAA,EAAAA,KAAY,KACjC+3B,EAAeY,EAAAA,GAAAA,8BACd,CAACZ,IAEEqW,GAAuBpuC,EAAAA,EAAAA,KAAY,KACvC8tC,EAAiB,CACf/Z,MAAAA,EACAyZ,gBAAYhrC,EACZ6rC,qBAAiB7rC,EACjBirC,WAAW,EACXa,aAAwB,SAAVva,EAAmBwa,EAAAA,GAA2BC,EAAAA,MAE7D,CAACV,EAAkB/Z,IAEhB0a,GAAwBzuC,EAAAA,EAAAA,KAAaqsC,IACzCyB,EAAiB,CAAE/Z,MAAOga,EAASlnC,QAAS2mC,WAAYnB,IACxD,MAAMqC,EAAmBf,GAAoBA,EAAiB3I,MAAMoH,GAAcA,EAAUC,OAASA,IACjGqC,MAAAA,GAAAA,EAAkBtyC,SAASqwC,WFwC5BkC,eAA+BrmC,GAEpC,MACMsmC,EAAuC,CAAC,EAAG,EAAG,GACpD,IAAIxO,EACAt5B,EACA/C,EAEApF,EADAgnB,GAAK,EAELkpB,EAAgC,CAAC,EAAG,EAAG,GACvC1N,EAAQ,EAEZ,MAAM2N,EAAS1yC,SAASC,cAAc,UAChC0yC,EAAUD,EAAOE,YAAcF,EAAOE,WAAW,MACvD,IAAKD,EACH,OAAOH,EAGT,MAAMl/B,QAAcu/B,EAAAA,GAAAA,IAAa3mC,GACjCvE,EAAS2L,EAAMw/B,eAAiBx/B,EAAM7R,cAAgB6R,EAAM3L,OAC5D+C,EAAQ4I,EAAMy/B,cAAgBz/B,EAAM0/B,aAAe1/B,EAAM5I,MACzDgoC,EAAO/qC,OAASA,EAChB+qC,EAAOhoC,MAAQA,EAEfioC,EAAQM,UAAU3/B,EAAO,EAAG,GAE5B,IACE0wB,EAAO2O,EAAQO,aAAa,EAAG,EAAGxoC,EAAO/C,GACzC,MAAOU,GACP,OAAOmqC,EAMT,IAHAjwC,EAASyhC,EAAKA,KAAKzhC,QAGXgnB,GAAK4pB,IAAiB5wC,KAC1BwiC,EACF0N,EAAI,IAAMzO,EAAKA,KAAKza,GACpBkpB,EAAI,IAAMzO,EAAKA,KAAKza,EAAI,GACxBkpB,EAAI,IAAMzO,EAAKA,KAAKza,EAAI,GAO1B,OAJAkpB,EAAI,GAAK7rC,KAAKkC,MAAM2pC,EAAI,GAAK1N,GAC7B0N,EAAI,GAAK7rC,KAAKkC,MAAM2pC,EAAI,GAAK1N,GAC7B0N,EAAI,GAAK7rC,KAAKkC,MAAM2pC,EAAI,GAAK1N,GAEtB0N,EErFHW,CAAgBd,EAAiBtyC,SAASqwC,UAAUC,SACjDxM,MAAM39B,IACL,MAAM+rC,EAAetC,GAAgBzpC,GAC/B0pC,EAAY,IAAGhB,GAAQ1oC,KAC7BurC,EAAiB,CAAE/Z,MAAOga,EAASlnC,QAASwnC,gBAAiBpC,EAAUqC,aAAAA,SAG5E,CAACX,EAAkBG,IAEhB2B,GAA4BzvC,EAAAA,EAAAA,KAAayE,IAC7CqpC,EAAiB,CAAE/Z,MAAOga,EAASlnC,QAAS4mC,UAAWhpC,EAAEiJ,OAAO8wB,YAC/D,CAACsP,IAEE7tC,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,uBAElD,MAAM+W,GAAc/B,MAAAA,OAAA,EAAAA,EAAmB,KAAMA,EAAiB,GAAGtB,OAASU,EAAAA,GAE1E,OACE,0BAAK1sC,UAAU,4DACb,0BAAKA,UAAU,sBACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,aACL1C,UAAU,OACV+M,SAAUsiC,EACVpvC,QAAS4tC,GAERjuC,EAAK,gBAGR,mBAACke,GAAA,EAAD,CACEpb,KAAK,WACL1C,UAAU,OACVC,QAAS6tC,GAERluC,EAAK,aAGR,mBAACke,GAAA,EAAD,CAAUpb,KAAK,WAAWzC,QAAS8tC,GAChCnuC,EAAK,yBAGR,mBAACs+B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,qBACZu+B,QAASh1B,QAAQikC,GACjBjgC,SAAUiiC,KAIb9B,EACC,0BAAKttC,UAAU,uBACZstC,EAAiBzvB,KAAKkuB,GACrB,mBAAC,GAAD,CACEA,UAAWA,EACXrY,MAAOA,EACPoR,WAAYqI,IAAepB,EAAUC,KACrC/rC,QAASmuC,OAKf,mBAACjwB,GAAA,EAAD,WC/GFmxB,GAActE,GAAQR,GAAQ,WAC9B+E,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WA4MzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACbhtC,KAAKV,MAAOwtC,EAAI,IAAOC,EAAME,UAAUnpC,MAAQ,IAC/C9D,KAAKV,OAAO,EAAIwtC,EAAI,KAAOC,EAAME,UAAUlsC,OAAS,KAEtDmsC,YAAaltC,KAAKV,MAAMwtC,EAAI,IAAMC,EAAMI,QAAQrpC,MAAQ,KAI5D,SAASspC,IACP,cAAEJ,EAAF,YAAiBE,GACjBH,GAEA,MAAO,CACLG,GAAeH,EAAMI,QAAQrpC,MAAQ,GACrCkpC,EAAc,IAAMD,EAAME,UAAUnpC,MAAQ,GAC5C,EAAIkpC,EAAc,IAAMD,EAAME,UAAUlsC,OAAS,IA8ErD,UAAe/C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM+0B,GAAQC,EAAAA,EAAAA,IAAYh1B,IACpB,gBAAEqvC,GAAoBrvC,EAAOwS,SAASk8B,OAAO3Z,IAAU,GAC7D,MAAO,CACLsa,gBAAAA,EACAta,MAAAA,MAGJ,CAACr0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,sBATpCZ,EAxSyD,EAC3Eid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAiF,MAAAA,EACAsa,gBAAAA,EACAP,iBAAAA,MAEA,MAAMC,GAAW1nC,EAAAA,EAAAA,MACjB0nC,EAASlnC,QAAUktB,EAEnB,MAAM1W,GAAehX,EAAAA,EAAAA,IAAuB,MAEtCgqC,GAAiBhqC,EAAAA,EAAAA,IAAuB,MAExCiqC,GAAejqC,EAAAA,EAAAA,IAAuB,MACtCkqC,GAAgBlqC,EAAAA,EAAAA,KAAO,IAEtBypC,EAAKU,IAAU7sC,EAAAA,EAAAA,IAiLxB,SAAuB0qC,GACrB,OAAOA,GAAmBA,EAAgB/b,WAAW,KACjD+Y,GAAQR,GAAQwD,EAAgBpoB,QAAQ,IAAK,MAC7C0pB,GApL2Bc,CAAcpC,IAEvCqC,GAASrqC,EAAAA,EAAAA,IAAOypC,IACtBlsC,EAAAA,EAAAA,KAAU,KACR8sC,EAAO7pC,QAAUipC,IAChB,CAACA,IAEJ,MAAOvhC,EAAYoiC,EAAgBC,IAAoB1sB,EAAAA,GAAAA,MAChD2sB,EAAUC,IAAentC,EAAAA,EAAAA,IAAS,KAClCotC,EAAUC,IAAertC,EAAAA,EAAAA,IAAS,IAEnCstC,GAAW5qC,EAAAA,EAAAA,MACX6qC,GAAc7qC,EAAAA,EAAAA,OAGpBzC,EAAAA,EAAAA,KAAU,KAER,MAAMqsC,EAAY,CAChBkB,WAAYd,EAAexpC,QAASsqC,eACjCvxC,EAAAA,EAAAA,IAAKywC,EAAexpC,QAASG,wBAAyB,CAAC,MAAO,QAAS,YAEtEmpC,EAAU,CACdgB,WAAYb,EAAazpC,QAASsqC,eAC/BvxC,EAAAA,EAAAA,IAAK0wC,EAAazpC,QAASG,wBAAyB,CAAC,WAK1D,SAASoqC,EAAgB3sC,GACvB,MAAMurC,EAAgB,CACpBhtC,KAAKqE,IAAIrE,KAAKoE,IAAI,EAAG3C,EAAE4L,MAAS4/B,EAAUkB,YAAalB,EAAUnpC,MAAQ,GACzE9D,KAAKqE,IAAIrE,KAAKoE,IAAI,EAAG3C,EAAE6L,MAAS2/B,EAAU93B,IAAMkF,EAAaxW,QAASjJ,WAAYqyC,EAAUlsC,OAAS,KAGjG,YAAEmsC,GAAgBL,GAAca,EAAO7pC,QAASoqC,EAASpqC,SAK/D,OAHA2pC,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAASpqC,UAC9D8pC,KAEO,EAYT,SAASU,EAAc5sC,GACrB,MAAM,cAAEurC,GAAkBH,GAAca,EAAO7pC,QAASoqC,EAASpqC,SAC3DqpC,EAAcltC,KAAKqE,IAAIrE,KAAKoE,IAAI,EAAG3C,EAAE4L,MAAS8/B,EAAQgB,YAAahB,EAAQrpC,MAAQ,GAKzF,OAHA0pC,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAASpqC,UAC9D8pC,KAEO,EAhCTM,EAASpqC,QAAU,CAAEopC,UAAAA,EAAWE,QAAAA,IAgBhCzoC,EAAAA,EAAAA,GAAc2oC,EAAexpC,QAAU,CACrCc,UAAWypC,EACXvpC,OAAQupC,EACRxpC,UAAWgpC,EACXtwC,QAASswC,EACTU,wBAAyB,kCACzBC,YAAY,KAad7pC,EAAAA,EAAAA,GAAc4oC,EAAazpC,QAAU,CACnCc,UAAW0pC,EACXxpC,OAAQwpC,EACRzpC,UAAWgpC,EACXtwC,QAASswC,EACTU,wBAAyB,kCACzBC,YAAY,MAEb,CAACZ,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAtB,YAA0BE,EAAc,GAAMe,EAASpqC,QAAUgpC,GAAcC,EAAKmB,EAASpqC,SAAW,GACxG2qC,EAAMvG,GAAQU,GAAQmE,IACtB5D,EAAM4D,EAAI,GACV2B,EAASxG,GAAQU,GAAQ,CAACO,EAAK,EAAG,MAGxCtoC,EAAAA,EAAAA,KAAU,KACR,MAAMirC,EAAMlD,GAAQmE,GACdvtC,EAAS,IAAG0oC,GAAQ4D,KAK1B,GAHAiC,EAAYjC,EAAIliC,KAAK,OACrBqkC,EAAYzuC,IAEPguC,EAAc1pC,QAAS,CAC1B,MAAMynC,EAAetC,GAAgB6C,GACrCf,EAAiB,CACf/Z,MAAOga,EAASlnC,QAChB2mC,gBAAYhrC,EACZ6rC,gBAAiB9rC,EACjB+rC,aAAAA,IAGJiC,EAAc1pC,SAAU,IACvB,CAACipC,EAAKhC,KAGTlqC,EAAAA,EAAAA,KAAU,MA2GZ,SACEkrC,EACA5C,EACAgF,EACAD,GAEA,IAAIS,EACAlG,EACAmG,EAECT,EAAYrqC,SAAYoqC,EAASpqC,SAWpC6qC,EAAIT,EAASpqC,QAAQopC,UAAUnpC,MAC/B0kC,EAAIyF,EAASpqC,QAAQopC,UAAUlsC,OAC/B4tC,EAAMT,EAAYrqC,UAXlB6qC,EAAI5C,EAAOM,YACX5D,EAAIsD,EAAOjxC,aACX8zC,EAAM7C,EAAOE,WAAW,MAExBF,EAAOhoC,MAAQ4qC,EACf5C,EAAO/qC,OAASynC,EAEhB0F,EAAYrqC,QAAU8qC,GAOxB,MAAMC,EAAUD,EAAKE,gBAAgBH,EAAGlG,GAClCsG,EAASF,EAAQxR,KACjB2R,EAAMpG,GAAQ,CAACO,EAAK,EAAG,IAE7B,IAAI7wB,EAAQ,EAEZ,IAAK,IAAIvM,EAAI,EAAGA,EAAI08B,EAAG18B,IAAK,CAC1B,MAAMkjC,EAAO,EAAIljC,GAAK08B,EAAI,GACpByG,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAInjC,EAAI,EAAGA,EAAI6iC,EAAG7iC,IAAK,CAC1B,MAAMsjC,EAAOtjC,GAAK6iC,EAAI,GACtBI,EAAOz2B,KAAW42B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOz2B,KAAW42B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOz2B,KAAW42B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOz2B,KAAW,KAItBs2B,EAAKS,aAAaR,EAAS,EAAG,GAvJ5BS,CAAUhC,EAAexpC,QAAShI,WAAiCqtC,EAAKgF,EAAaD,KACpF,CAAC/E,KAGJtoC,EAAAA,EAAAA,KAAU,MAsJZ,SAAiBkrC,GACf,MAAM4C,EAAI5C,EAAOM,YAEjBN,EAAOhoC,MAAQ4qC,EACf5C,EAAO/qC,OAFG,EAGV,MAAM4tC,EAAM7C,EAAOE,WAAW,MAExB4C,EAAUD,EAAIE,gBAAgBH,EAL1B,GAMJI,EAASF,EAAQxR,KAEvB,IAAI/kB,EAAQ,EAEZ,IAAK,IAAIxM,EAAI,EAAGA,EAAI6iC,EAAG7iC,IAAK,CAC1B,MACMggC,EAAMlD,GAAQ,CADR98B,GAAK6iC,EAAI,GACK,EAAG,IAE7BI,EAAOz2B,KAAWwzB,EAAI,GACtBiD,EAAOz2B,KAAWwzB,EAAI,GACtBiD,EAAOz2B,KAAWwzB,EAAI,GAEtBiD,EAAOz2B,KAAW,IAGpBs2B,EAAIS,aAAaR,EAAS,EAAG,GA5K3BU,CAAQhC,EAAazpC,QAAShI,cAC7B,IAEH,MAAM0zC,GAAkBvyC,EAAAA,EAAAA,KAAayE,IACnC,MAAM+tC,EAAW/tC,EAAE+G,cAAc8B,MAAM2Y,QAAQ,WAAY,IAAI+P,MAAM,EAAG,IAExE,GAAIwc,EAAS/hB,MAAM,mCAAoC,CACrD,MAAMoe,EAAM2D,EAAS3f,MAAM,KAAK3U,KAAKu0B,GAAYhlC,OAAOglC,EAAQrY,UAChEoW,EAAOnF,GAAQwD,IAGjBpqC,EAAE+G,cAAc8B,MAAQklC,IACvB,IAEGE,GAAkB1yC,EAAAA,EAAAA,KAAayE,IACnC,MAAMkuC,EAAWluC,EAAE+G,cAAc8B,MAAM2Y,QAAQ,gBAAiB,IAAI+P,MAAM,EAAG,GAEzE2c,EAASliB,MAAM,uBACjB+f,EAAOnF,GAAQR,GAAQ8H,EAAS1sB,QAAQ,IAAK,OAG/CxhB,EAAE+G,cAAc8B,MAAQqlC,IACvB,IAEGC,GAA6B5yC,EAAAA,EAAAA,KAAayE,IAC9C+rC,EAAOnF,GAAQR,GAAQpmC,EAAE+G,cAAcqnC,QAAQtwC,MAAO0jB,QAAQ,IAAK,SAClE,IAEG5lB,GAAYmE,EAAAA,EAAAA,GAChB,gEACA+J,GAAc,eAKhB,OAFA4N,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,4BAGhD,0BAAK3wB,IAAKqV,EAAchd,UAAWA,GACjC,0BAAKA,UAAU,sBACb,0BAAK2H,IAAKqoC,EAAgBhwC,UAAU,gBAClC,kCACA,0BACEA,UAAU,SAEVlC,MAAQ,wBAAuB6xC,EAAc,SAASA,EAAc,6BAA6BwB,QAGrG,0BAAKxpC,IAAKsoC,EAAcjwC,UAAU,cAChC,kCACA,0BACEA,UAAU,SAEVlC,MAAQ,yBAAwB+xC,4BAAsCuB,QAG1E,0BAAKpxC,UAAU,SACb,mBAACod,GAAA,EAAD,CAAWnQ,MAAOyjC,EAAUnmB,MAAM,MAAMpd,SAAUklC,IAClD,mBAACj1B,GAAA,EAAD,CAAWnQ,MAAOujC,EAAUjmB,MAAM,MAAMpd,SAAU+kC,MAGtD,0BAAKlyC,UAAU,qBACZuvC,GAAkB1xB,KAAK3b,GACtB,0BACElC,UAAWkC,IAAW,IAAGivC,IAAQ,cAAWhvC,EAC5C,aAAYD,EAEZpE,MAAQ,qBAAoBoE,KAC5BjC,QAASsyC,Y,0BCxMrB,MA0KA,IAAe5xC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAsBC,IACjC,CACL8zC,6BAA8BtpC,QAAQxK,EAAOwS,SAASC,MAAMqhC,8BAC5DC,8BAA+BvpC,QAAQxK,EAAOwS,SAASC,MAAMshC,+BAC7DC,sBAAuBxpC,QAAQxK,EAAOwS,SAASC,MAAMuhC,uBACrDC,uBAAwBzpC,QAAQxK,EAAOwS,SAASC,MAAMwhC,wBACtDC,0BAA2B1pC,QAAQxK,EAAOwS,SAASC,MAAMyhC,2BACzDC,2BAA4B3pC,QAAQxK,EAAOwS,SAASC,MAAM0hC,4BAC1DC,8BAA+B5pC,QAAQxK,EAAOwS,SAASC,MAAM2hC,+BAC7DC,oBAAqBr0C,EAAOwS,SAASC,MAAM4hC,oBAC3CC,qBAAsBt0C,EAAOwS,SAASC,MAAM6hC,qBAC5CC,wBAAyBv0C,EAAOwS,SAASC,MAAM8hC,4BAGnD,CAAC7zC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,2BACA,kCACA,6BACA,mCAlBkBZ,EA1KqD,EACvEid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAgkB,6BAAAA,EACAC,8BAAAA,EACAC,sBAAAA,EACAC,uBAAAA,EACAC,0BAAAA,EACAC,2BAAAA,EACAC,8BAAAA,EACAE,qBAAAA,EACAD,oBAAAA,EACAE,wBAAAA,EACAC,yBAAAA,EACAC,gCAAAA,EACAC,2BAAAA,EACAC,8BAAAA,OAEA/vC,EAAAA,EAAAA,KAAU,KACR4vC,MACC,CAACA,IAEJ,MAAMI,GAAeC,EAAAA,GAAAA,GAAY,KAAK,GAAO,GAEvCC,GAAuB9zC,EAAAA,EAAAA,KAAY,CACvCyE,EACAsvC,EACAC,KAEA,MAAMC,EAA+B,YAAbF,GACnBjB,IACc,UAAbiB,EAAuBf,EAAwBE,GAC/CgB,EAAyC,YAAbH,EAC9BhB,EACc,UAAbgB,EAAuBd,EAAyBE,EAErDO,EAA2B,CACzBK,SAAAA,KACgB,WAAZC,GAAwB,CAAEtqB,UAAWjlB,EAAEiJ,OAAO8wB,QAAS2V,mBAAoBD,MAC/D,iBAAZF,GAA8B,CAAEG,mBAAoB1vC,EAAEiJ,OAAO8wB,QAAS9U,SAAUuqB,OAErF,CACDd,EAA4BD,EAC5BD,EAAwBD,EACxBD,EAA+BD,EAC/BY,IAGIU,GAAkCp0C,EAAAA,EAAAA,KAAayE,IACnDgvC,EAAgC,CAC9B/pB,UAAWjlB,EAAEiJ,OAAO8wB,YAErB,CAACiV,IAEExzC,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,eAGhD,0BAAKt4B,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAA/D,qBAGA,mBAAC+7B,GAAA,EAAD,CACE3T,MAAM,oBAENue,SAAUlpC,EAAKozC,EAAsB,gCAAkC,kCACvE7U,QAAS6U,EACT7lC,SAAW/I,IACTkvC,EAA8B,CAAEN,oBAAqB5uC,EAAEiJ,OAAO8wB,aAGlE,mBAACD,GAAA,EAAD,CACE3T,MAAM,wBACNxd,UAAWimC,EAEXlK,SAAUlpC,EAAKqzC,EAAuB,gCAAkC,kCACxE9U,QAAS8U,EACT9lC,SAAW/I,IACTkvC,EAA8B,CAAEL,qBAAsB7uC,EAAEiJ,OAAO8wB,aAGnE,0BAAKn+B,UAAU,wBACb,mBAACs+B,GAAA,EAAD,CACE/T,MAAM,QACNvjB,IAAK,EACLD,IAAK,GACLkG,MAAOimC,EACP/lC,SAAW6mC,IACTV,EAA8B,CAAEJ,wBAAyBc,IACzDT,GAAa,KAAMU,EAAAA,GAAAA,SAAgB9xC,EAAW6xC,UAKtD,0BAAKh0C,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC5DvC,EAAK,6BAGR,mBAACs+B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,gCAEZkpC,SAAUlpC,EAAK6yC,EAA+B,gCAAkC,kCAChFtU,QAASsU,EACTtlC,SAAW/I,IAAQqvC,EAAqBrvC,EAAG,UAAW,aAExD,mBAAC85B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,kBACZmN,UAAW0lC,EAEX3J,SAAUlpC,EAAK8yC,EAAgC,gCAAkC,kCACjFvU,QAASuU,EACTvlC,SAAW/I,IAAQqvC,EAAqBrvC,EAAG,UAAW,oBAI1D,0BAAKpE,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,iBAEhF,mBAACs+B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,0BACZkpC,SAAUlpC,EAAK+yC,EAAwB,gCAAkC,kCACzExU,QAASwU,EACTxlC,SAAW/I,IAAQqvC,EAAqBrvC,EAAG,QAAS,aAEtD,mBAAC85B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,kBACZmN,UAAW4lC,EACX7J,SAAUlpC,EAAKgzC,EAAyB,gCAAkC,kCAC1EzU,QAASyU,EACTzlC,SAAW/I,IAAQqvC,EAAqBrvC,EAAG,QAAS,oBAIxD,0BAAKpE,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,mBAEhF,mBAACs+B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,4BAEZkpC,SAAUlpC,EAAKizC,EAA4B,gCAAkC,kCAC7E1U,QAAS0U,EACT1lC,SAAW/I,IAAQqvC,EAAqBrvC,EAAG,YAAa,aAE1D,mBAAC85B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,kBACZmN,UAAW8lC,EAEX/J,SAAUlpC,EAAKkzC,EAA6B,gCAAkC,kCAC9E3U,QAAS2U,EACT3lC,SAAW/I,IAAQqvC,EAAqBrvC,EAAG,YAAa,oBAI5D,0BAAKpE,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,eAEhF,mBAACs+B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,iBACZu+B,QAAS4U,EACT5lC,SAAU4mC,UCOpB,IAAepzC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAuB,cACtB,MACEwS,UACEC,OAAO,YAAE8iC,EAAF,mBAAeC,EAAf,mBAAmCC,GADlC,QAERC,GAHE,QAKJC,EALI,eAMJC,GACE51C,EAEJ,MAAO,CACLu1C,YAAAA,EACAM,aAAcF,EAAQG,WACtBC,cAAeH,EAAej2C,OAC9B61C,mBAAAA,EACAC,mBAAAA,EACAO,6BAA4B,UAAEN,EAAQO,mBAAV,aAAE,EAAqBC,WACnDC,0BAAyB,UAAET,EAAQU,gBAAV,aAAE,EAAkBF,WAC7CG,8BAA6B,UAAEX,EAAQY,oBAAV,aAAE,EAAsBJ,WACrDK,4BAA2B,UAAEb,EAAQc,gBAAV,aAAE,EAAkBN,WAC/CO,4BAA2B,UAAEf,EAAQgB,kBAAV,aAAE,EAAoBR,eAGrD,CAACx1C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,sBAAuB,qBAAsB,sBAAuB,sBAAuB,2BAzB3EZ,EAhL+C,EACjEid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAylB,YAAAA,EACAM,aAAAA,EACAE,cAAAA,EACAP,mBAAAA,EACAC,mBAAAA,EACAO,6BAAAA,EACAG,0BAAAA,EACAE,8BAAAA,EACAE,4BAAAA,EACAE,4BAAAA,EACAE,oBAAAA,EACAC,oBAAAA,EACAC,mBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,OAEAnyC,EAAAA,EAAAA,KAAU,KACRgyC,IACAC,IACAF,IACAG,MACC,CAACF,EAAqBC,EAAoBF,EAAqBG,IAElE,MAAM71C,GAAOC,EAAAA,EAAAA,KAIb,SAAS81C,EAAmBd,GAC1B,OAAQA,GACN,IAAK,YACH,OAAOj1C,EAAK,gBAEd,IAAK,WACH,OAAOA,EAAK,eAEd,IAAK,SACH,OAAOA,EAAK,cAMlB,OAjBAkc,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,SAkBhD,0BAAKt4B,UAAU,kCACb,0BAAKA,UAAU,sBACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,cACLk+B,QAAM,EACN3gC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,sBAE9B,0BAAKt4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,iBAC7B40C,EAAe,GACd,2BAAMx0C,UAAU,WAAWO,IAAI,QAC5BX,EAAK,QAAS40C,MAKvB,mBAAC12B,GAAA,EAAD,CACEpb,KAAK,OACLk+B,QAAM,EACN3gC,QAAS,IAAMy3B,EACbwc,EAAc5b,EAAAA,GAAAA,aAA+BA,EAAAA,GAAAA,gBAG/C,0BAAKt4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,wBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5BX,EAAKs0C,EAAc,aAAe,kBAIzC,mBAACp2B,GAAA,EAAD,CACEpb,KAAK,kBACLk+B,QAAM,EACN3gC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,wBAE9B,0BAAKt4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,kBAC7B80C,EAAgB,GACf,2BAAM10C,UAAU,WAAWO,IAAI,QACV,IAAlBm0C,EAAsB,YAAe,GAAEA,iBAOlD,0BAAK10C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,iBAErF,mBAACke,GAAA,EAAD,CACE8iB,QAAM,EACN5gC,UAAU,UACVC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,qBAE9B,0BAAKt4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,sBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5Bo1C,EAAmBhB,MAI1B,mBAAC72B,GAAA,EAAD,CACE8iB,QAAM,EACN5gC,UAAU,UACVC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,kBAE9B,0BAAKt4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,kBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5Bo1C,EAAmBb,MAI1B,mBAACh3B,GAAA,EAAD,CACE8iB,QAAM,EACN5gC,UAAU,UACVC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,sBAE9B,0BAAKt4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,6BAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5Bo1C,EAAmBX,MAI1B,mBAACl3B,GAAA,EAAD,CACE8iB,QAAM,EACN5gC,UAAU,UACVC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,oBAE9B,0BAAKt4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,yBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5Bo1C,EAAmBT,MAI1B,mBAACp3B,GAAA,EAAD,CACE8iB,QAAM,EACN5gC,UAAU,UACVC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,oBAE9B,0BAAKt4B,UAAU,uBACb,2BAAMA,UAAU,SAASJ,EAAK,gBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5Bo1C,EAAmBP,OAM3BhB,GACC,0BAAKp0C,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAC5DvC,EAAK,iCAER,mBAACs+B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,4CACZkpC,SAAUlpC,EAAK,gCACfu+B,QAASh1B,QAAQgrC,GACjBpnC,UAAWqnC,EACXhW,QAASsX,UCjHrB,IAAe/0C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,CACLi3C,UAAWj3C,EAAOwS,SAASC,MAAMwkC,UACjCC,SAAUl3C,EAAOwS,SAASC,MAAMykC,aAGpC,CAACx2C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,gBAAiB,sBARDZ,EAhEgD,EAClEid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAmnB,UAAAA,EACAC,SAAAA,EACAC,cAAAA,EACArY,iBAAAA,MAEA,MAAOsY,EAAkBC,IAAuB1yC,EAAAA,EAAAA,IAAiBuyC,IAC1DjiB,EAAWqiB,EAAeC,IAAmBryB,EAAAA,GAAAA,MAGpDtgB,EAAAA,EAAAA,KAAU,KACRuyC,MACC,CAACA,IAEJ,MAAMK,GAAex2C,EAAAA,EAAAA,KAAay2C,IAChCJ,EAAoBI,GACpBH,KAEKI,EAAAA,GAAAA,IAAYD,GAAsB,KACrCF,IAEAzY,EAAiB,CAAEoY,SAAUO,SAE9B,CAACH,EAAeC,EAAiBzY,IAE9BhT,GAAU5oB,EAAAA,EAAAA,KAAQ,IACf+zC,EAsBX,SAAsBA,GACpB,MAAMU,GAAmBvyC,OAAOwyC,UAAUV,UAAY,MAAMW,cACtDC,EAAgBH,EAAgBI,OAAO,EAAG,GAEhD,OAAOd,EAAU/3B,KAAI,EAAGu4B,SAAAA,EAAUO,WAAAA,EAAYx6B,KAAAA,MAAzB,CACnBlP,MAAOmpC,EACP7rB,MAAOosB,EACP7N,SAAU3sB,MACRsW,MAAMC,IACD4jB,GAAoB5jB,EAAEzlB,QAAUqpC,GAAmB5jB,EAAEzlB,QAAUwpC,EAAsB,GAAJ,IA/BrEG,CAAahB,QAAazzC,GAC5C,CAACyzC,IAIJ,OAFA95B,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,UAGhD,0BAAKt4B,UAAU,kEACZyqB,EACC,mBAACD,GAAA,EAAD,CACErO,KAAK,yBACLsO,QAASA,EACTC,SAAUqrB,EACVc,cAAejjB,EAAYmiB,OAAmB5zC,EAC9CgL,SAAUgpC,IAGZ,mBAACh4B,GAAA,EAAD,WCtED,SAAS24B,GAAcC,GAC5B,OAAQA,GACN,KAAKze,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,MAAO,cACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,MAAO,eACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,cCQb,MAgLA,IAAe33B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUo4C,OAAAA,MACT,IAAIC,EAEJ,MACE54B,OAASC,KAAMC,GACfnN,UAAU,QAAEkjC,IACV11C,EAEJ,OAAQo4C,GACN,KAAKze,EAAAA,GAAAA,mBACH0e,EAAkB3C,EAAQO,YAC1B,MAEF,KAAKtc,EAAAA,GAAAA,gBACH0e,EAAkB3C,EAAQU,SAC1B,MAEF,KAAKzc,EAAAA,GAAAA,oBACH0e,EAAkB3C,EAAQY,aAC1B,MAEF,KAAK3c,EAAAA,GAAAA,kBACH0e,EAAkB3C,EAAQc,SAC1B,MAEF,KAAK7c,EAAAA,GAAAA,kBACH0e,EAAkB3C,EAAQgB,WAI9B,OAAK2B,EAIE,IACFA,EACH14B,UAAAA,GALO,MAQX,CAACjf,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAxCpCZ,EAhLyD,EAC3Eq4C,OAAAA,EACAp7B,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAomB,WAAAA,EACAoC,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACA94B,UAAAA,EACA+4B,qBAAAA,MAEA,MAAMz3C,GAAOC,EAAAA,EAAAA,KAEPy3C,GAAoBz1C,EAAAA,EAAAA,KAAQ,KAChC,OAAQk1C,GACN,KAAKze,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACH,MAAO,CACL,CAAErrB,MAAO,YAAasd,MAAO3qB,EAAK,iBAClC,CAAEqN,MAAO,WAAYsd,MAAO3qB,EAAK,iBAGrC,QACE,MAAO,CACL,CAAEqN,MAAO,YAAasd,MAAO3qB,EAAK,iBAClC,CAAEqN,MAAO,WAAYsd,MAAO3qB,EAAK,gBACjC,CAAEqN,MAAO,SAAUsd,MAAO3qB,EAAK,kBAGpC,CAACA,EAAMm3C,IAEJQ,EAAiB,CACrBC,iBAAiC,WAAf3C,EAClB4C,kBAAkC,cAAf5C,GAGf6C,EAAaZ,GAAcC,GAE3BY,GAAa91C,EAAAA,EAAAA,KAAQ,KACzB,OAAQk1C,GACN,KAAKze,EAAAA,GAAAA,mBACH,OAAO14B,EAAK,qBACd,KAAK04B,EAAAA,GAAAA,gBACH,OAAO14B,EAAK,iBACd,KAAK04B,EAAAA,GAAAA,oBACH,OAAO14B,EAAK,4BACd,KAAK04B,EAAAA,GAAAA,kBACH,OAAO14B,EAAK,wBACd,KAAK04B,EAAAA,GAAAA,kBACH,OAAO14B,EAAK,eACd,QACE,UAEH,CAACA,EAAMm3C,KAEVj7B,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBqf,GAElD,MAAMa,GAAkB/1C,EAAAA,EAAAA,KAAQ,KAC9B,OAAQk1C,GACN,KAAKze,EAAAA,GAAAA,gBACH,OAAO14B,EAAK,cACd,QACE,UAEH,CAACA,EAAMm3C,IAEJc,EAAwB,MAC5B,OAAQd,GACN,KAAKze,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,mCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,iCACT,QACE,OAAOA,EAAAA,GAAAA,mCAXiB,GAexBwf,EAAuB,MAC3B,OAAQf,GACN,KAAKze,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,gCACT,QACE,OAAOA,EAAAA,GAAAA,kCAXgB,GAevByf,GAAel2C,EAAAA,EAAAA,KAAQ,IACtBo1C,GAAiBC,GAAiB54B,EAIhC44B,EAAac,QAAO,CAACC,EAAQr5C,IAC3Bq5C,GAAU35B,EAAU1f,GAAU0f,EAAU1f,GAAQs5C,aAAgB,IACtEjB,EAAa34C,QALP,GAMR,CAAC44C,EAAcD,EAAc34B,IAE1B65B,GAAat2C,EAAAA,EAAAA,KAAQ,IACpBs1C,GAAiBC,GAAiB94B,EAIhC84B,EAAaY,QAAO,CAACC,EAAQr5C,IAC3Bq5C,GAAU35B,EAAU1f,GAAU0f,EAAU1f,GAAQs5C,aAAgB,IACtEf,EAAa74C,QALP,GAMR,CAAC84C,EAAcD,EAAc74B,IAE1B85B,GAAyBz4C,EAAAA,EAAAA,KAAasN,IAC1CoqC,EAAqB,CACnBK,WAAAA,EACA7C,WAAY5nC,MAEb,CAACyqC,EAAYL,IAEhB,OACE,0BAAKr3C,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYw1C,GAE3E,mBAACntB,GAAA,EAAD,CACErO,KAAO,cAAau7B,IACpBjtB,QAAS6sB,EACTnqC,SAAUirC,EACV1tB,SAAUmqB,IAGX+C,GACC,wBAAG53C,UAAU,mCAAmCO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYy1C,IAI1F,0BAAK53C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAAYvC,EAAK,sBAEpF23C,EAAeE,mBACd,mBAAC35B,GAAA,EAAD,CACE8iB,QAAM,EACNl+B,KAAK,WACLzC,QAAS,KAAQy3B,EAAemgB,KAEhC,0BAAK73C,UAAU,iCACZ+3C,EAAe,GAAK,2BAAM/3C,UAAU,OAAOO,IAAI,QAA3B,IAAoCw3C,GACzD,2BAAM/3C,UAAU,SAASJ,EAAK,oBAC9B,2BAAMI,UAAU,YAAYJ,EAAK,wBAItC23C,EAAeC,kBACd,mBAAC15B,GAAA,EAAD,CACE8iB,QAAM,EACNl+B,KAAK,cACLzC,QAAS,KAAQy3B,EAAeogB,KAEhC,0BAAK93C,UAAU,iCACZm4C,EAAa,GAAK,2BAAMn4C,UAAU,OAAOO,IAAI,QAA3B,IAA0C43C,GAC7D,2BAAMn4C,UAAU,SAASJ,EAAK,mBAC9B,2BAAMI,UAAU,YAAYJ,EAAK,8BChD/C,SAASy4C,GAAYC,GACnB,MAAO,CAACA,EAAQC,OAAQD,EAAQE,SAASj8B,OAAOpT,SAASmD,KAAK,MAGhE,SAASmsC,GAAqBH,GAC5B,MAAQ,GAAEA,EAAQI,cAAcJ,EAAQI,YAAc,KAAO,MAAMJ,EAAQK,YAAYL,EAAQM,gBAGjG,UAAej4C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,CACL41C,eAAgB51C,EAAO41C,mBAG3B,CAACl1C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,qBAAsB,yBAA0B,gCAPhCZ,EA9H6D,EAC/Eid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACA8lB,eAAAA,EACAiB,mBAAAA,EACAqD,uBAAAA,EACAC,2BAAAA,MAEA,MAAOC,EAAiCC,EAA+BC,IAAkCp1B,EAAAA,GAAAA,MACzGtgB,EAAAA,EAAAA,KAAU,KACRiyC,MACC,CAACA,IAEJ,MAAM0D,GAA8Bv5C,EAAAA,EAAAA,KAAaygB,IAC/Cy4B,EAAuB,CAAEz4B,KAAAA,MACxB,CAACy4B,IAEEM,GAA6Bx5C,EAAAA,EAAAA,KAAY,KAC7Cs5C,IACAH,MACC,CAACG,EAAgCH,IAE9BM,GAAiBv3C,EAAAA,EAAAA,KAAQ,IACtB0yC,EAAe5P,MAAM2T,GAAYA,EAAQe,aAC/C,CAAC9E,IAEE+E,GAAgBz3C,EAAAA,EAAAA,KAAQ,IACrB0yC,EAAeh4B,QAAQ+7B,IAAaA,EAAQe,aAClD,CAAC9E,IAEE30C,GAAOC,EAAAA,EAAAA,KAqEb,OAnEAic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,uBAoEhD,0BAAKt4B,UAAU,kCACZo5C,IAnEyBd,EAmEcc,EAjExC,0BAAKp5C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjEvC,EAAK,gCAGR,mBAACke,GAAA,EAAD,CAAU8iB,QAAM,EAAC4C,UAAQ,EAACxjC,UAAU,WAClC,0BAAKA,UAAU,sBAAsBO,IAAI,QACvC,2BAAMP,UAAU,QAAQO,IAAI,QAAQ+3C,EAAQiB,SAC5C,2BAAMv5C,UAAU,wBAAwBy4C,GAAqBH,IAC7D,2BAAMt4C,UAAU,YAAYs4C,EAAQkB,GAApC,MAA2CnB,GAAYC,MAI3D,mBAACx6B,GAAA,EAAD,CACE9d,UAAU,2BACV0C,KAAK,OACLmF,QAAM,EACN+4B,QAAM,EACN3gC,QAAS+4C,GAERp5C,EAAK,2BA8CT05C,IAxCwBG,EAwCaH,EAtCtC,0BAAKt5C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjEvC,EAAK,kBAGP65C,EAAS57B,KAKhB,SAAuBy6B,GACrB,OACE,mBAACx6B,GAAA,EAAD,CACE3d,IAAKm4C,EAAQl4B,KACbvY,QAAM,EACN+4B,QAAM,EACNpT,eAAgB,CAAC,CACfnN,MAAO,YACP3d,KAAM,OACNg3C,QAAS,KACPR,EAA4BZ,EAAQl4B,SAGxCpgB,UAAU,WAEV,0BAAKA,UAAU,gCAAgCO,IAAI,QACjD,2BAAMP,UAAU,SAAQ8vB,EAAAA,EAAAA,IAAoBlwB,EAA2B,IAArB04C,EAAQqB,aAC1D,2BAAM35C,UAAU,SAASs4C,EAAQiB,SACjC,2BAAMv5C,UAAU,wBAAwBy4C,GAAqBH,IAC7D,2BAAMt4C,UAAU,YAAYs4C,EAAQkB,GAApC,MAA2CnB,GAAYC,WAU1DgB,GACC,mBAAC73B,GAAA,EAAD,CACE1f,OAAQg3C,EACRxwC,QAAS0wC,EACTh2C,KAAK,yDACLye,aAAa,+BACbC,eAAgBw3B,EAChB3gB,sBAAoB,KAhD5B,IAA6BihB,EA5BCnB,M,eCrChC,MAsEA,IAAe33C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACE2vB,OACEjQ,KAAMgQ,GAERimB,SACE5O,IAAKkU,GALH,YAOJlpB,EAPI,cAQJtU,GACEzd,EAEJ,MAAO,CACL0vB,UAAAA,EACAurB,WAAAA,EACAC,WAAYnpB,MAAAA,OAAF,EAAEA,EAAaxC,QACzBuC,gBAAiB9xB,EAAOm7C,WAAW7oB,aACnC7U,cAAAA,MAGJ,CAAC/c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAAmB,qBAAsB,kBAtBzBZ,EAtE8C,EAChE2vB,UAAAA,EACAurB,WAAAA,EACAC,WAAAA,EACAppB,gBAAAA,EACArU,cAAAA,EACAra,OAAAA,EACAwG,QAAAA,EACAomB,gBAAAA,EACAorB,mBAAAA,EACAC,aAAAA,MAEA,MAAMp6C,GAAOC,EAAAA,EAAAA,MACN0c,EAAQ0C,IAAa3b,EAAAA,EAAAA,IAAS,IAE/BgZ,GAAYtW,EAAAA,EAAAA,IAAyB,OAE3CzC,EAAAA,EAAAA,KAAU,KACRw2C,EAAmB,CAAEjoB,MAAOvV,MAC3B,CAACA,EAAQw9B,IAEZ,MAAME,GAAqBp4C,EAAAA,EAAAA,KAAQ,KACjC,MAAMq4C,GAAuBL,GAAc,IAAIM,OAAO1pB,GAAmB,IAAIlU,QAAQ69B,IAC3ER,EAAWv8C,SAAS+8C,IAAcA,IAAch+B,IAG1D,OAAOgD,EAAAA,EAAAA,IAAO86B,GAAqBlC,QAAiB,CAACqC,EAAKD,KAAc,MAUtE,QARG79B,IACG8R,EAAU+rB,KACX56B,EAAAA,GAAAA,IAAY6S,EAAAA,EAAAA,IAAgBhE,EAAU+rB,KAAe,GAAI79B,IAF5D,UAGG8R,EAAU+rB,UAHb,OAGG,EAAsB9nB,SAASkkB,cAAcn5C,SAASkf,KAEzD89B,EAAI90B,KAAK60B,GAGJC,IACN,IACA5nB,MAAK,CAAC6nB,EAASC,KACd,MAAMhgB,GAAYlI,EAAAA,EAAAA,IAAgBhE,EAAUisB,KAAa,GACnDE,GAAanoB,EAAAA,EAAAA,IAAgBhE,EAAUksB,KAAc,GAE3D,OAAOhgB,EAAUkgB,cAAcD,QAElC,CAACZ,EAAYC,EAAYz9B,EAAeG,EAAQkU,EAAiBpC,IAE9DqsB,GAAmB/6C,EAAAA,EAAAA,KAAase,IACpC,MAAQ7gB,GAAIg9C,EAAN,WAAiBO,GAAetsB,EAAUpQ,IAAW,GACtDm8B,GAAcO,IAGnBX,EAAa,CAAEI,UAAAA,EAAWO,WAAAA,IAC1BpyC,OACC,CAACyxC,EAAczxC,EAAS8lB,IAE3B,OACE,mBAAC,GAAD,CACEtsB,OAAQA,EACRsa,cAAe49B,EACf39B,UAAWA,EACXE,kBAAmB5c,EAAK,0BACxB2c,OAAQA,EACRE,eAAgBwC,EAChBvC,SAAUiS,EACVhS,mBAAoB+9B,EACpBnyC,QAASA,QCyCf,IAAe5H,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEyf,OACEC,KAAMu8B,GAERtsB,OACEjQ,KAAMw8B,GAERvG,SAAS,IACP5O,GAEFoV,aACEC,WAAYC,IAEZr8C,EAEJ,MAAO,CACLi8C,WAAAA,EACAC,WAAAA,EACAjB,WAAYlU,EACZsV,cAAAA,MAGJ,CAAC37C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAxBpCZ,EA9F2D,EAC7Eid,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAmsB,WAAAA,EACAC,WAAAA,EACAjB,WAAAA,EACAoB,cAAAA,EACAC,eAAAA,MAEA,MAAMr7C,GAAOC,EAAAA,EAAAA,MACNq7C,EAAsBC,EAAoBC,IAAuBv3B,EAAAA,GAAAA,KAClEw3B,GAAqB17C,EAAAA,EAAAA,KAAay6C,IACtCa,EAAe,CAAEb,UAAAA,MAChB,CAACa,IA2CJ,OAzCAn/B,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,qBA0ChD,0BAAKt4B,UAAU,wBACb,0BAAKA,UAAU,oCACb,0BAAKA,UAAU,iBACb,wBAAGA,UAAU,6CAA6CO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjFvC,EAAK,sBAIV,0BAAKI,UAAU,2BACZ45C,MAAAA,GAAAA,EAAYt7C,OACX,0BAAK0B,UAAU,oBACZ45C,EAAY/7B,KAAI,CAACu8B,EAAW90B,IAnDzC,SAAuB80B,EAAmB90B,EAAWg2B,GACnD,MAAMC,GAAYv8C,EAAAA,EAAAA,IAASo7C,GACrB/5C,EAAOk7C,EAAYV,EAAWT,QAAaj4C,EAC3C7B,EAAQi7C,OAAoCp5C,EAAxBy4C,EAAWR,GAE/Bp6C,GAAYmE,EAAAA,EAAAA,GAChB,wDACAo3C,EAAY,UAAY,SAG1B,OACE,mBAACz9B,GAAA,EAAD,CACE3d,IAAKi6C,EACLp6C,UAAWA,EACX6H,QAAM,EACN+4B,QAAM,EACNpT,eAAgB,CAAC,CACfnN,MAAO,UACP3d,KAAM,SACNg3C,QAAS,KACP2B,EAAmBjB,MAGvBt8C,MAAQ,SA4B6D,EA5BpCwnB,GAAKk2B,EAAAA,SAEtC,mBAACt7C,EAAA,EAAD,CAAQE,KAAK,SAASC,KAAMA,EAAMC,KAAMA,IACxC,0BAAKN,UAAU,eAAeO,IAAI,QAChC,yBAAIA,IAAI,SAAQC,EAAAA,EAAAA,IAAY+6C,GAAYlpB,EAAAA,EAAAA,IAAgBhyB,IAAQof,EAAAA,EAAAA,GAAa7f,EAAMU,KAAW,MAC7FD,MAAAA,OAAA,EAAAA,EAAMu0C,cACL,0BAAK50C,UAAU,gBAAgBO,IAAI,SAAQk7C,EAAAA,GAAAA,IAA0BT,EAAe36C,EAAKu0C,cAE1Fv0C,IAASA,EAAKu0C,aAAev0C,EAAKiyB,UACjC,0BAAKtyB,UAAU,mBAAmBO,IAAI,QAAtC,IAA+CF,EAAKiyB,YAmBfopB,CAActB,EAAW90B,MAE5Ds0B,IAAeA,EAAWt7C,OAC5B,0BAAK0B,UAAU,aAAaO,IAAI,QAAQX,EAAK,cAE7C,mBAACue,GAAA,EAAD,CAAShe,IAAI,cAKnB,mBAACs8B,GAAA,EAAD,CACEjwB,SAAO,EACPvM,QAASk7C,EACT/4C,UAAWxC,EAAK,iBAEhB,wBAAGI,UAAU,cAEf,mBAAC,GAAD,CACE+B,OAAQm5C,EACR3yC,QAAS6yC,S,eC1GjB,MAyCA,IAAez6C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAsBC,IACjC,CACLg9C,eAAeC,EAAAA,EAAAA,IAAoBj9C,EAAQ,SAF3BD,EAzCoC,EACtDid,SAAAA,EAAU8S,QAAAA,EAASktB,cAAAA,EAAejkB,eAAAA,MAElC,MAAM93B,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,cAGhD,0BAAKt4B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAAC67C,GAAA,EAAD,CAAexU,QAASsU,EAAev7C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,SAC/CC,EAAAA,EAAAA,GAAWZ,EAAK,uBAAwB,CAAC,SAI9C,0BAAKI,UAAU,gCACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,OACLzC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,6BAE7B14B,EAAK,mBAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,eACLzC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,eAE7B14B,EAAK,oBAER,mBAACke,GAAA,EAAD,CACEpb,KAAK,QACLzC,QAAS,IAAMy3B,EAAeY,EAAAA,GAAAA,oCAE7B14B,EAAK,2B,0BC/BhB,MA6DA,IAAee,EAAAA,EAAAA,KA3D6B,EAC1Co2C,OAAAA,EACAp7B,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACA7O,MAAAA,EACAgU,UAAAA,EACAkoB,iBAAAA,EACAx+B,YAAAA,EAAc,mBACdyZ,KAAAA,EACAglB,YAAAA,EACAC,WAAAA,EACA34B,SAAAA,MAEA,MAAO44B,EAAiBC,IAAsB54C,EAAAA,EAAAA,IAAiB,KACxD64C,EAAoBC,IAAyB94C,EAAAA,EAAAA,KAAS,GAEvD+4C,GAAe18C,EAAAA,EAAAA,KAAa28C,IAC5BR,GAAoBQ,IAAgBR,EACtCI,EArBuB,6BAuBvB74B,EAASi5B,KAEV,CAACj5B,EAAUy4B,IAERS,GAAmB58C,EAAAA,EAAAA,KAAY,KAC/Bq8C,GACFA,IAEFE,EAAmB,MAClB,CAACF,IAEEp8C,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBqf,GAGhD,0BAAK/2C,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACw8C,GAAA,EAAD,CAAgBC,OAAK,EAACC,kBAAmBP,KAG3C,0BAAKn8C,UAAU,gCACb,mBAAC28C,GAAA,EAAD,CACE/8B,MAAOq8B,GAAmBr8B,EAC1BmX,KAAMA,EACNzZ,YAAaA,EACby+B,YAAaA,GAAen8C,EAAK,QACjCo8C,WAAYO,EACZ3oB,UAAWA,EACX8oB,kBAAmBP,EACnBS,2BAA4BR,EAC5B/4B,SAAUg5B,SCjCpB,IAAe17C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAsBC,IACjC,CACLg9C,eAAeC,EAAAA,EAAAA,IAAoBj9C,EAAQ,SAF3BD,EAxBkC,EACpDid,SAAAA,EAAU+b,eAAAA,EAAgBjJ,QAAAA,EAASktB,cAAAA,EAAekB,QAAAA,MAElD,MAAMj9C,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,eAGhD,0BAAKt4B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAAC67C,GAAA,EAAD,CAAexU,QAASsU,EAAev7C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,QAC/CX,EAAK,+BAIV,0BAAKI,UAAU,gCACb,mBAACgC,EAAA,EAAD,CAAQ/B,QAAS48C,GAAUj9C,EAAK,uCCHlCk9C,GAAyBz6C,EAAAA,GAA0B,IAAM,IA8H/D,IAAe1B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAqB,CAACC,GAAU+D,KAAAA,MAC3C,CACLi5C,eAAeC,EAAAA,EAAAA,IAAoBj9C,EAAiB,UAAT+D,EAAmB,KAAO,SAFrDhE,EA5H0C,EAC5Di9C,cAAAA,EACAzuC,KAAAA,EAAO,OACP0mB,UAAAA,EACAhU,MAAAA,EACAtC,YAAAA,EACAy/B,cAAAA,EACAf,WAAAA,EACA34B,SAAAA,EACA1H,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAsoB,OAAAA,MAGA,MAAMnqC,GAAW5G,EAAAA,EAAAA,IAAyB,OAEnCiH,EAAO+vC,IAAY15C,EAAAA,EAAAA,IAAiB,KACpC25C,EAAgBC,EAAoBC,IAAwBt5B,EAAAA,GAAAA,IAAQ,IAE3EtgB,EAAAA,EAAAA,KAAU,KACHmF,EAAAA,IACHvC,YAAW,KACTyG,EAASpG,QAAS49B,UACjB0Y,MAEJ,IAEH,MA2BMl9C,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBqf,GAGhD,0BAAK/2C,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAAC67C,GAAA,EAAD,CAAexU,QAASsU,EAAev7C,KAAK,WAG9C,0BAAKJ,UAAU,gCACb,2BAAMm3B,OAAO,GAAG9T,SA9BAjf,IACpBA,EAAEqH,iBAEGmB,EAASpG,SAId6c,EAASpW,KAwBH,mBAACmQ,GAAA,EAAD,CACEzV,IAAKiF,EACLK,MAAOA,EACPwZ,UAAWvZ,EACXqd,MAAOjN,EACPsC,MAAOA,EACPzS,SA7CiB/I,IACrBwb,GAASo8B,GACXA,IAGFgB,EAAS54C,EAAEiJ,OAAOJ,UA2CXA,EACC,mBAACjL,EAAA,EAAD,CAAQkL,KAAK,SAAS0mB,UAAWA,EAAW/rB,QAAM,GAAEjI,EAAK,aAEzD,mBAACoC,EAAA,EAAD,CACE0e,QAAM,EACNkT,UAAWA,EACX/rB,QAAM,EACN5H,QAAS88C,EAAgBG,EArClB,KACjB75B,MAsCWzjB,EAAK,mBAIXm9C,GACC,mBAACx/B,GAAA,EAAD,CACEvd,UAAU,SACV+B,OAAQk7C,EACR58B,MAAOzgB,EAAK,wBACZ2I,QAAS40C,IAER38C,EAAAA,EAAAA,GAAWZ,EAAK,4BAA6B,CAAC,KAAM,oBACrD,0BAAKI,UAAU,kBACb,mBAACgC,EAAA,EAAD,CACEE,MAAM,SACN2F,QAAM,EACN6Y,QAAM,EACN1gB,UAAU,wBACVC,QArDY,KACxBk9C,IACA95B,MAqDazjB,EAAK,kBAER,mBAACoC,EAAA,EAAD,CACEE,MAAM,UACN2F,QAAM,EACN6Y,QAAM,EACN1gB,UAAU,wBACVC,QAASk9C,GAERv9C,EAAK,mBCxGtB,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAsBC,IACjC,CACLg9C,eAAeC,EAAAA,EAAAA,IAAoBj9C,EAAQ,SAF3BD,EA5B4C,EAC9Did,SAAAA,EAAU8S,QAAAA,EAASktB,cAAAA,EAAejkB,eAAAA,MAElC,MAAM93B,GAAOC,EAAAA,EAAAA,KAQb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBY,EAAAA,GAAAA,sBAGhD,0BAAKt4B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAAC67C,GAAA,EAAD,CAAexU,QAASsU,EAAev7C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,QAC/CX,EAAK,wCAIV,0BAAKI,UAAU,gCACb,mBAACgC,EAAA,EAAD,CAAQ/B,QAjBM,KAClBy3B,EAAeY,EAAAA,GAAAA,WAgBoB14B,EAAK,oDCZtCk9C,GAAyBz6C,EAAAA,GAA0B,IAAM,IAmE/D,IAAe1B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAAsBC,IACjC,CACLg9C,eAAeC,EAAAA,EAAAA,IAAoBj9C,EAAQ,MAC3Cy+C,WAAYz+C,EAAO0+C,cAAcC,0BAHjB5+C,EAjEsC,EACxDi9C,cAAAA,EACAyB,WAAAA,EACAxpB,UAAAA,EACAhU,MAAAA,EACAo8B,WAAAA,EACA34B,SAAAA,EACA1H,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACAsoB,OAAAA,MAGA,MAAMnqC,GAAW5G,EAAAA,EAAAA,IAAyB,OAEnCiH,EAAO+vC,IAAY15C,EAAAA,EAAAA,IAAiB,KAE3CC,EAAAA,EAAAA,KAAU,KACHmF,EAAAA,IACHvC,YAAW,KACTyG,EAASpG,QAAS49B,UACjB0Y,MAEJ,IAEH,MAAMl9C,GAAOC,EAAAA,EAAAA,KAmBb,OAjBAic,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBqf,GAkBhD,0BAAK/2C,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAAC67C,GAAA,EAAD,CAAexU,QAASsU,EAAev7C,KAAK,WAG9C,0BAAKJ,UAAU,gCACb,mBAACod,GAAA,EAAD,CACEnQ,MAAOA,EACPtF,IAAKiF,EACL6Z,UAAU,UACV8D,MAAO3qB,EAAK,iBACZggB,MAAOA,EACPzS,SA5BmB/I,IACrBwb,GAASo8B,GACXA,IAGF,MAAMuB,EAAWn5C,EAAEiJ,OAAOJ,MAAM0oB,MAAM,EAAGynB,GAErCG,EAASj/C,SAAW8+C,GACtB/5B,EAASk6B,GAGXP,EAASO,GACTn5C,EAAEiJ,OAAOJ,MAAQswC,KAkBZ3pB,GAAa,mBAACzV,GAAA,EAAD,YCqVtB,IAAexd,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAD,IAA8BA,EAAO0+C,kBACrC,CAACh+C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,sBAAuB,gBAAiB,wBAC1D,gBAAiB,qBAJDZ,EA/Y6C,EAC/D24B,cAAAA,EACA2O,YAAAA,EACA9O,MAAAA,EACAH,KAAAA,EACAnD,UAAAA,EACAhU,MAAAA,EACA09B,uBAAAA,EACAjc,SAAAA,EACA1lB,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,EACA+uB,eAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,EACAC,cAAAA,OAEAt6C,EAAAA,EAAAA,KAAU,KACJ+5C,IACEjmB,IAAkBiB,EAAAA,GAAAA,sBACpBZ,EAAeY,EAAAA,GAAAA,2BACNjB,IAAkBiB,EAAAA,GAAAA,oBAC3BZ,EAAeY,EAAAA,GAAAA,2BAGlB,CAACjB,EAAeK,EAAgB4lB,IAEnC,MAAMQ,GAAoBn+C,EAAAA,EAAAA,KAAY,KACpC0hC,EAAS,CAAEn0B,KAAM,UACjBwqB,EAAeY,EAAAA,GAAAA,oBACd,CAAC+I,EAAU3J,IAERqmB,GAAoBp+C,EAAAA,EAAAA,KAAasN,IACrCo0B,EAAS,CAAEn0B,KAAM,cAAekqB,QAASnqB,IACzCyqB,EAAeY,EAAAA,GAAAA,2BACd,CAAC+I,EAAU3J,IAERsmB,GAA2Br+C,EAAAA,EAAAA,KAAY,KAC3C+3B,EAAeY,EAAAA,GAAAA,wBACd,CAACZ,IAEEumB,GAAwBt+C,EAAAA,EAAAA,KAAasN,IACzCo0B,EAAS,CAAEn0B,KAAM,UAAWkqB,QAASnqB,IACrCyqB,EAAeY,EAAAA,GAAAA,yBACd,CAAC+I,EAAU3J,IAERwmB,GAAyBv+C,EAAAA,EAAAA,KAAasN,IAC1Co0B,EAAS,CAAEn0B,KAAM,WAAYkqB,QAASnqB,IACtCuwC,EAAe,IACVtmB,EACHF,MAAO/pB,EACPkxC,UAAW,KACTzmB,EAAeY,EAAAA,GAAAA,2BAGlB,CAAC+I,EAAU3J,EAAgBR,EAAOsmB,IAE/BY,GAA8Bz+C,EAAAA,EAAAA,KAAasN,IAC/Co0B,EAAS,CAAEn0B,KAAM,qBAAsBkqB,QAASnqB,IAChDwwC,EAAc,CACZ5mB,gBAAiB5pB,EACjBkxC,UAAW,KACTzmB,EAAeY,EAAAA,GAAAA,6BAGlB,CAACmlB,EAAepc,EAAU3J,IAEvB2mB,GAA0B1+C,EAAAA,EAAAA,KAAasN,IAC3Co0B,EAAS,CAAEn0B,KAAM,cAAekqB,QAASnqB,IACzCyqB,EAAeY,EAAAA,GAAAA,8BACd,CAAC+I,EAAU3J,IAER4mB,GAA8B3+C,EAAAA,EAAAA,KAAY,KAC9C+3B,EAAeY,EAAAA,GAAAA,2BACd,CAACZ,IAEE6mB,GAA2B5+C,EAAAA,EAAAA,KAAasN,IAC5Co0B,EAAS,CAAEn0B,KAAM,UAAWkqB,QAASnqB,IACrCuwC,EAAe,IACVtmB,EACHH,KAAM9pB,EACNkxC,UAAW,KACTzmB,EAAeY,EAAAA,GAAAA,2BAGlB,CAAC+I,EAAU3J,EAAgBR,EAAOsmB,IAE/BgB,GAAgB7+C,EAAAA,EAAAA,KAAasN,IACjC4wC,EAAc,CACZhnB,gBAAiB5pB,EACjBkxC,UAAW,KACTzmB,EAAeY,EAAAA,GAAAA,cAGlB,CAACulB,EAAenmB,IAEb+mB,GAAqC9+C,EAAAA,EAAAA,KAAasN,IACtDo0B,EAAS,CAAEn0B,KAAM,qBAAsBkqB,QAASnqB,IAChDwwC,EAAc,CACZ5mB,gBAAiB5pB,EACjBkxC,UAAW,KACTzmB,EAAeY,EAAAA,GAAAA,yBAGlB,CAACmlB,EAAepc,EAAU3J,IAEvBgnB,GAAsB/+C,EAAAA,EAAAA,KAAasN,IACvCo0B,EAAS,CAAEn0B,KAAM,WAAYkqB,QAASnqB,IACtC0wC,EAAoB,IACfzmB,EACHF,MAAO/pB,EACPkxC,UAAW,KACTzmB,EAAeY,EAAAA,GAAAA,2BAGlB,CAAC+I,EAAU3J,EAAgBR,EAAOymB,IAE/BgB,GAAkBh/C,EAAAA,EAAAA,KAAaknB,IACnC+2B,EAAsB,CAAE/2B,KAAAA,MACvB,CAAC+2B,IAEEh+C,GAAOC,EAAAA,EAAAA,KAEb,OAAQw3B,GACN,KAAKiB,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACEukB,QAASiB,EACTpmB,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACEye,OAAQ1f,EACR/Z,YAAa1d,EAAK,uBAClBm8C,YAAan8C,EAAK,YAClByjB,SAAU06B,EACVrmB,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACEye,OAAQ1f,EACRykB,iBAAkB5kB,EAAMJ,SACxBxZ,YAAa1d,EAAK,yBAClBm8C,YAAan8C,EAAK,YAClByjB,SAAU26B,EACVtmB,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACE51B,KAAK,OACL4a,YAAa1d,EAAK,2BAClByjB,SAAU46B,EACVlH,OAAQ1f,EACRK,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACE51B,KAAK,QACLwK,KAAK,QACL0mB,UAAWA,EACXhU,MAAOA,EACPo8B,WAAY0B,EACZpgC,YAAa1d,EAAK,sBAClBm9C,eAAa,EACb15B,SAAU66B,EACVnH,OAAQ1f,EACRK,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,0BACH,OACE,mBAAC,GAAD,CACE1E,UAAWA,EACXhU,MAAOA,EACPo8B,WAAY0B,EACZr6B,SAAUs7B,EACV5H,OAAQ1f,EACRK,eAAgBA,EAChB/b,SAAUA,GAAYqqB,IAAgB1N,EAAAA,GAAAA,qBACtC7J,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB/b,SAAUA,EACV8S,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEye,OAAQ1f,EACRzD,UAAWA,EACXhU,MAAOA,EACPo8B,WAAY0B,EACZ3mB,KAAMA,EACN1T,SAAU+6B,EACV1mB,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEye,OAAQ1f,EACR/Z,YAAa1d,EAAK,+BAClByjB,SAAUg7B,EACV3mB,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEye,OAAQ1f,EACRykB,iBAAkB5kB,EAAMJ,SACxBxZ,YAAa1d,EAAK,yBAClByjB,SAAUi7B,EACV5mB,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACE1E,UAAWA,EACXhU,MAAOA,EACPo8B,WAAY0B,EACZh7C,KAAK,OACL4a,YAAa1d,EAAK,2BAClByjB,SAAUk7B,EACV7mB,eAAgBA,EAChB/b,SAAUA,GAAYqqB,IAAgB1N,EAAAA,GAAAA,qBACtC7J,QAASA,EACTsoB,OAAQ1f,IAId,KAAKiB,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACE1E,UAAWA,EACXhU,MAAOA,EACPo8B,WAAY0B,EACZ3mB,KAAMA,EACN1T,SAAUm7B,EACV9mB,eAAgBA,EAChB/b,SAAUA,EACV8S,QAASA,EACTsoB,OAAQ1f,IAId,KAAKiB,EAAAA,GAAAA,kCACH,OACE,mBAAC,GAAD,CACEye,OAAQ1f,EACRzD,UAAWA,EACXhU,MAAOA,EACPo8B,WAAY0B,EACZ3mB,KAAMA,EACN1T,SAAUo7B,EACV/mB,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACEye,OAAQ1f,EACR30B,KAAK,QACLwK,KAAK,QACLoQ,YAAa1d,EAAK,sBAClByjB,SAAUq7B,EACVhnB,eAAgBA,EAChB/b,SAAUA,GAAY,CACpB2c,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAj7B,SAAS2oC,GACXvX,QAASA,IAIf,KAAK6J,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEye,OAAQ1f,EACRzD,UAAWA,EACXhU,MAAOA,EACPo8B,WAAY0B,EACZr6B,SAAUs7B,EACVjnB,eAAgBA,EAChB/b,SAAUA,GAAYqqB,IAAgB1N,EAAAA,GAAAA,qBACtC7J,QAASA,IAIf,QACE,Y,eCrRN,SAASmwB,GAA0BjgD,EAAqBo4C,GACtD,MAAM,QAAE1C,GAAY11C,EAAOwS,SAC3B,OAAQ4lC,GACN,KAAKze,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO+b,EAAQO,YACjB,KAAKtc,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAO+b,EAAQU,SACjB,KAAKzc,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO+b,EAAQY,aACjB,KAAK3c,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAO+b,EAAQc,SACjB,KAAK7c,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO+b,EAAQgB,YAMrB,UAAe10C,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUo4C,OAAAA,MACT,MACE34B,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,GAJE,cAMJpC,GACEzd,EAEJ,MAAO,CACLyd,cAAAA,EACAkC,UAAAA,EACAC,QAASA,EAAQG,OACjBF,iBAAkBA,EAAiBE,OACnCsmB,kBAAmBxmB,EAAiBK,SACpCD,gBAAiBL,EAAQM,SACzB1N,SAAUytC,GAA0BjgD,EAAQo4C,OAGhD,CAAC13C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,wBArBpCZ,EAxIsE,EACxF0d,cAAAA,EACAyiC,YAAAA,EACA9H,OAAAA,EACA5lC,SAAAA,EACAmN,UAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAI,gBAAAA,EACAomB,kBAAAA,EACA8Z,mBAAAA,EACAnjC,SAAAA,EACA+b,eAAAA,EACAjJ,QAAAA,MAEA,MAAM7uB,GAAOC,EAAAA,EAAAA,KAEPk/C,GAAqBl9C,EAAAA,EAAAA,KAAQ,IAC5BsP,EAID0tC,EACK,IAAI1tC,EAAS8lC,gBAAiB9lC,EAAS+lC,cAEvC,IAAI/lC,EAASgmC,gBAAiBhmC,EAASimC,cANvC,IAQR,CAACyH,EAAa1tC,KACVge,EAAa6vB,IAAkB17C,EAAAA,EAAAA,IAAiB,KAChD27C,EAAeC,IAAoB57C,EAAAA,EAAAA,KAAkB,IACrD67C,EAAuBC,IAA4B97C,EAAAA,EAAAA,IAAmBy7C,GAEvE3gC,GAAQvc,EAAAA,EAAAA,KAAQ,KACpB,MAAMqjC,EAAmB3mB,GACrB4mB,EAAAA,EAAAA,GAAgB7mB,EAAWC,EAASC,EAAkB,YACtDrc,EACEijC,EAAqBxmB,GACvBumB,EAAAA,EAAAA,GAAgB7mB,EAAWM,EAAiBomB,EAAmB,iBAC/D7iC,EAEJ,GAAK+iC,GAAqBE,EAI1B,MAAO,IACDF,EACA,IACGA,EAAiBG,eACjBH,EAAiBI,YAEpB,MAEAF,EAAqBA,EAAmBE,WAAa,MAE1D,CAAChnB,EAAWC,EAASC,EAAkBI,EAAiBomB,IAErDO,GAAe1jC,EAAAA,EAAAA,KAAQ,KAC3B,GAAKuc,EAIL,OAAOA,EACJ7B,QAAQjc,KACLtB,EAAAA,EAAAA,IAASsB,EAAKlD,KAAOkD,EAAKlD,KAAOgf,IAAkBijC,EAAAA,EAAAA,IAAY/+C,OAE9D6uB,IACA3P,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAa7f,EAAMU,GAAO6uB,IACtC4vB,EAAmB1hD,SAASiD,EAAKlD,OAGrCygB,KAAI,EAAGzgB,GAAAA,KAASA,MAClB,CAACghB,EAAOhC,EAAexc,EAAMuvB,EAAa4vB,IAEvCO,GAAiC3/C,EAAAA,EAAAA,KAAasN,IAClDmyC,EAAyBnyC,GACzBiyC,GAAiB,KAChB,IAEG7C,GAAe18C,EAAAA,EAAAA,KAAY,KAC/Bm/C,EAAmB,CACjBpH,WAAYZ,GAAcC,GAC1B8H,YAAa11C,QAAQ01C,GACrBU,YAAaJ,IAGfznB,EAAeY,EAAAA,GAAAA,WACd,CAACumB,EAAaM,EAAuBznB,EAAgBqf,EAAQ+H,IAIhE,OAFAhjC,EAAAA,EAAAA,IAAeH,EAAU8S,EAASiJ,EAAgBqf,GAGhD,0BAAK/2C,UAAU,wBACb,mBAACw/C,GAAA,EAAD,CACEC,QAASla,GAAgB,GACzB1B,YAAasb,EACbrb,YAAa3U,EACb3S,kBAAiC5c,EAAdi/C,EAAmB,6BAAqC,6BAC3Ea,cAAc,0BACd3b,oBAAqBub,EACrB7iC,eAAgBuiC,IAGlB,mBAACviB,GAAA,EAAD,CACEjwB,QAASyyC,EACTh/C,QAASo8C,EACTj6C,UAAyBxC,EAAdi/C,EAAmB,uBAA+B,wBAE7D,wBAAG7+C,UAAU,2BCxHf41B,GAA0Bh4B,OAAOi4B,KAAKyC,EAAAA,IAAiBh6B,OAAS,EAGhEqhD,GAAiB,CACrBrnB,EAAAA,GAAAA,cACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,wBAGIsnB,GAAkB,CACtBtnB,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,kCAGIunB,GAAkB,CACtBvnB,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,uBAGIwnB,GAA+B,CACnCxnB,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,kCAGIynB,GAAkC,CACtCznB,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGI0nB,GAAgC,CACpC1nB,EAAAA,GAAAA,mCACAA,EAAAA,GAAAA,mCAGI2nB,GAA6B,CACjC3nB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAGI4nB,GAA8B,CAClC5nB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAiRF,IAAe33B,EAAAA,EAAAA,KApQgB,EAC7Bgb,SAAAA,EACA0b,cAAAA,EACA8oB,aAAAA,EACAC,gBAAAA,EACA1oB,eAAAA,EACAjJ,QAAAA,EACA4xB,qBAAAA,MAEA,MAAOC,EAAYC,IrCnDZC,EAAAA,GAAAA,GAAWvpB,GAAcL,IqCqD1BqP,GAActmC,EAAAA,EAAAA,KAAY,KAE5B03B,IAAkBiB,EAAAA,GAAAA,qBACfjB,IAAkBiB,EAAAA,GAAAA,mBAClBjB,IAAkBiB,EAAAA,GAAAA,+BAErBnyB,YAAW,KACTi6C,EAAgB,CAAElzC,KAAM,YA1FJ,KA+FtBmqB,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,qBAUvB7J,IAR4B,WAAtB0xB,EAAapd,KACfrL,EAAeY,EAAAA,GAAAA,qBAEfZ,EAAeY,EAAAA,GAAAA,qBAMlB,CACD6nB,EAAapd,KAAMqd,EACnB/oB,EAAe5I,EAASiJ,IAGpB+oB,GAAmB9gD,EAAAA,EAAAA,KAAY,KACnCygD,EAAgB,CAAElzC,KAAM,gBACxB+4B,MACC,CAACma,EAAiBna,IA8LrB,SAASya,EAAqBC,EAAyBC,EAAiBC,GACtE,OACE,sCACE,mBAAC,GAAD,CACExpB,cAAeA,EACf5I,QAASwX,EACT1O,aAAckpB,EACd/oB,eAAgBA,EAChBJ,eAAgB6oB,EAAa9d,WApMrC,SAAqCse,EAAyB5J,GAC5D,MAAM+J,EAA+C,CACnD,CAACxoB,EAAAA,GAAAA,oBAAqCwnB,GAA6BziD,SAAS05C,GAC5E,CAACze,EAAAA,GAAAA,iBAAkCynB,GAAgC1iD,SAAS05C,GAC5E,CAACze,EAAAA,GAAAA,qBAAsC0nB,GAA8B3iD,SAAS05C,GAC9E,CAACze,EAAAA,GAAAA,mBAAoC2nB,GAA2B5iD,SAAS05C,GACzE,CAACze,EAAAA,GAAAA,mBAAoC4nB,GAA4B7iD,SAAS05C,IAGtEgK,EAAgBpB,GAAetiD,SAAS05C,GACxCiK,EAAkBpB,GAAgBviD,SAAS05C,GAC3CkK,EAAkBpB,GAAgBxiD,SAAS05C,IAC5CgK,GACAnjD,OAAOi4B,KAAKirB,GAAqBzjD,SAAS05C,EAAOjnC,aACjDlS,OAAOsjD,OAAOJ,GAAqBnc,MAAMxkC,IAAgB,IAARA,IAEtD,OAAQk3B,GACN,KAAKiB,EAAAA,GAAAA,KACH,OACE,mBAAC,GAAD,CAAcZ,eAAgBA,EAAgB/b,SAAUA,EAAU8S,QAASwX,IAE/E,KAAK3N,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB/b,SAAUA,GAAYglC,EACtBlyB,QAASwX,IAGf,KAAK3N,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB/b,SAAUglC,GACP5J,IAAWze,EAAAA,GAAAA,4BACXye,IAAWze,EAAAA,GAAAA,uBACX2oB,GAAmBD,EACtBvyB,QAASwX,IAGf,KAAK3N,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CAAuBZ,eAAgBA,EAAgB/b,SAAUglC,EAAgBlyB,QAASwX,IAE9F,KAAK3N,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CAAqBZ,eAAgBA,EAAgB/b,SAAUglC,EAAgBlyB,QAASwX,IAE5F,KAAK3N,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB/b,SAAUglC,GAAkBM,GAAmBF,EAC/CtyB,QAASwX,IAGf,KAAK3N,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CAAkBZ,eAAgBA,EAAgB/b,SAAUglC,EAAgBlyB,QAASwX,IAEzF,KAAK3N,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB/b,SAAUglC,GAAkB5J,IAAWze,EAAAA,GAAAA,2BACvC7J,QAASwX,IAGf,KAAK3N,EAAAA,GAAAA,2BACH,OACE,mBAAC6oB,GAAD,CACEzpB,eAAgBA,EAChB/b,SAAUglC,EACVlyB,QAASwX,IAGf,KAAK3N,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB/b,SAAUglC,EACVlyB,QAASwX,IAGf,KAAK3N,EAAAA,GAAAA,oBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChB/b,SAAUglC,EACVlyB,QAASwX,IAGf,KAAK3N,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACEye,OAAQ1f,EACRK,eAAgBA,EAChB/b,SAAUglC,GAAkBG,EAAoBzpB,GAChD5I,QAASwX,IAIf,KAAK3N,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEumB,aAAW,EACX9H,OAAQ1f,EACRK,eAAgBA,EAChB/b,SAAUglC,GAAkBG,EAAoBzpB,GAChD5I,QAASwX,IAIf,KAAK3N,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,gCACH,OACE,mBAAC,GAAD,CACEye,OAAQ1f,EACRK,eAAgBA,EAChB/b,SAAUglC,EACVlyB,QAASwX,IAIf,KAAK3N,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEjB,cAAeA,EACf2O,YAAa+Q,EACb7f,MAAOipB,EACP9e,SAAU+e,EACVzkC,SAAUglC,EACVjpB,eAAgBA,EAChBjJ,QAASwX,IAIf,KAAK3N,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEjB,cAAeA,EACfH,MAAOopB,EACPjf,SAAUkf,EACVva,YAAa+Q,EACbp7B,SAAUglC,EACVjpB,eAAgBA,EAChBjJ,QAASwX,IAIf,QACE,QAcCmb,CAA4BT,EAAgBE,IAKnD,OACE,mBAAC5kC,EAAA,EAAD,CACE7e,GAAG,WACH+e,KAAMkkC,EAAuB,OAASgB,EAAAA,GACtCnlC,UAAWmb,EACXV,YAAaf,IAEZ8qB,MCjUD1yB,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAO,GA+DnD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQuvB,QAAS2rB,GAAel7C,EAAO+xB,aAAe,IAC9CrS,KAAMgQ,GAAc1vB,EAAO2vB,MAEnC,MAAO,CACLD,UAAAA,EACAwrB,WAAAA,EACAyH,iBAAkB3iD,EAAO2iD,qBAG7B,CAACjiD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kBAAmB,cAXvDZ,EA7D2C,EAC7Did,SAAAA,EAAU8S,QAAAA,EACVlS,OAAAA,EAAQ8R,UAAAA,EAAWwrB,WAAAA,EAAYlrB,gBAAAA,EAAiBC,SAAAA,EAAU0yB,iBAAAA,OAI1D/9C,EAAAA,EAAAA,KAAU,KACRyqB,IAAa,KACXW,WAIJ7S,EAAAA,EAAAA,IAAeH,EAAU8S,GAEzB,MAAMb,GAAcjuB,EAAAA,EAAAA,KAAavC,IAC/BwxB,EAAS,CAAExxB,GAAAA,EAAI6xB,sBAAsB,MACpC,CAACL,IAEErQ,GAAU1c,EAAAA,EAAAA,KAAQ,KACtB,IAAKg4C,EACH,OAGF,MAAM0H,EAAYhlC,EAASs9B,EAAWt9B,QAAQnf,IAC5C,MAAMiD,EAAOguB,EAAUjxB,GACvB,IAAKiD,EACH,OAAO,EAET,MAAM+xB,GAAWC,EAAAA,EAAAA,IAAgBhyB,GACjC,OAAO+xB,IAAY5S,EAAAA,GAAAA,GAAY4S,EAAU7V,MACtCs9B,EAEL,OAAO2H,EAAAA,EAAAA,IAAYD,EAAWlzB,OAAWlsB,EAAWm/C,KACnD,CAACzH,EAAYt9B,EAAQ8R,EAAWizB,KAE5B1kC,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB3a,EAAWoc,EAASpV,QAAQoT,IAE7E,OACE,mBAACkB,GAAA,EAAD,CAAgBC,MAAOd,EAAae,WAAYd,EAAS7c,UAAU,2BAChE4c,MAAAA,GAAAA,EAAate,OACZse,EAAYiB,KAAKzgB,GACf,mBAAC0gB,GAAA,EAAD,CACE3d,IAAK/C,EACL4C,UAAU,sBACVC,QAAS,IAAM2tB,EAAYxwB,GAC3ByK,QAASxF,EAAAA,IAET,mBAAC0b,GAAA,EAAD,CAAiBE,OAAQ7gB,EAAIy7B,eAAa,EAAC/K,WAAW,aAGxDlR,IAAgBA,EAAYte,OAC9B,wBAAG0B,UAAU,aAAaG,IAAI,aAAaI,IAAI,QAC5Cgc,EAAOje,OAAS,mCAAqC,0BAGxD,mBAAC6f,GAAA,EAAD,CAAShe,IAAI,iBCnDf6tB,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAO,GAsHnD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQuvB,QAASuC,GAAoB9xB,EAAO+xB,aAAe,IACnDrS,KAAMgQ,GAAc1vB,EAAO2vB,OAC3BjQ,KAAMC,GAAc3f,EAAOyf,OAC7B,cAAEhC,GAAkBzd,GAGxBmzB,MAAO3C,EADH,eAEJwB,EAFI,cAGJC,EAHI,aAIJC,GACElyB,EAAO6vB,cACHN,QAAS6C,GAAkBH,GAAiB,IAC5C1C,QAAS+C,GAAiBJ,GAAgB,GAElD,MAAO,CACLzU,cAAAA,EACAiS,UAAAA,EACA/P,UAAAA,EACAmS,gBAAAA,EACAtB,YAAAA,EACAsyB,YAAa9wB,MAAAA,OAAF,EAAEA,EAAgBvS,MAC7B2S,cAAAA,EACAE,aAAAA,MAGJ,CAAC5xB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kBAAmB,0BA3BvDZ,EApH4C,EAC9D6hB,UAAAA,EACA5E,SAAAA,EACA+lC,kBAAAA,EACAC,0BAAAA,EACAC,WAAAA,EACAnzB,QAAAA,EACArS,cAAAA,EACAiS,UAAAA,EACA/P,UAAAA,EACAmS,gBAAAA,EACAtB,YAAAA,EACAsyB,YAAAA,EACAxwB,aAAAA,EACAF,cAAAA,EACApC,gBAAAA,EACAkzB,qBAAAA,OAIAt+C,EAAAA,EAAAA,KAAU,KACRyqB,IAAa,KACXW,UAIJ,MAAM/uB,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAU8S,GAEzB,MAAMxR,GAAqBtd,EAAAA,EAAAA,KAAamyB,IACtC+vB,EAAqB,CAAE/vB,MAAAA,MACtB,CAAC+vB,IAEEtc,GAAe1jC,EAAAA,EAAAA,KAAQ,KAC3B,MAAMg4C,EAAappB,GACfpR,EAAAA,EAAAA,IAAYoR,EAAgBlU,QAAQnf,GAAOA,IAAOgf,IAAgBkC,GAClE,GAEJ,IAAK6Q,EACH,OAAO0qB,EAGT,MAAM1nB,EAAkB0nB,EAAWt9B,QAAQnf,IACzC,MAAMiD,EAAOguB,EAAUjxB,GACvB,IAAKiD,EACH,OAAO,EAET,MAAM+xB,GAAWC,EAAAA,EAAAA,IAAgBhyB,GACjC,OAAO+xB,IAAY5S,EAAAA,GAAAA,GAAY4S,EAAUjD,MAG3C,OAAO9P,EAAAA,EAAAA,KACLD,EAAAA,EAAAA,IAAO,IACF+S,KACClB,GAAgB,MAChBF,GAAiB,KACpBxU,QAAQ69B,IACT,MAAM/5C,EAAOguB,EAAU+rB,GAEvB,OAAQ/5C,KAASyhD,EAAAA,EAAAA,IAAUzhD,IAASA,EAAK0hD,uBAE3CzjC,GACA,EACAojC,KAED,CACDjxB,EAAiBnS,EAAW6Q,EAAa8B,EAAcF,EAAe2wB,EACtEtlC,EAAeiS,IAGX2zB,GAAiBriD,EAAAA,EAAAA,KAAY,MAC7B+hD,EAAkBpjD,QAAUiiB,KAC9BshC,EAAqB,CAAE/vB,MAAO,KAC9B8vB,OAED,CAACF,EAAkBpjD,OAAQiiB,EAAWshC,EAAsBD,IAE/D,OACE,0BAAK5hD,UAAU,kBACb,0BAAKA,UAAU,eACb,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAASwuB,EACTrsB,UAAU,uBAEV,wBAAGpC,UAAU,qBAEf,6BAAKJ,EAAK,qBAEZ,0BAAKI,UAAU,wBACb,mBAACw/C,GAAA,EAAD,CACEC,QAASla,EACT1B,YAAa6d,EACb5d,YAAa3U,EACb3S,kBAAmB5c,EAAK,iBACxB8/C,cAAc,0BACd9rB,UAAW6tB,EACX1d,oBAAqB4d,EACrBllC,eAAgBQ,IAGlB,mBAACwf,GAAA,EAAD,CACEjwB,QAASrD,QAAQu4C,EAAkBpjD,QAAUiiB,GAC7CtgB,QAAS+hD,EACT5/C,UAAWme,EAAY,2BAA6B,0BAEpD,wBAAGvgB,UAAU,4BCwCvB,IAAeW,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEoE,SAAUk/C,EACVriC,MAAOsiC,GACLvjD,EAAOwjD,cAAgB,GAE3B,MAAO,CACLF,iBAAAA,EACAC,cAAAA,MAGJ,CAAC7iD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAAmB,mBAbHZ,EA3J4C,EAC9D6hB,UAAAA,EACA5E,SAAAA,EACAymC,UAAAA,EACA3zB,QAAAA,EACAwzB,iBAAAA,EACAC,cAAAA,EACAG,gBAAAA,EACAC,cAAAA,MAEA,MAAM1iD,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAU8S,GAEzB,MAAOpO,EAAOkiC,IAAYj/C,EAAAA,EAAAA,IAAS,KAC5Bk/C,EAAOC,IAAYn/C,EAAAA,EAAAA,IAAS,KAC5BiP,EAAO+oB,IAAYh4B,EAAAA,EAAAA,OACnBsc,EAAOyb,IAAY/3B,EAAAA,EAAAA,MAEpBo/C,EAAsB,4BACtBC,EAAyB,+BACzBC,EAAwB,mDAExBhvB,EAAYquB,IAAqBY,EAAAA,GAAAA,WAEjCC,GAAoBnjD,EAAAA,EAAAA,KAAayE,IACrC,MAAM,MAAE6I,GAAU7I,EAAE+G,cACdoyC,EAAWtwC,EAAM2Y,QAAQ,OAAQ,IAEvC28B,EAAShF,GAELA,IAAatwC,IACf7I,EAAE+G,cAAc8B,MAAQswC,KAEzB,IAEGlzB,GAA0B1qB,EAAAA,EAAAA,KAAayE,IAC3Cq+C,EAASr+C,EAAE+G,cAAc8B,SACxB,IAEG81C,GAAoBpjD,EAAAA,EAAAA,KAAY,KAC/B0gB,EAAM/hB,OAKP8jD,EAAU9jD,OAhDgB,IAiD5B+8B,EAASunB,GAIXP,EAAgB,CACdhiC,MAAAA,EACA9N,MAAAA,EACA6vC,UAAAA,IAZA/mB,EAASqnB,KAcV,CAACriC,EAAO+hC,EAAWC,EAAiB9vC,EAAOmwC,EAAqBE,IAE7DI,GAAsBrjD,EAAAA,EAAAA,KAAY,KACjC0gB,EAAM/hB,OAKXgkD,EAAc,CACZjiC,MAAAA,EACAmiC,MAAAA,EACAjwC,MAAAA,EACA6vC,UAAAA,IARA/mB,EAASsnB,KAUV,CAACtiC,EAAOiiC,EAAeE,EAAOjwC,EAAO6vC,EAAWO,KAEnDp/C,EAAAA,EAAAA,KAAU,KACJ0+C,IAAqBY,EAAAA,GAAAA,UACvBp0B,GAAQ,KAET,CAACwzB,EAAkBxzB,IAEtB,MAAMw0B,EAAiBf,GAAiBtiD,EAAKsiD,KAC3CtiC,IAAU8iC,GAAuB9iC,IAAU+iC,EACvC/iC,OACAzd,GAGN,OACE,0BAAKnC,UAAU,WACb,0BAAKA,UAAU,eACb,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAAS,IAAMwuB,IACfrsB,UAAU,8BAEV,wBAAGpC,UAAU,qBAEf,6BAAKJ,EAAK2gB,EAAY,aAAe,cAEvC,0BAAKvgB,UAAU,wBACb,mBAACu8B,GAAA,EAAD,CACEpvB,SAAUmuB,EACVjb,MAAOzgB,EAAK,cAEd,mBAACwd,GAAA,EAAD,CACEnQ,MAAOoT,EACPlT,SAAU21C,EACVv4B,MAAO3qB,EAAK2gB,EAAY,mBAAqB,aAC7CX,MAAOA,IAAU8iC,GAAuB9iC,IAAU+iC,EAAyB/iC,OAAQzd,IAEpFoe,GACC,sCACE,mBAACnD,GAAA,EAAD,CACEnQ,MAAOu1C,EACPr1C,SAAUkd,EACVE,MAAO3qB,EAAK,oCAEd,wBAAGI,UAAU,QAAQJ,EAAK,qBAI7BqjD,GACC,wBAAGjjD,UAAU,SAASijD,GAGvBb,EAAU9jD,OAAS,GAClB,sCACE,yBAAI0B,UAAU,wBAAwBJ,EAAK,6BAA8BwiD,EAAU9jD,OAAQ,MAE3F,0BAAK0B,UAAU,mCACZoiD,EAAUvkC,KAAKzgB,GACd,mBAAC0gB,GAAA,EAAD,CAAU0lB,UAAQ,EAACxjC,UAAU,uBAC3B,mBAAC+d,GAAA,EAAD,CAAiBE,OAAQ7gB,UAQrC,mBAACq/B,GAAA,EAAD,CACEjwB,QAA0B,IAAjB6T,EAAM/hB,OACf2B,QAASsgB,EAAYyiC,EAAsBD,EAC3Ch2C,SAAU6mB,EACVxxB,UAAWme,EAAY3gB,EAAK,8BAAgC,gBAE3Dg0B,EACC,mBAAC/iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,2BCnKjBkjD,GAAetlD,OAAOi4B,KAAKstB,EAAAA,IAAmB7kD,OAAS,EAsD7D,IAAeqC,EAAAA,EAAAA,KApDe,EAC5Bgb,SAAAA,EACA4E,UAAAA,GAAY,EACZ+V,QAAAA,EACA8sB,gBAAAA,EACA30B,QAAAA,MAEA,MAAO40B,EAAkBC,IAAuBhgD,EAAAA,EAAAA,IAAmB,IAE7D0+C,GAAiBriD,EAAAA,EAAAA,KAAY,KACjCyjD,EAAgB7iC,EAAY4iC,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,iBAC/D,CAAC5iC,EAAW6iC,IAEf,OACE,mBAACnnC,EAAA,EAAD,CACE7e,GAAG,UACH+e,KAAMklC,EAAAA,GACN1qB,YAAausB,GACbhnC,UAAWoa,IAETitB,IACA,OAAQjtB,GACN,KAAK6sB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACE5iC,UAAWA,EACX5E,SAAUA,EACV+lC,kBAAmB2B,EACnB1B,0BAA2B2B,EAC3B1B,WAAYI,EACZvzB,QAASA,IAGf,KAAK00B,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACE5iC,UAAWA,EACX5E,SAAU4nC,GAAgB5nC,EAC1BymC,UAAWiB,EACX50B,QAASA,IAGf,QACE,c,eCpDZ,MAwBA,IAAe9tB,EAAAA,EAAAA,KAxBqB,EAAGgb,SAAAA,EAAU8S,QAAAA,EAAS20B,gBAAAA,MACxD,MAAMxjD,GAAOC,EAAAA,EAAAA,KAIb,OAFAic,EAAAA,EAAAA,IAAeH,EAAU8S,EAAS20B,EAAiBD,EAAAA,GAAAA,UAGjD,0BAAKnjD,UAAU,iBACb,0BAAKA,UAAU,eACb,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAASwuB,EACTrsB,UAAU,uBAEV,wBAAGpC,UAAU,qBAEf,6BAAKJ,EAAK,mBAEZ,mBAAC4jD,GAAA,EAAD,CAAUC,WAAW,WAAW9nC,SAAUA,Q,eCPhD,MAsEA,IAAehb,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAQ0f,KAAMugB,EAAaF,WAAYglB,GAAqB/kD,EAAOogC,YAEnE,MAAO,CACLH,YAAAA,EACA8kB,iBAAAA,MAGJ,CAACrkD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,qBATpCZ,EAtE+C,EACjEqD,OAAAA,EACAnD,OAAAA,EACAggC,YAAAA,EACA8kB,iBAAAA,EACAn7C,QAAAA,EACAo7C,oBAAAA,EACAC,gBAAAA,MAEA,MAAMhkD,GAAOC,EAAAA,EAAAA,KAEPgkD,GAA2BhiD,EAAAA,EAAAA,KAAQ,IAClC+8B,EAIEhhC,OAAOi4B,KAAK+I,GAAaoZ,QAAO,CAACC,EAAQ5V,KAC9C,MAAM,gBAAEN,EAAF,cAAmB+hB,GAAkBllB,EAAYxxB,OAAOi1B,IAK9D,OAJIN,EAAgB1kC,SAASuB,IAAWklD,MAAAA,GAAAA,EAAezmD,SAASuB,KAC9Dq5C,EAAO1yB,KAAK8c,GAGP4V,IACN,IAVM,IAWR,CAACr5C,EAAQggC,KAELmlB,EAAmBC,IAAwB1gD,EAAAA,EAAAA,IAAmBugD,GAE/DI,GAAUpiD,EAAAA,EAAAA,KAAQ,KACf6hD,MAAAA,OAAA,EAAAA,EAAkB7lC,KAAKwkB,IAAD,CAC3B9X,MAAOqU,EAAcA,EAAYyD,GAAUhiB,MAAQ,GACnDpT,MAAO0V,OAAO0f,SACT,IACN,CAACqhB,EAAkB9kB,IAEhByd,GAAe18C,EAAAA,EAAAA,KAAY,KAC/B,MAAMukD,EAAcL,EAAyBtnC,QAAQnf,IAAQ2mD,EAAkB1mD,SAASD,KAClF+mD,EAAWJ,EAAkBxnC,QAAQnf,IAAQymD,EAAyBxmD,SAASD,KAErFwmD,EAAgB,CAAEhlD,OAAAA,EAAQslD,YAAAA,EAAaC,SAAAA,IACvC57C,MACC,CAAC3J,EAAQglD,EAAiBC,EAA0Bt7C,EAASw7C,IAEhE,GAAKnlB,GAAgB8kB,EAIrB,OACE,mBAACnmC,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASA,EACTo7C,oBAAqBA,EACrBn7B,QAAS6zB,EACTr8C,UAAU,SACVqgB,MAAOzgB,EAAK,gBAEZ,mBAACwkD,GAAA,EAAD,CACE35B,QAASw5B,EACTv5B,SAAUq5B,EACV52C,SAAU62C,EACV/hD,OAAK,IAEP,mBAACD,EAAA,EAAD,CAAQE,MAAM,UAAUlC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASo8C,GACvEz8C,EAAK,gBAER,mBAACoC,EAAA,EAAD,CAAQhC,UAAU,wBAAwB0gB,QAAM,EAACzgB,QAASsI,GAAU3I,EAAK,gB,yBCd/E,SAASykD,GAAaC,GACpB,OAAIA,EACK,4BAEF,wBCpFT,IAAIC,GAEJ,MAAMC,GAAwC,CAC5CC,MAAM,EACNC,WAAW,EACXC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZ,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,MAAM,EACNC,KAAK,GAoBD55C,GAAkBrH,IACtB,MAAMgM,EAAS,WAAYhM,EAAIA,EAAEgM,OAHhBhM,CAAAA,GAAgC,mBAAoBA,EAAIA,EAAEkhD,eAAe,GAAGC,QAAU,EAG7DC,CAAUphD,KAGjDmgD,KAEGA,GAAaxrC,SAAS3U,EAAEiJ,SAExBk3C,GAAahnD,WAAa,GAAK6S,GAAU,GAEzCm0C,GAAahnD,WAAcgnD,GAAakB,aAAelB,GAAa/mD,cAAiB4S,GAAU,IAEnGhM,EAAEqH,kBAIN,SAASi6C,GAA4BthD,GAC/BogD,GAAapgD,EAAEjE,OAlCrB,SAAmBkN,GACjB,KAAKA,GAAYA,aAAkBs4C,aAAc,OAAO,EACxD,MAAMjoD,EAAU2P,EACVu4C,EAAUloD,EAAQkoD,QAAQpP,cAChC,GAAgB,aAAZoP,EAAwB,OAAO,EACnC,GAAgB,UAAZA,EAAqB,OAAO,EAChC,MAAM14C,EAAOxP,EAAQmoD,aAAa,QAClC,QAAK34C,GACc,CACjB,OAAQ,WAAY,SAAU,QAAS,MAAO,MAC9C,SAAU,OAAQ,WAAY,iBAAkB,OAAQ,QAAS,QAEjDqG,QAAQrG,EAAKspC,gBAAkB,EAsBrBsP,CAAU1hD,EAAEiJ,SACtCjJ,EAAEqH,iBAIC,SAASs6C,GAAiB1sC,GAC/BkrC,GAAelrC,EAEftd,SAASiI,iBAAiB,QAASyH,GAAgB,CAAEu6C,SAAS,IAC9DjqD,SAASiI,iBAAiB,YAAayH,GAAgB,CAAEu6C,SAAS,IAClEjqD,SAASkqD,UAAYP,GAGhB,SAASQ,KACd3B,QAAepiD,EACfpG,SAASkI,oBAAoB,QAASwH,IACtC1P,SAASkI,oBAAoB,YAAawH,IAE1C1P,SAASkqD,UAAY,K,0BChBvB,MAsHA,GApHyC,EACvClkD,OAAAA,EACA/D,QAAAA,EACAmoD,OAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,SAAAA,EACA77B,UAAAA,EACAC,UAAAA,EACA67B,WAAAA,EACAC,eAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,UAAAA,EACAh8B,YAAAA,EACAnqB,cAAAA,EACAomD,QAAAA,EACAC,OAAAA,EACAC,MAAAA,EACA39B,QAAAA,EACApoB,UAAAA,EACA8qB,SAAAA,EACAk7B,SAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACA56B,SAAAA,EACA66B,OAAAA,EACAC,aAAAA,EACAh/C,QAAAA,EACAo7C,oBAAAA,EACA6D,WAAAA,EACAC,WAAAA,MAGA,MAAMC,GAAU1hD,EAAAA,EAAAA,IAAuB,MACjC2hD,EF9ED,SACL3pD,EAAqB4pD,EAA0BJ,GAE/C,MAAM/8B,EAAwB,GACxBxnB,GAAO4kD,EAAAA,EAAAA,IAAe7pD,GACtBuU,GAAQC,EAAAA,EAAAA,IAAgBxU,MACvB6U,EAAAA,EAAAA,IAAuB7U,QAA6CmE,GAAlCwQ,EAAAA,EAAAA,IAAuB3U,IAC1D0oC,GAAYhlC,EAAAA,EAAAA,IAAoB1D,EAAS,UACzC8pD,EAAmBv1C,IAAUm0B,IAAaqhB,EAAAA,EAAAA,IAAuB/pD,KAAagqD,GAAAA,GAC9EC,EAAYlkD,OAAOmkD,eAgBzB,GAdIJ,GACFr9B,EAAQlF,KAAK,CACXgF,MAAO,yBACPmvB,QAAS,KACPyO,QAAQC,QAAQ1hB,EAAY2hB,GAAAA,GAAkB3hB,EAAW9xB,EAAAA,GAAAA,SAA0BrC,EAAO/B,SACvFqvB,KAAKyoB,GAAAA,IAEJV,GACFA,OAMJ3kD,EAAM,OAER,MAAMqhD,EAAen7C,SACnB8+C,MAAAA,GAAA,UAAAA,EAAWM,kBAAX,eAAuBC,aACnBP,EAAUM,WAAWC,WAA2BrrD,QAAQ,4BACD,KAAxD8qD,EAAUn4C,WAAW8V,QAAQ,kBAAmB,KAGrD6E,EAAQlF,KAAK,CACXgF,MAAO85B,GAAaC,GACpB5K,QAAS,KACP,MAAM+O,EAAgBnE,GAAgB2D,EAAYA,EAAUn4C,WAAa7M,GACzEylD,EAAAA,GAAAA,IAAoBD,GAEhBb,GACFA,OAmBR,OAbIJ,GACF/8B,EAAQlF,KAAK,CACXgF,MAAO,gCACPmvB,QAAS,KACP8N,IAEII,GACFA,OAMDn9B,EEmBak+B,CAAsB3qD,EAASuK,EAASu+C,EAAcU,OAAarlD,GAEjFymD,GAAoBjpD,EAAAA,EAAAA,KAAY,IAC7B5D,SAASY,cAAe,+CAA8CqB,EAAQZ,SACpF,CAACY,EAAQZ,KAENyrD,GAAiBlpD,EAAAA,EAAAA,KACrB,IAAM5D,SAASY,cAAc,2BAC7B,IAGImsD,GAAiBnpD,EAAAA,EAAAA,KACrB,IAAM5D,SAASY,cAAc,gCAC7B,KAGI,UACJ6F,EADI,UACOumD,EADP,MACkBjrD,EADlB,UACyBkrD,EADzB,WACoCC,IACtCC,EAAAA,GAAAA,GACF/C,EACAyC,EACAC,EACAC,EA/DoB,GAiEnB/sD,SAASY,cAAc,iBAAiCa,eAG3D+F,EAAAA,EAAAA,KAAU,KACRwiD,GAAiBkD,EAAavB,EAAQlhD,aAAUrE,GAEzC+jD,KACN,CAAC+C,IAEJ,MAAMrpD,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACspD,GAAA,EAAD,CACExhD,IAAK+/C,EACL3lD,OAAQA,EACRS,UAAWA,EACXumD,UAAWA,EACXjrD,MAAOA,EACPkrD,UAAWA,EACXhpD,UAAU,2BACVuI,QAASA,EACTo7C,oBAAqBA,GAEpByC,GAAc,mBAAC3jD,EAAA,EAAD,CAAUC,KAAK,eAAezC,QAASqnD,GAAS1nD,EAAK,wBACnEymD,GACC,mBAAC5jD,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAASsnD,GAAe3nD,EAAK,4BAExD0mD,GAAY,mBAAC7jD,EAAA,EAAD,CAAUC,KAAK,QAAQzC,QAAS+mD,GAAUpnD,EAAK,UAC3D2mD,GAAW,mBAAC9jD,EAAA,EAAD,CAAUC,KAAK,OAAOzC,QAASgnD,GAASrnD,EAAK,SACxD+mD,GACC,mBAAClkD,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAASmnD,GAAgBxnD,EAAK,mBAEzDgnD,GACC,mBAACnkD,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAASonD,GAAkBznD,EAAK,iCAE3DinD,GAAWc,EAAY9pC,KAAK4M,GAC3B,mBAAChoB,EAAA,EAAD,CAAUtC,IAAKsqB,EAAQF,MAAO7nB,KAAK,OAAOzC,QAASwqB,EAAQivB,SAAU95C,EAAK6qB,EAAQF,UAEnFi8B,GAAU,mBAAC/jD,EAAA,EAAD,CAAUC,KAAK,MAAMzC,QAASinD,GAAQtnD,EAAK,cACrD6mD,GAAY,mBAAChkD,EAAA,EAAD,CAAUC,KAAK,QAAQzC,QAASspB,GAAU3pB,EAAK,gBAC3DmrB,GACC,mBAACtoB,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAASwnD,GAChB7nD,EAAhBgB,EAAqB,8BAAsC,uBAG/D8lD,GAAc,mBAACjkD,EAAA,EAAD,CAAUC,KAAK,UAAUzC,QAASkB,GAAYvB,EAAK,YACjEmnD,GAAa,mBAACtkD,EAAA,EAAD,CAAUC,KAAK,SAASzC,QAASwsB,GAAW7sB,EAAK,kBAC9DirB,GAAa,mBAACpoB,EAAA,EAAD,CAAUC,KAAK,OAAOzC,QAASknD,GAAWvnD,EAAK,2BAC5DgrB,GAAa,mBAACnoB,EAAA,EAAD,CAAU+pB,aAAW,EAAC9pB,KAAK,SAASzC,QAASgsB,GAAWrsB,EAAK,aCgJjF,IAAee,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUX,QAAAA,EAAS2sB,gBAAAA,MAClB,MAAM,SAAE7Z,IAAayW,EAAAA,EAAAA,IAAyB5oB,IAAW,GACnD80B,GAAkB21B,EAAAA,EAAAA,IAAwBzqD,EAAQX,EAAQY,SAC1D,UACJyqD,EADI,SAEJ/C,EAFI,OAGJE,EAHI,SAIJC,EAJI,UAKJ77B,EALI,UAMJC,EANI,QAOJ07B,EAPI,WAQJG,EARI,eASJC,EATI,iBAUJC,EAVI,QAWJC,EAXI,YAYJC,EAZI,UAaJC,EAbI,YAcJh8B,GACGja,IAAY2W,EAAAA,EAAAA,IAA4B9oB,EAAQX,EAAS8S,IAAc,GACtEgc,EAA+B,WAApBnC,EACX2+B,EAAkC,cAApB3+B,EAEpB,MAAO,CACL0+B,UAAAA,EACAjD,WAAYkD,EACZjD,cAAeiD,EACfhD,UAAWx5B,IAAaw8B,GAAehD,EACvCE,QAAS8C,GAAe9C,EACxBC,UAAW6C,GAAe7C,EAC1B77B,UAAAA,EACAC,UAAAA,EACA07B,SAAUz5B,GAAYy5B,EACtBG,YAAa4C,GAAe5C,EAC5BC,gBAAiB2C,GAAe3C,EAChCC,kBAAmB0C,GAAe1C,EAClCC,QAAAA,EACAC,aAAcwC,GAAexC,EAC7BC,UAAAA,EACAh8B,YAAAA,EACA0I,gBAAAA,MAGJ,CAACp0B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,eACA,aACA,kBACA,cACA,gBACA,yBACA,wBACA,oBACA,uBACA,gCAtDgBZ,EA1PoD,EACtEqD,OAAAA,EACA4oB,gBAAAA,EACA4+B,aAAAA,EACAvrD,QAAAA,EACAiqB,MAAAA,EACAk+B,OAAAA,EACA59C,QAAAA,EACAo7C,oBAAAA,EACA0F,UAAAA,EACAjD,WAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAE,OAAAA,EACAC,SAAAA,EACA77B,UAAAA,EACAC,UAAAA,EACA07B,QAAAA,EACAG,WAAAA,EACAC,eAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,UAAAA,EACAh8B,YAAAA,EACA0I,gBAAAA,EACA+1B,gBAAAA,EACAC,aAAAA,EACAzgC,WAAAA,EACA5W,gBAAAA,EACAs3C,YAAAA,EACAC,cAAAA,EACAC,uBAAAA,EACAC,sBAAAA,EACAC,kBAAAA,EACAzoD,qBAAAA,EACAC,2BAAAA,MAEA,MAAM,qBAAEiJ,IAAyBE,EAAAA,EAAAA,GAAkB1I,EAAQ4hD,OAAqBxhD,GAAW,IACpF4nD,EAAYC,IAAiB1mD,EAAAA,EAAAA,KAAS,IACtCmoB,EAAmBw+B,IAAwB3mD,EAAAA,EAAAA,KAAS,IACpDsoB,EAAmBs+B,IAAwB5mD,EAAAA,EAAAA,KAAS,IACpD6mD,EAAgBC,IAAqB9mD,EAAAA,EAAAA,KAAS,IAC9C+mD,EAAgBC,EAAcC,IAAiB1mC,EAAAA,GAAAA,KAEhDjjB,EAAgBqnB,EAAQA,EAAMI,SAASmiC,MAAMC,GAAQh3B,EAAgBp2B,SAASotD,EAAIrtD,MACpFq2B,EAAgBp2B,SAASW,EAAQZ,IAE/BswB,GAAe/tB,EAAAA,EAAAA,KAAY,KAC/BqqD,GAAc,GACdC,GAAqB,KACpB,IAEG//B,GAAevqB,EAAAA,EAAAA,KAAY,KAC/BqqD,GAAc,GACdE,GAAqB,KACpB,IAEGQ,IAAY/qD,EAAAA,EAAAA,KAAY,KAC5BqqD,GAAc,GACdzhD,MACC,CAACA,IAEEojB,IAAmBhsB,EAAAA,EAAAA,KAAY,KACnCsqD,GAAqB,GACrB1hD,MACC,CAACA,IAEEujB,IAAmBnsB,EAAAA,EAAAA,KAAY,KACnCuqD,GAAqB,GACrB3hD,MACC,CAACA,IAEEoiD,IAAgBhrD,EAAAA,EAAAA,KAAY,KAChCyqD,GAAkB,GAClB7hD,MACC,CAACA,IAEEqiD,IAAsBjrD,EAAAA,EAAAA,KAAY,KACtC4qD,IACAhiD,MACC,CAACgiD,EAAehiD,IAEbsiD,IAAclrD,EAAAA,EAAAA,KAAY,KAC9B6pD,EAAgB,CAAE3qD,UAAWb,EAAQZ,KACrCstD,OACC,CAAClB,EAAiBxrD,EAAQZ,GAAIstD,KAE3BI,IAAanrD,EAAAA,EAAAA,KAAY,KAC7B8pD,EAAa,CAAE5qD,UAAWb,EAAQZ,KAClCstD,OACC,CAACjB,EAAczrD,EAAQZ,GAAIstD,KAExBK,IAAYprD,EAAAA,EAAAA,KAAY,KAC5BqqD,GAAc,GACdI,GAAkB,KACjB,IAEGY,IAAcrrD,EAAAA,EAAAA,KAAY,KAC9BqpB,EAAW,CAAEnqB,UAAWb,EAAQZ,GAAI8rB,SAAS,IAC7CwhC,OACC,CAAC1hC,EAAYhrB,EAAQZ,GAAIstD,KAEtBjwC,IAAgB9a,EAAAA,EAAAA,KAAY,KAEhC,GADA+qD,KACIziC,MAAAA,GAAAA,EAAOI,SAAU,CACnB,MAAMjV,EAAa6U,EAAMI,SAASxK,KAAI,EAAGzgB,GAAAA,KAASA,IAClDgV,EAAgB,CAAEsI,WAAY1c,EAAQY,OAAQwU,WAAAA,SAE9ChB,EAAgB,CAAEsI,WAAY1c,EAAQY,OAAQwU,WAAY,CAACpV,EAAQZ,QAEpE,CAACgV,EAAiBpU,EAAS0sD,GAAWziC,IAEnCgjC,IAAoBtrD,EAAAA,EAAAA,KAAY,KACpC+qD,KACAhB,EAAY,CAAEriB,QAASrpC,EAAQs4B,QAAQ+Q,YACtC,CAACqjB,GAAW1sD,EAAQs4B,QAAQ+Q,QAASqiB,IAElCwB,IAAsBvrD,EAAAA,EAAAA,KAAY,KACtC+qD,KACAf,EAAc,CAAEtiB,QAASrpC,EAAQs4B,QAAQ+Q,YACxC,CAACqjB,GAAW1sD,EAAQs4B,QAAQ+Q,QAASsiB,IAElCwB,IAAsBxrD,EAAAA,EAAAA,KAAY,KACtC,MAAMyrD,EAASnjC,MAAAA,GAAAA,EAAOI,SAClB,CACAxpB,UAAWb,EAAQZ,GACnBiuD,gBAAiBpjC,EAAMI,SAASxK,KAAI,EAAGzgB,GAAAA,KAASA,IAChDkuD,WAAW,GAEX,CAAEzsD,UAAWb,EAAQZ,GAAIkuD,WAAW,GAExC1B,EAAuBwB,GACvBV,OACC,CAACA,GAAW1sD,EAAQZ,GAAIwsD,EAAwB3hC,IAE7CsjC,IAA6B5rD,EAAAA,EAAAA,KAAY,KAC7CkqD,EAAsB,CAAEjrD,OAAQZ,EAAQY,OAAQxB,GAAIY,EAAQZ,KAC5DstD,OACC,CAACA,GAAW1sD,EAAQY,OAAQZ,EAAQZ,GAAIysD,IAErC2B,IAAqB7rD,EAAAA,EAAAA,KAAY,KACrCqqD,GAAc,GACdM,MACC,CAACA,IAEEmB,IAA0B9rD,EAAAA,EAAAA,KAAae,IAC3CopD,EAAkB,CAChBlrD,OAAQZ,EAAQY,OAChBC,UAAWb,EAAQZ,GACnBsuD,YAAa/oD,KAAKV,MAAMvB,EAAKgkB,UAAY,SAE1C,CAAC1mB,EAAQY,OAAQZ,EAAQZ,GAAI0sD,IAE1B6B,IAAiBhsD,EAAAA,EAAAA,KAAY,MACjC+oD,EAAAA,GAAAA,IAAqB,gBAAea,GAAiB,KAAIvrD,EAAQY,OAAOgnB,QAAQ,IAAK,SAAS5nB,EAAQZ,MACtGstD,OACC,CAACnB,EAAcmB,GAAW1sD,EAAQY,OAAQZ,EAAQZ,KAE/CuE,IAAsBhC,EAAAA,EAAAA,KAAY,OACrCsoB,MAAAA,OAAA,EAAAA,EAAOI,WAAY,CAACrqB,IAAU+nC,SAAS0kB,IAClC7pD,EACFU,EAA2B,CAAEtD,QAASysD,IAEtCppD,EAAqB,CAAErD,QAASysD,OAGpCC,OACC,CAACziC,EAAOjqB,EAAS0sD,GAAW9pD,EAAeU,EAA4BD,IAEpEuqD,IAAmB/pD,EAAAA,EAAAA,KAAQ,KAAOomB,EAAQA,EAAMI,SAAW,CAACrqB,IAAU6f,KAAI,EAAGzgB,GAAAA,KAASA,KAAK,CAAC6qB,EAAOjqB,IAEzG,GAAIqrD,EAGF,YAFAqB,KAKF,MAAMmB,GAAmB,IAAIzpC,KAG7B,OAFAypC,GAAiB3mC,YAAY2mC,GAAiBvpC,cAAgB,GAG5D,0BAAKtiB,UAAW,CAAC,uBAAwBuK,GAAsB+B,KAAK,MAClE,mBAAC,GAAD,CACEtO,QAASA,EACT+D,OAAQgoD,EACR5D,OAAQA,EACRC,WAAYA,EACZC,cAAeA,EACfC,SAAUA,EACV17B,UAAWA,EACXC,UAAWA,EACX27B,OAAQA,EACRC,SAAUA,EACVF,QAASA,EACTG,WAAYA,EACZC,eAAgBA,EAChBC,iBAAkBA,EAClBC,QAASA,EACTC,YAAaA,EACbC,UAAWA,EACXh8B,YAAaA,EACbnqB,cAAeA,EACfomD,QAAS6D,GACT5D,OAAQ6D,GACR5D,MAAO6D,GACPxhC,QAASyhC,GACT7pD,UAAWsZ,GACXwR,SAAUyB,EACVy5B,SAAUj9B,EACVk9B,cAAe6D,GACf5D,gBAAiB6D,GACjBz+B,SAAU0+B,GACV7D,OAAQiE,GACRhE,aAAciE,GACdjjD,QAASmiD,GACTlD,WAAYmE,GACZlE,WAAY9lD,KAEd,mBAAC,GAAD,CACEI,OAAQ0pB,EACRnE,WAAgC,cAApBqD,EACZpiB,QAASojB,GACT1D,MAAOA,EACPjqB,QAASA,IAEX,mBAAC,GAAD,CACE+D,OAAQ6pB,EACRrjB,QAASujB,GACT1Y,WAAYw4C,KAEd,mBAAC,GAAD,CACE7pD,OAAQooD,EACRtrD,UAAWb,EAAQZ,GACnBwB,OAAQZ,EAAQY,OAChB2J,QAASoiD,KAEX,mBAAC,GAAD,CACE5oD,OAAQsoD,EACRnnC,gBAAc,EACdJ,WAA2B,IAAf9kB,EAAQ0C,KACpBqiB,OAAO+oC,EAAAA,EAAAA,IAAcD,IACrB7oC,cAAY,EACZza,QAASqiD,GACTvnC,SAAUooC,UC1KlB,IAAe9qD,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUorC,YAAAA,EAAagiB,oBAAAA,MACtB,MAAMC,GAAqBzkC,EAAAA,EAAAA,IAAyB5oB,IAC9C,OAAEC,EAAF,SAAUkS,GAAak7C,GAAsB,GAC7C1rD,EAAO1B,IAAUM,EAAAA,EAAAA,IAAWP,EAAQC,GACpCqtD,EAAc3rD,GAAO4rD,EAAAA,EAAAA,IAA4B5rD,QAAQ6B,EAK/D,MAAO,CACLgqD,gBALsBhjD,QACtB7I,GAAQwQ,IAAYwO,EAAAA,EAAAA,IAAiBhf,EAAMwQ,KAAam7C,MAAAA,OAAxD,EAAwDA,EAAaE,kBAKrE7lB,WAAYyD,GACRqiB,EAAAA,EAAAA,IAAiBztD,EAAQorC,EAAYsiB,cACrCN,GACEO,EAAAA,EAAAA,IAA4B3tD,EAAQotD,QACpC5pD,MAGV,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,eACA,mBACA,iBAtBgBZ,EA/F+C,EACjEqD,OAAAA,EACAgoC,YAAAA,EACAgiB,oBAAAA,EACAzlB,WAAAA,EACA6lB,gBAAAA,EACA5jD,QAAAA,EACAgkD,aAAAA,EACAC,iBAAAA,EACAC,YAAAA,MAGA,MAAMzvC,GAAehX,EAAAA,EAAAA,IAAuB,MACtCpG,GAAOC,EAAAA,EAAAA,MAGXwoC,QAAS9B,IACPgC,EAAAA,GAAAA,IAAwB,CAAEC,QAASxrB,EAAc0vC,WAnBzB,IAmB4DC,YAAa5qD,KAErGwB,EAAAA,EAAAA,KAAU,KACR,GAAIxB,EACF,GAAIgoC,EAAa,CACf,MAAM,aAAEsiB,EAAF,qBAAgBO,GAAyB7iB,EAC/CwiB,EAAa,CACXF,aAAAA,EACAO,qBAAAA,SAEOb,GACTQ,EAAa,CACXR,oBAAAA,MAIL,CAAChqD,EAAQgoC,EAAawiB,EAAcR,IAEvC,MAAMnf,GAAejtC,EAAAA,EAAAA,KAAa0nC,IAChCA,EAAU,IACLA,EACHwlB,qBAAqB,GAGvBJ,EAAY,CAAEplB,QAAAA,IACd9+B,MACC,CAACA,EAASkkD,IAEPK,GAAoBntD,EAAAA,EAAAA,KAAY,KAChC2mC,IACFkmB,EAAiB,CAAEH,aAAc/lB,EAAWlpC,KAC5CmL,OAED,CAACA,EAAS+9B,EAAYkmB,IAEzB,OACE,mBAACjvC,GAAA,EAAD,CACEvd,UAAU,kBACV+B,OAAQA,EACRwG,QAASA,EACTwkD,gBAAc,EACd1sC,MAAOimB,GAAa9lC,EAAAA,EAAAA,GAAW8lC,EAAWjmB,MAAO,CAAC,QAAS,UAAYzgB,EAAK,uBAE3E0mC,MAAAA,GAAAA,EAAYU,SACX,sCACE,0BAAKr/B,IAAKqV,EAAchd,UAAU,0BAC/BsmC,EAAWU,SAASnpB,KAAKwpB,GACxB,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTjnC,KAAM4sD,EAAAA,GACNzmB,oBAAqBA,EACrBtmC,QAASksD,EAAkBvf,OAAezqC,EAC1CixB,SAAUiU,OAIhB,0BAAKrnC,UAAU,kBACb,mBAACgC,EAAA,EAAD,CACE5B,KAAK,UACLugC,OAAK,EACLz+B,MAAOokC,EAAWwD,cAAgB,SAAW,UAC7C7pC,QAAS6sD,GAERltD,EACC0mC,EAAWwD,cAAgB,iCAAmC,8BAC9DxD,EAAWxF,MACX,QAMR,mBAAC3iB,GAAA,EAAD,W,eClER,MAwOA,IAAexd,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAChC,IAAK0B,GAAQA,EAAK2sD,aAChB,MAAO,GAET,MAAM1R,GAAYv8C,EAAAA,EAAAA,IAASsB,EAAKlD,IAC1BiD,EAAOk7C,GAAYt8C,EAAAA,EAAAA,IAAWN,EAAQC,QAAUuD,EAChD+qD,EAAgB7sD,IAAQ8sD,EAAAA,EAAAA,IAAiB9sD,GAE/C,MAAO,CACLC,KAAAA,EACA0sB,SAASC,EAAAA,EAAAA,IAAkB3sB,GAAM4sB,EAAAA,EAAAA,IAAqBvuB,IAASwuB,EAAAA,EAAAA,IAAuBxuB,IACtF48C,UAAAA,EACA2R,cAAAA,EACAE,eAAeC,EAAAA,EAAAA,IAAiB/sD,GAChCgtD,cAAenkD,QAAQ7I,MAAAA,GAAD,UAACA,EAAMq6B,gBAAP,aAAC,EAAgB4yB,kBAG3C,CAACluD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,yBACA,iBACA,aACA,gBACA,kBACA,iBACA,aACA,6BA5BgBZ,EAxOmD,EACrEE,OAAAA,EACAmD,OAAAA,EACAyrD,iBAAAA,EACArH,OAAAA,EACA5lC,UAAAA,EACAktC,YAAAA,EACAC,cAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,QAAAA,EACAC,SAAAA,EACAC,kBAAAA,EACAC,mBAAAA,EACA3tD,KAAAA,EACAi7C,UAAAA,EACAvuB,QAAAA,EACAogC,cAAAA,EACAE,cAAAA,EACAJ,cAAAA,EACAgB,mBAAAA,EACAC,cAAAA,EACA5lD,QAAAA,EACAo7C,oBAAAA,EACAyK,qBAAAA,EACAC,uBAAAA,EACAC,eAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAC,eAAAA,EACAC,WAAAA,EACAC,wBAAAA,MAEA,MAAO7E,EAAYC,IAAiB1mD,EAAAA,EAAAA,KAAS,IACtCmoB,EAAmBw+B,IAAwB3mD,EAAAA,EAAAA,KAAS,IACrD,EAAEkL,EAAF,EAAKC,GAAM03C,GAEjB17C,EAAAA,EAAAA,GAAkB1I,EAAQ4hD,OAAqBxhD,GAAW,GAE1D,MAAMurB,GAAe/tB,EAAAA,EAAAA,KAAY,KAC/BqqD,GAAc,GACdC,GAAqB,KACpB,IAEGS,GAAY/qD,EAAAA,EAAAA,KAAY,KAC5BqqD,GAAc,GACdzhD,MACC,CAACA,IAEEojB,GAAmBhsB,EAAAA,EAAAA,KAAY,KACnCsqD,GAAqB,GACrB1hD,MACC,CAACA,IAEEsmD,GAAiBlvD,EAAAA,EAAAA,KAAY,KACjC2uD,EAAe,CAAEQ,QAAS,aACzB,CAACR,IAEES,GAAmBpvD,EAAAA,EAAAA,KAAY,KACnC4uD,EAAW,CAAE3vD,OAAAA,MACZ,CAACA,EAAQ2vD,IAENS,GAAwBrvD,EAAAA,EAAAA,KAAY,KACxCyuD,EAAqB,CAAExvD,OAAAA,EAAQouB,SAAUA,IACzC09B,MACC,CAAC9rD,EAAQ8rD,EAAW19B,EAASohC,IAE1Ba,GAA4BtvD,EAAAA,EAAAA,KAAY,KACxCsuD,EAEFQ,EAAgB,CACd7vD,OAAAA,IAGF4vD,EAAc,CACZ5vD,OAAAA,IAGJ8rD,MACC,CAACA,EAAWuD,EAAoBrvD,EAAQ4vD,EAAeC,IAEpDS,GAAwBvvD,EAAAA,EAAAA,KAAY,KACxC+uD,EAAe,CAAEtxD,GAAIwB,IACrB8rD,MACC,CAAC9rD,EAAQ8rD,EAAWgE,IAEjBS,GAAwBxvD,EAAAA,EAAAA,KAAY,KACxCgvD,EAAW,CAAE1wC,OAAQrf,IACrB8rD,MACC,CAACiE,EAAY/vD,EAAQ8rD,IAElB0E,GAAkBzvD,EAAAA,EAAAA,KAAY,KAClCuuD,IACAxD,MACC,CAACA,EAAWwD,IAETmB,IAAa1vD,EAAAA,EAAAA,KAAY,KAC7BivD,IACAlE,MACC,CAACA,EAAWkE,IAETU,IAAe3vD,EAAAA,EAAAA,KAAY,KAC/BwuD,IACAzD,MACC,CAACA,EAAWyD,IAEToB,IAAuB5vD,EAAAA,EAAAA,KAAY,KACvC0uD,IACA3D,MACC,CAACA,EAAW2D,KAEf9qD,EAAAA,EAAAA,KAAU,KACRwiD,KAEOG,KACN,IAEH,MAAMtmD,IAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC2vD,GAAA,EAAD,KACE,0BAAKxvD,UAAU,uBACb,mBAACmpD,GAAA,EAAD,CACEpnD,OAAQgoD,EACRvnD,UAAU,QACV1E,MAAQ,SAAQ0Q,YAAYC,OAC5BlG,QAASmiD,GAER8C,GAAoBC,GACnB,mBAAChrD,EAAA,EAAD,CACEC,KAAK,OACLzC,QAAS4uD,GAERjvD,GAAK,aAGT4tD,GAAoBE,GACnB,mBAACjrD,EAAA,EAAD,CACEC,KAAK,OACLzC,QAAS8uD,GAERnvD,GAAK,eAGT4tD,GAAoBG,GACnB,mBAAClrD,EAAA,EAAD,CACEC,KAAM6d,EAAY,UAAY,QAC9BtgB,QAASmvD,GAERxvD,GAAK2gB,EAAY,qBAAuB,qBAG5C2sC,GACC,mBAACzqD,EAAA,EAAD,CACEC,KAAK,WACLzC,QAASkvD,GAERvvD,GAAK,eAGTyC,EAAAA,IAA2BwrD,GAC1B,mBAACprD,EAAA,EAAD,CACEC,KAAK,QACLzC,QAASovD,IAERzvD,GAAK,SAGTyC,EAAAA,IAA2BurD,GAC1B,mBAACnrD,EAAA,EAAD,CACEC,KAAK,SACLzC,QAASqvD,IAER1vD,GAAK,WAGTkuD,GACC,mBAACrrD,EAAA,EAAD,CACEC,KAAMsqB,EAAU,SAAW,OAC3B/sB,QAAS+uD,GAERpvD,GAAKotB,EAAU,cAAgB,eAGlCghC,GAAqBC,IACrB,mBAACxrD,EAAA,EAAD,CACEC,KAAK,aACLzC,QAASgvD,GAERrvD,GAAKquD,EAAqB,gBAAkB,sBAGhDX,GACC,mBAAC7qD,EAAA,EAAD,CACEC,KAAM6d,EAAY,WAAa,UAC/BtgB,QAASivD,GAERtvD,GAAK2gB,EAAY,iBAAmB,6BAGzC,mBAAC9d,EAAA,EAAD,CACEC,KAAK,SACLzC,QAASsvD,IAER3vD,GAAK,yBAEPmuD,GACC,mBAACtrD,EAAA,EAAD,CACE+pB,aAAW,EACX9pB,KAAK,SACLzC,QAASytB,GAER9tB,GAAK27C,EACF,iBACC6R,EAAgB,0BAA6B7sC,EAAY,eAAiB,sBAIpFjgB,GACC,mBAACytB,GAAA,EAAD,CACEhsB,OAAQ0pB,EACRljB,QAASojB,EACTrrB,KAAMA,U,eC5PlB,MAAMmvD,IAAwBt2B,EAAAA,EAAAA,KAAUlL,GAAOA,KAAM,KAAK,GAsK1D,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM2B,GAAOqpB,EAAAA,EAAAA,IAAkBhrB,GAC/B,IAAK2B,EACH,MAAO,GAGT,MAAM,MAAEwxB,EAAF,QAAS49B,IAAYC,EAAAA,EAAAA,IAAwBhxD,IAAW,IACxD,WAAE81C,EAAF,SAAcziC,GAAa09C,GAAW,GAE5C,MAAO,CACLpvD,KAAAA,EACAwxB,MAAAA,EACA2iB,WAAAA,EACAziC,SAAAA,EACA49C,sBAAuBzmD,QAAQxK,EAAOqoB,+BAG1C,CAAC3nB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,0BACA,0BACA,eACA,uBACA,yBAvBgBZ,EApKuC,EACzDid,SAAAA,EACArb,KAAAA,EACAwxB,MAAAA,EACA2iB,WAAAA,EACAziC,SAAAA,EACA49C,sBAAAA,EACAC,wBAAAA,EACAC,wBAAAA,EACArwD,aAAAA,EACAswD,qBAAAA,EACAC,oBAAAA,MAGA,MAAMpjD,GAAW5G,EAAAA,EAAAA,IAAyB,OACnCiqD,EAAcC,IAAmB5sD,EAAAA,EAAAA,IAAS,IAGjDC,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAE4sD,GAAmBpsD,OAC3B,IAAKosD,EACH,OAGF,MAAMC,EAASr0D,SAASod,eAAe,QACjCtV,EAAe,KACnB,MAAM,cAAE8oB,GAAkB5wB,SAC1B,GAAI4wB,GAAkBA,IAAkB/f,EAASpG,QAAU,CACzD,MAAM,QAAE6pD,EAAF,OAAW3sD,GAAWysD,EAC5BC,EAAOtyD,MAAM+R,UAAa,cAAawgD,OACvCD,EAAOtyD,MAAM4F,OAAU,GAAEA,MACzB3H,SAASstC,gBAAgB9rC,UAAY8yD,OAErCD,EAAOtyD,MAAM+R,UAAY,GACzBugD,EAAOtyD,MAAM4F,OAAS,IAM1B,OAFAysD,EAAensD,iBAAiB,SAAUH,GAEnC,KACLssD,EAAelsD,oBAAoB,SAAUJ,MAE9C,KAGHN,EAAAA,EAAAA,KAAU,KACJjD,GAAQ0R,GAAYA,EAAS1T,QAC/BmB,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWmT,EAASA,EAAS1T,OAAS,KACtE4xD,EAAgB,IAEhBA,GAAiB,KAElB,CAAC5vD,EAAMb,EAAcuS,KAGxBzO,EAAAA,EAAAA,KAAU,KACR+sD,MAAMC,KAAKx0D,SAASqC,iBAAmC,UAAU2nC,SAASyqB,IACxEA,EAAMzjD,SAAW5D,QAAQwS,GAAY60C,IAAU5jD,EAASpG,YAG1D8pD,MAAMC,KAAKx0D,SAASqC,iBAAiC,yBAAyB2nC,SAAS0qB,IACrFA,EAAIC,gBAAkB/0C,EAAW,QAAU,YAE5C,CAACA,KAGJpY,EAAAA,EAAAA,KAAU,KACHoY,GACH/O,EAASpG,QAASmqD,SAEnB,CAACh1C,KAEJvS,EAAAA,EAAAA,KAAgB,KACMrN,SAASY,cAAgC,uBACjDg0D,SACX,CAACf,IAEJ,MAAMgB,GAAiCjxD,EAAAA,EAAAA,KAAakxD,IAClDhB,EAAwB,CAAE/9B,MAAO++B,IAE7BA,EAASvyD,QACXmxD,GAAsBK,KAEvB,CAACA,EAAyBD,IAEvBiB,GAAWnxD,EAAAA,EAAAA,KAAY,KAC3B,GAAIW,GAAQ0R,EAAU,CACpB,MAAM++C,EAAgBd,EAAe,EACrCxwD,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWmT,EAASA,EAAS1T,OAAS,EAAIyyD,KAC1Eb,EAAgBa,MAEjB,CAACzwD,EAAM2vD,EAAcxwD,EAAcuS,IAEhCg/C,GAAarxD,EAAAA,EAAAA,KAAY,KAC7B,GAAIW,GAAQ0R,EAAU,CACpB,MAAM++C,EAAgBd,EAAe,EACrCxwD,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWmT,EAASA,EAAS1T,OAAS,EAAIyyD,KAC1Eb,EAAgBa,MAEjB,CAACzwD,EAAM2vD,EAAcxwD,EAAcuS,IAEtC,OACE,0BAAK5U,GAAG,eAAe4C,UAAW2b,EAAW,SAAW,IACtD,0BAAK3b,UAAU,UACb,mBAACgC,EAAA,EAAD,CACE5B,KAAK,UACL6B,OAAK,EACLC,MAAM,cACNjC,QAAS8vD,GAET,wBAAG/vD,UAAU,qBAEf,mBAACixD,GAAA,EAAD,CACEtpD,IAAKiF,EACLK,MAAO6kB,EACP3kB,SAAUyjD,KAGd,0BAAK5wD,UAAU,UACb,0BAAKA,UAAU,WACZ8xB,EACC9f,MAAAA,GAAAA,EAAU1T,OACP,GAAE2xD,EAAe,QAAQxb,IACxBziC,IAAaA,EAAS1T,OACxB,aAEA,GAGF,mBAAC0D,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAAS,IAAM+vD,EAAoB,CAAEltC,YAAYgpC,EAAAA,EAAAA,IAAc1pC,KAAKmB,SACpEnhB,UAAU,2BAEV,wBAAGpC,UAAU,oBAInB,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAAS6wD,EACT/jD,UAAWiF,IAAaA,EAAS1T,QAAU2xD,IAAiBj+C,EAAS1T,OAAS,GAE9E,wBAAG0B,UAAU,aAEf,mBAACgC,EAAA,EAAD,CACEC,OAAK,EACL7B,KAAK,UACL8B,MAAM,cACNjC,QAAS+wD,EACTjkD,UAAWiF,IAAaA,EAAS1T,QAA2B,IAAjB2xD,GAE3C,wBAAGjwD,UAAU,qB,2DCnMR,SAASkxD,GACtBp0D,EACAq0D,EACAC,EAAS,EACTC,GAAU,EACVC,GAAsB,EACtBC,GAAe,GAEf,MAAMC,EAAa10D,EAAUy0D,EAAe,aAAe,aACrDE,EAAaD,EAAa10D,EAAUy0D,EAAe,cAAgB,gBACnEG,EAA4C,iBAAvBP,EACvBr0D,EAAUsB,iBAA8B+yD,GACxCA,GACE,OAAE7yD,GAAWozD,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAItsC,EAAI,EAAGA,EAAIhnB,EAAQgnB,IAAK,CAC/B,MAAM5nB,EAAUg0D,EAAYpsC,GACtBusC,EAAKn0D,EAAQ6zD,EAAe,aAAe,aAC3CO,EAAKD,EAAKn0D,EAAQ6zD,EAAe,cAAgB,gBAKvD,GAJkBD,EACdQ,GAAMN,EAAaJ,GAAUU,GAAML,EAAaL,EAChDS,GAAMJ,EAAaL,GAAUU,GAAMN,EAAaJ,EAGlDO,EAAepsC,KAAKD,GACpBssC,GAAU,OACL,GAAIA,IAAYP,EACrB,MAIJ,MAAO,CAAEK,YAAAA,EAAaC,eAAAA,GCzBxB,SARA,SAAwB70D,EAAwBY,EAAsB6zD,GAAe,GACnF,MAAMC,EAAa10D,EAAUy0D,EAAe,aAAe,aACrDE,EAAaD,EAAa10D,EAAUy0D,EAAe,cAAgB,gBACnEM,EAAKn0D,EAAQ6zD,EAAe,aAAe,aAC3CO,EAAKD,EAAKn0D,EAAQ6zD,EAAe,cAAgB,gBACvD,OAAOM,EAAKL,GAAcM,EAAKL,G,cCElB,SAASM,GAAsBC,EAAkBh3C,EAAegC,GAC7E,MAAMlgB,EAAYkgB,EAAaxW,QAC/B,IAAK1J,GAAake,EAAQ,EACxB,OAEF,MAAM,eAAE22C,EAAF,YAAkBD,GAAgBR,GACtCp0D,EACAk1D,EAVoB,GAYpB,GACA,GAGF,IAAKN,EAAYpzD,SAAWozD,EAAY12C,GACtC,OAEF,MAAMi3C,EAAQN,EAAe,GAC7B,IAAKA,EAAet0D,SAAS2d,IACvBA,IAAUi3C,IAAUC,GAAep1D,EAAW40D,EAAYO,IAAU,CACxE,MAAM3mD,EAAW0P,EAAQ22C,EAAeA,EAAerzD,OAAS,GAAK,QAAU,OAC/E6zD,EAAAA,GAAAA,GAAiBr1D,EAAW40D,EAAY12C,GAAQ1P,EAtB9B,K,eCDf,SAAS8mD,IAAsB,SACpCz2C,EADoC,aAEpC41C,EAFoC,iCAGpCc,EAHoC,6BAIpCC,EAJoC,kBAKpCC,EALoC,MAMpC70C,EANoC,kBAOpC80C,EAPoC,SAQpC/lC,EARoC,QASpClkB,IAYA,MAAOkqD,EAAmBC,IAAwBpvD,EAAAA,EAAAA,KAAU,GAEtDqvD,GAAmBhzD,EAAAA,EAAAA,KAAaizD,GAC/Bl1C,GAIEm1C,EAAAA,GAAAA,GAAcn1C,EAAMpf,OAAQs0D,IAHzB,GAIT,CAACl1C,IAEEo1C,GAAiBnzD,EAAAA,EAAAA,KAAY,CAACsN,EAAe7I,KACjDA,EAAEqH,iBACFinD,GAAsB13C,GAAW23C,EAAiB33C,EAAQ/N,OACzD,CAACylD,EAAsBC,IAEpBI,GAAmBpzD,EAAAA,EAAAA,KAAayE,IACpC,GAAIsZ,GAASA,EAAMpf,QAAUm0D,GAAqB,EAAG,CACnD,MAAMO,EAAOt1C,EAAM+0C,GACfO,IACF5uD,EAAEqH,iBACFghB,EAASumC,OAGZ,CAACt1C,EAAO+O,EAAUgmC,IAEfQ,GAAyBv1C,GAAS+0C,EAAoB/0C,EAAMpf,OAAS,EAmB3E,OAlBAiF,EAAAA,EAAAA,KAAU,KACH8uD,IAAoCY,GACvCP,EAAqBJ,GAAgC,EAAI,KAE1D,CAACW,EAAuBX,EAA8BD,KAEzD9uD,EAAAA,EAAAA,KAAU,IAAOoY,GAAWoQ,EAAAA,GAAAA,GAAyB,CACnDG,MAAO3jB,EACP2qD,KAAMX,GAAqBhB,OAAepvD,EAAaiC,GAAqB0uD,GAAgB,EAAG1uD,GAC/F+uD,OAAQZ,GAAqBhB,OAAepvD,EAAaiC,GAAqB0uD,EAAe,EAAG1uD,GAChGgvD,OAAQb,IAAsBhB,OAAepvD,EAAaiC,GAAqB0uD,GAAgB,EAAG1uD,GAClGivD,QAASd,IAAsBhB,OAAepvD,EAAaiC,GAAqB0uD,EAAe,EAAG1uD,GAClGkvD,MAAOd,EAAoBO,OAAmB5wD,EAC9CqmB,QAASuqC,SACN5wD,GAAY,CACfowD,EAAmBO,EAAgBC,EAAkBp3C,EAAU41C,EAAchpD,EAASiqD,IAGjFC,EC5CT,MAkFA,IAAe9xD,EAAAA,EAAAA,KAlFsB,EACnCoB,OAAAA,EACAwG,QAAAA,EACAgrD,iBAAAA,EACAllC,UAAAA,EACAmlC,cAAAA,MAGA,MAAMx2C,GAAehX,EAAAA,EAAAA,IAAuB,OACtC,aAAEqE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQI,OAAWA,GAAW,GAEzFsxD,GAAmB9zD,EAAAA,EAAAA,KAAY,CAACse,EAAgBy1C,GAAa,KACjE,MAAMrzD,EAAOguB,MAAAA,OAAH,EAAGA,EAAYpQ,GACpB5d,GAILkzD,EAAiBlzD,EAAMqzD,KACtB,CAACrlC,EAAWklC,IAETI,GAAsBh0D,EAAAA,EAAAA,KAAai0D,IACvCH,EAAiBG,EAAOx2D,IAAI,KAC3B,CAACq2D,IAEEI,EAAuBzB,GAAsB,CACjDz2C,SAAU5Z,EACV2b,MAAO81C,EACP/mC,SAAUknC,EACVnB,mBAAmB,EACnBH,kCAAkC,EAClC9pD,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,KACRwuD,GAAsB,uBAAwB8B,EAAsB72C,KACnE,CAAC62C,KAEJtwD,EAAAA,EAAAA,KAAU,KACJiwD,IAAkBA,EAAcl1D,QAClCiK,MAED,CAACirD,EAAejrD,IAEnB,MAAMurD,GAAkBnnD,EAAAA,EAAAA,GACtB6mD,MAAAA,GAAAA,EAAel1D,OACXk1D,OACArxD,EACJkI,GAEI0pD,EAAsBP,IAAkBA,EAAcl1D,OACxDw1D,EACAN,EAEJ,IAAKnpD,GAAiB0pD,IAAwBA,EAAoBz1D,OAChE,OAGF,MAAM0B,GAAYmE,EAAAA,EAAAA,GAChB,gDACAoG,GAGF,OACE,0BAAKvK,UAAWA,EAAW2H,IAAKqV,GAC7B+2C,MAAAA,OADH,EACGA,EAAqBl2C,KAAI,EAAGzgB,GAAAA,GAAM4d,IACjC,mBAAC8C,GAAA,EAAD,CACE3d,IAAK/C,EACL4C,UAAU,kCACVC,QAAS,IAAMwzD,EAAiBr2D,GAChCgnC,MAAOyvB,IAAyB74C,GAEhC,mBAAC+C,GAAA,EAAD,CACEE,OAAQ7gB,EACR0wB,WAAW,QACXV,cAAY,W,eCrDxB,MAwNA,IAAezsB,EAAAA,EAAAA,KAtNuB,EACpCqzD,YAAAA,EACAC,QAAAA,EACAC,QAAAA,EACA93C,cAAAA,EACA+3C,iBAAAA,EACA9lC,UAAAA,EACA+lC,aAAAA,EACAC,kBAAAA,EACAC,cAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAlN,OAAAA,EACAmN,aAAAA,EACAC,QAAAA,MAGA,MAAMC,GAAiB3uD,EAAAA,EAAAA,IAAe,MAChC4uD,GAAkBjoD,EAAAA,EAAAA,GAAYqnD,GAC9Ba,EAAuBb,EAAY11D,OAAS01D,EAAcY,EAC1D7yD,EAASoH,QAAQ6qD,EAAY11D,SAC5Bw2D,EAAWC,EAAaC,IAAiBnxC,EAAAA,GAAAA,KAC1CoxC,EAAU9rD,QAAQ0rD,GAAwBA,EAAqBK,OAAOxiC,GAAMA,EAAEyiC,SAC9Ev1D,GAAOC,EAAAA,EAAAA,MAEP,qBACJu1D,EADI,oBACkBC,EADlB,cACuCC,EADvC,qBACsDC,IACxDC,EAAAA,GAAAA,GACFzzD,EACAkyD,EACAO,EACAiB,EAAAA,GACAtB,OACAhyD,EACAia,EACAiS,IAEI,mBACJqnC,EADI,kBACgBC,EADhB,eACmCC,EADnC,YACmDC,IACrDC,EAAAA,GAAAA,GACF/zD,EACAkyD,EACAG,EACAqB,EAAAA,GACAjB,EACAH,EACAC,GACCJ,IAGH3wD,EAAAA,EAAAA,KAAU,IAAOxB,GAAS4Y,EAAAA,EAAAA,GAAsB+5C,QAAWvyD,GAAY,CAACJ,EAAQ2yD,IAEhF,MAAMqB,GAAkBp2D,EAAAA,EAAAA,KAAY,KAC9BoC,GACFulD,MAED,CAACvlD,EAAQulD,IAsBN0O,GAAkBr2D,EAAAA,EAAAA,KAAayE,IACnCA,EAAEqH,iBACFupD,IAEA,MAAQiB,cAAc,MAAEroB,IAAYxpC,EAEpC,GAAIwpC,MAAAA,GAAAA,EAAOtvC,OAAQ,CACjB,MAAM43D,EAAWjB,EACb3E,MAAMC,KAAK3iB,GAAOrxB,QAAQ45C,GACnBA,EAAKjpD,MAAQkpD,EAAAA,GAAAA,IAA+BD,EAAKjpD,QAExDojD,MAAMC,KAAK3iB,GAEf6mB,EAAayB,EAAUjB,MAExB,CAACA,EAASR,EAAcO,IAW3B,IAAKH,EACH,OAGF,MAAMwB,EAAexB,EAAqBK,OAAOxiC,GAAM4jC,EAAAA,GAAAA,IAAkC5jC,EAAE6jC,YACrFC,EAAe3B,EAAqBK,OAAOxiC,GAAM+jC,EAAAA,GAAAA,IAAkC/jC,EAAE6jC,YACrFG,EAAe7B,EAAqBK,OAAOxiC,GAAMA,EAAE6jC,SAAStkC,WAAW,YAE7E,IAAI5R,EAAQ,GAkCZ,OAhCEA,EAAQzgB,EADNy2D,EACW,0BACJG,EACI,0BACJE,EACI,0BAEA,yBAN2B7B,EAAqBv2D,OAAQ,KAiCrE,mBAACif,GAAA,EAAD,CACExb,OAAQA,EACRwG,QAASmsD,EACTl3C,OA3BJ,WACE,GAAKq3C,EAIL,OACE,0BAAK70D,UAAU,yBAAyBO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChE,mBAACH,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,cAAc9B,KAAK,UAAUgC,UAAU,qBAAqBnC,QAASy0D,GACvF,wBAAG10D,UAAU,gBAEf,0BAAKA,UAAU,eAAeqgB,GAC9B,mBAACre,EAAA,EAAD,CACEE,MAAM,UACN9B,KAAK,UACLJ,UAAU,sBACVC,QAAS81D,GAERn2D,EAAK,UAUF+2D,GACR32D,UAAY,oBAAkB80D,EAAY,UAAY,KAEtD,0BACE90D,UAAU,cACV42D,YAAa7B,EACb8B,OAAQb,EACRc,WA9DN,SAAwB1yD,GACtBA,EAAEqH,iBACFrH,EAAEC,kBAEEswD,EAAenuD,SACjBzC,OAAOqC,aAAauuD,EAAenuD,UA0DjCuwD,YApGmB3yD,IACvB,MAAQ4yD,cAAeC,EAAU5pD,OAAQ6pD,GAAe9yD,EAGnD8yD,EAA8Bt/C,QAAQ,kBAAoBq/C,IAC7DtC,EAAenuD,QAAUzC,OAAOoC,WAAW6uD,EAjEnB,MAqEtBkC,GAAeA,EAA2B/5D,QAAQ,8BAIlD85D,GACF7yD,EAAEC,kBAGJ2wD,MAoFI,0BAAyBp1D,EAAK,4BAA6B,KAE1Dq1D,EACC,0BAAKj1D,UAAU,+BACZ60D,EAAqBh3C,KAAKs5C,GACzBA,EAAWZ,SAAStkC,WAAW,UAC3B,0BAAK51B,IAAK86D,EAAW3mD,QAASG,IAAI,KAClC,4BAAOtU,IAAK86D,EAAW3mD,QAAS1E,UAAQ,EAACG,OAAK,EAACD,MAAI,OAI3D,0BAAKhM,UAAU,kCACZ60D,EAAqBh3C,KAAKs5C,GACzB,mBAACC,GAAA,EAAD,CACEj7C,KAAMg7C,EAAWE,SACjBC,WAAWC,EAAAA,GAAAA,IAAiBJ,EAAWE,SAAUF,EAAWZ,UAC5DiB,YAAaL,EAAWriD,eACxB1U,KAAM+2D,EAAW/2D,KACjB80B,SAAO,OAMf,0BAAKl1B,UAAU,8BACb,mBAAC,GAAD,CACE+B,OAAQqzD,EACR7sD,QAAS8sD,EACT9B,iBAAkB+B,EAClB9B,cAAe+B,EACflnC,UAAWA,IAEb,mBAAC,KAAD,CACEtsB,OAAQ2zD,EACR+B,OAAQ7B,EACRrtD,QAASotD,EACT+B,cAAe7B,EACftB,eAAgBA,IAElB,mBAACoD,GAAA,EAAD,CACEv6D,GAAG,qBACHw6D,wBAAsB,EACtBC,KAAM5D,EACN6D,gBAAiBrC,EAAAA,GACjBn4C,YAAa1d,EAAK,WAClBm4D,SAAUvD,EACVlN,OAAQA,EACR0Q,eAAgB7uD,QAAQ6qD,EAAY11D,gB,eCrOhD,MAqUA,IAAeqC,EAAAA,EAAAA,KA/TiB,EAAGoB,OAAAA,EAAQulD,OAAAA,EAAQoN,QAAAA,MAEjD,MAAMuD,GAAmBjyD,EAAAA,EAAAA,IAAyB,MAE5CkyD,GAAiBlyD,EAAAA,EAAAA,IAAuB,MAExCmyD,GAAcnyD,EAAAA,EAAAA,IAAuB,OAEpCoyD,EAAUC,IAAe/0D,EAAAA,EAAAA,IAAiB,KAC1CmnB,EAAS6tC,IAAch1D,EAAAA,EAAAA,IAAmB,CAAC,MAC3Ci1D,EAAaC,IAAkBl1D,EAAAA,EAAAA,KAAS,IACxCm1D,EAAmBC,IAAwBp1D,EAAAA,EAAAA,KAAS,IACpDq1D,EAAYC,IAAiBt1D,EAAAA,EAAAA,KAAS,IACtCu1D,EAAUC,IAAex1D,EAAAA,EAAAA,OACzBy1D,EAAeC,IAAoB11D,EAAAA,EAAAA,OACnC21D,EAAWC,IAAgB51D,EAAAA,EAAAA,KAAkB,GAE9C1D,GAAOC,EAAAA,EAAAA,KAEPs5D,GAAax5D,EAAAA,EAAAA,KAAagI,IAC1B5F,GAAU4F,EAAInB,SAChBmB,EAAInB,QAAQ49B,UAEb,CAACriC,KAEJwB,EAAAA,EAAAA,KAAU,IAAOxB,GAAS4Y,EAAAA,EAAAA,GAAsB+5C,QAAWvyD,GAAY,CAACJ,EAAQ2yD,KAChFnxD,EAAAA,EAAAA,KAAU,KACHxB,IACHs2D,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,GAAc,GACdE,EAAY,IACZE,EAAiB,IACjBE,GAAa,MAEd,CAACn3D,KAEJwB,EAAAA,EAAAA,KAAU,IAAM41D,EAAWlB,IAAmB,CAACkB,EAAYp3D,KAE3DqH,EAAAA,EAAAA,KAAgB,KACd,MAAMgwD,EAAajB,EAAY3xD,QAE3B4yD,GAAcP,IAAaO,EAAWC,YACxCD,EAAWC,UAAYR,KAExB,CAACA,IAEJ,MAAMS,GAAe35D,EAAAA,EAAAA,KAAY,CAAC45D,EAAuB,MACvDjB,EAAW,IAAIiB,EAAY,KAC3B1gD,uBAAsB,KACpB,MAAM2gD,EAAOtB,EAAe1xD,QACvBgzD,IAILA,EAAKv9D,UAAU8Z,OAAO,YAAayjD,EAAK/T,aA/DtB,KAgElB+T,EAAKC,SAAS,CAAE3hD,IAAK0hD,EAAK/T,aAAciU,SAAU,iBAEnD,IAEGC,GAAeh6D,EAAAA,EAAAA,KAAY,KAE/B,GADAu5D,GAAa,IACRn3D,EACH,OAGF,MAAM63D,EAAkBxB,EAASr+B,OAAO4Q,UAAU,EAvE1B,KAwElBkvB,EAAiBpvC,EAAQ5M,KAAKi8C,GAAMA,EAAE//B,OAAO4Q,UAAU,EAzEvC,OAyE8DpuB,QAAQu9C,GAAMA,EAAEx7D,SAEpG,IAAKs7D,GAAmBC,EAAev7D,OAAS,EAY9C,OAXA+5D,EAAYuB,GACRC,EAAev7D,OACbu7D,EAAev7D,OAAS,EAC1Bg7D,EAAaO,GAEbvB,EAAWuB,GAGbP,SAEFJ,GAAa,GAIf,GAAIP,KAAgBI,IAAkBc,EAAezsD,OAAO2rD,KAE1D,YADAG,GAAa,GAIf,MAOM9hC,EAAsB,CAC1B2iC,QAAS,CACP3B,SAAUwB,EACVI,QAVYH,EACbh8C,KAAI,CAAC5a,EAAM+X,KAAP,CACH/X,KAAMA,EAAK82B,OACXkgC,OAAQt3C,OAAO3H,MACX2H,OAAO3H,KAAW+9C,GAAiB,CAAEmB,SAAS,WAO7C3B,GAAe,CAAE4B,UAAU,MAC5B1B,GAAqB,CAAE2B,gBAAgB,MACvCzB,GAAc,CAAE0B,MAAM,KAI9B,GAAI1B,EAAY,CACd,MAAM,KAAE11D,EAAF,SAAQq3D,GAAczB,IAAY0B,EAAAA,GAAAA,GAAkB1B,EAASluB,UAAU,EA/GvD,OA+GoF,GAE1GvT,EAAQijC,KAAO,CACbG,eAAgB,CAACzB,MACb91D,GAAQ,CAAE41D,SAAU51D,MACpBq3D,GAAY,CAAEG,iBAAkBH,IAIxChT,EAAOlwB,KACN,CACDr1B,EACAq2D,EACA3tC,EACAkuC,EACAI,EACAR,EACAE,EACAnR,EACAgS,EACAT,IAGI6B,GAAe/6D,EAAAA,EAAAA,KAAY,CAACqb,EAAe/X,KAC/C,MAAMs2D,EAAa,IAAI9uC,GACvB8uC,EAAWv+C,GAAS/X,EAChBs2D,EAAWA,EAAWj7D,OAAS,GAAGy7B,OAAOz7B,QAAUi7D,EAAWj7D,OA5I5C,GA6IpBg7D,EAAaC,GAEbjB,EAAWiB,KAEZ,CAAC9uC,EAAS6uC,IAEPqB,GAAeh7D,EAAAA,EAAAA,KAAaqb,IAChC,MAAMu+C,EAAa,IAAI9uC,GACvB8uC,EAAWh1B,OAAOvpB,EAAO,GACzBs9C,EAAWiB,GACX1gD,uBAAsB,KACfq/C,EAAe1xD,SAIpB0xD,EAAe1xD,QAAQvK,UAAU8Z,OAAO,YAAamiD,EAAe1xD,QAAQi/C,aA7J1D,UA+JnB,CAACh7B,IAEEmwC,GAA4Bj7D,EAAAA,EAAAA,KAAa49C,IAC7Cyb,EAAiBzb,KAChB,CAACyb,IAEE6B,GAA0Bl7D,EAAAA,EAAAA,KAAayE,IAC3Co0D,EAAep0D,EAAEiJ,OAAO8wB,WACvB,IAEG28B,GAA8Bn7D,EAAAA,EAAAA,KAAayE,IAC/Cs0D,EAAqBt0D,EAAEiJ,OAAO8wB,WAC7B,IAEG48B,GAAuBp7D,EAAAA,EAAAA,KAAayE,IACxCw0D,EAAcx0D,EAAEiJ,OAAO8wB,WACtB,IAEG68B,GAAiBr7D,EAAAA,EAAAA,KAAayE,IAChB,KAAdA,EAAE62D,SACJtB,MAED,CAACA,IAEEuB,GAAmBv7D,EAAAA,EAAAA,KAAY,KACnC,GAAIs5D,IAAcb,EAASr+B,OAAOz7B,OAChC,OAAOsB,EAAK,+BAIb,CAACq5D,EAAWr5D,EAAMw4D,IAEf+C,GAAkBx7D,EAAAA,EAAAA,KAAaqb,IACnC,MAAM6+C,EAAiBpvC,EAAQ5M,KAAKi8C,GAAMA,EAAE//B,SAAQxd,QAAQu9C,GAAMA,EAAEx7D,SACpE,GAAI26D,GAAaY,EAAev7D,OAAS,IAAMmsB,EAAQzP,GAAO+e,OAAOz7B,OACnE,OAAOsB,EAAK,8BAGb,CAACq5D,EAAWr5D,EAAM6qB,IAqBrB,SAAS2wC,IACP,OAAO3wC,EAAQ5M,KAAI,CAACo8C,EAAQj/C,IAC1B,0BAAKhb,UAAU,kBACb,mBAACod,GAAA,EAAD,CACEmN,MAAOvP,IAAUyP,EAAQnsB,OAAS,GA7NlB,KA6NuBmsB,EAAQnsB,OAC3CsB,EAAK,cACLA,EAAK,wBACTggB,MAAOu7C,EAAgBngD,GACvB/N,MAAOgtD,EACP9sD,SAAW/I,GAAMs2D,EAAa1/C,EAAO5W,EAAE+G,cAAc8B,OACrDouD,WAAYL,IAEbhgD,IAAUyP,EAAQnsB,OAAS,GAC1B,mBAAC0D,EAAA,EAAD,CACEhC,UAAU,uBACViC,OAAK,EACLC,MAAM,cACN9B,KAAK,UACLgC,UAAWxC,EAAK,UAChBK,QAAS,IAAM06D,EAAa3/C,IAE5B,wBAAGhb,UAAU,mBAoBvB,OACE,mBAACud,GAAA,EAAD,CAAOxb,OAAQA,EAAQwG,QAASmsD,EAASl3C,OA3DvC,0BAAKxd,UAAU,0BACb,mBAACgC,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,cAAc9B,KAAK,UAAUgC,UAAU,uBAAuBnC,QAASy0D,GACzF,wBAAG10D,UAAU,gBAEf,0BAAKA,UAAU,eAAeJ,EAAK,YACnC,mBAACoC,EAAA,EAAD,CACEE,MAAM,UACN9B,KAAK,UACLJ,UAAU,sBACVC,QAAS05D,GAER/5D,EAAK,YAgDqDI,UAAU,aACzE,mBAACod,GAAA,EAAD,CACEzV,IAAKswD,EACL1tC,MAAO3qB,EAAK,gBACZqN,MAAOmrD,EACPx4C,MAAOs7C,IACP/tD,SAAW/I,GAAMi0D,EAAYj0D,EAAE+G,cAAc8B,OAC7CouD,WAAYL,IAEd,0BAAKh7D,UAAU,oBAEf,0BAAKA,UAAU,6BAA6B2H,IAAKuwD,GAC/C,yBAAIl4D,UAAU,kBAAkBJ,EAAK,gBAEpCq5D,GAvBP,WACE,MAAMY,EAAiBpvC,EAAQ5M,KAAKi8C,GAAMA,EAAE//B,SAAQxd,QAAQu9C,GAAMA,EAAEx7D,SAEpE,OAAOq6D,KAAgBI,IAAkBc,EAAezsD,OAAO2rD,MAC7D,wBAAG/4D,UAAU,SAASJ,EAAK,6BAmBX07D,GACb3C,EACC,mBAACnuC,GAAA,EAAD,CACErO,KAAK,gBACLsO,QA/BD2wC,IACJv9C,KAAI,CAAC0M,EAAOvP,KAAR,CAAqB/N,MAAO0V,OAAO3H,GAAQuP,MAAAA,EAAOgxC,OAAQvgD,IAAUyP,EAAQnsB,OAAS,MA+BpF6O,SAAUytD,IAGZQ,KAKJ,0BAAKp7D,UAAU,oBAEf,0BAAKA,UAAU,aACb,mBAACk+B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,iBACZu+B,QAASo6B,EACTprD,SAAU0tD,IAEZ,mBAAC38B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,gBACZu+B,QAASs6B,EACT1rD,SAAU4rD,EACVxrD,SAAU2tD,IAEZ,mBAAC58B,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,YACZu+B,QAASw6B,EACT5rD,SAAU0rD,EACVtrD,SAAU4tD,IAEXpC,GACC,sCACE,yBAAI34D,UAAU,kBAAkBJ,EAAK,6BACrC,0BACE+H,IAAKwwD,EACLn4D,UAAU,eACV0wD,iBAAe,EACfnwD,IAAI,OACJ4M,SAAW/I,GAAM00D,EAAY10D,EAAE+G,cAAckuD,aAE/C,0BAAKr5D,UAAU,QAAQJ,EAAK,qC,qCC1UxC,MAmBA,IAAee,EAAAA,EAAAA,KAnBmB,EAAG66D,MAAAA,EAAOp3B,MAAAA,EAAOnkC,QAAAA,MACjD,MAAM2tB,GAAcjuB,EAAAA,EAAAA,KAAayE,IAE/BA,EAAEqH,iBAEFxL,EAAQu7D,EAAMC,OAAQD,EAAMp+D,MAC3B,CAACo+D,EAAOv7D,IAEX,OACE,0BACED,UAAY,gBAAcokC,EAAQ,QAAU,IAC5C92B,YAAasgB,EACbvN,MAAQ,IAAGm7C,EAAME,MAAM,OAEtBC,EAAAA,GAAqBH,EAAMC,OAAS,0BAAKp/D,IAAM,kBAAiBm/D,EAAMnsD,YAAasB,IAAI,GAAGirD,QAAQ,aCuDzG,IAAej7D,EAAAA,EAAAA,KAxDqB,EAClCk7D,SAAAA,EAAU7gD,MAAAA,EAAO8gD,UAAAA,EAAWv1B,oBAAAA,EAAqBl8B,aAAAA,EAAcqtD,cAAAA,MAG/D,MAAM/vD,GAAM3B,EAAAA,EAAAA,IAAuB,OAEnC+1D,EAAAA,GAAAA,IAAep0D,EAAK4+B,GAEpB,MAAMh8B,GAAuBq8B,EAAAA,GAAAA,GAAmBv8B,GAE1CzK,GAAOC,EAAAA,EAAAA,KAEPm8D,EAAe35D,EAAAA,GACjBM,KAAKkC,OAAOqS,EAAAA,EAAAA,MAAiBzQ,MAzBF,GAyBhB,IA3BiB,EA6B1B/C,EAAS,GAAAf,KAAKs5D,KAAKJ,EAASpE,OAAOn5D,OAAS09D,GAElD,OACE,0BACEr0D,IAAKA,EACLxH,IAAK07D,EAASz+D,GACdA,GAAK,kBAAiB4d,IACtBhb,UAAU,cAEV,wBAAGA,UAAU,kBAAkBO,IAAI,QAChCX,EAAqB,WAAhBi8D,EAASz+D,GAAkB,iBAAoB,QAAO4d,MAE9D,0BACEhb,WAAWmE,EAAAA,EAAAA,GAAe,uBAAwBoG,GAElDzM,MAAQ,WAAU4F,OAClBnD,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAEzBkI,GAAgBwxD,EAASpE,OAAO55C,KAAK1B,IACpC,MAAMq/C,EAAQM,EAAU3/C,GAExB,IAAKq/C,EACH,OAIF,MAAMU,EAAiB,OAAQV,EAAQA,EAAQA,EAAM,GAErD,OACE,mBAAC,GAAD,CACEr7D,IAAK+7D,EAAe9+D,GACpBo+D,MAAOU,EACPj8D,QAASy3D,YCjCjByE,GAA4C,CAChDC,OAAQ,cACRC,OAAQ,aACRC,OAAQ,eACRC,MAAO,YACPC,SAAU,aACVC,OAAQ,WACRC,QAAS,YACTC,QAAS,gBACTC,MAAO,aAUHC,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GAuKJ,UAAer8D,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,kBADpBD,EArK2B,EAC7CsB,UAAAA,EAAW03D,cAAAA,EAAetD,aAAAA,MAG1B,MAAMp3C,GAAehX,EAAAA,EAAAA,IAAuB,MAEtCi3D,GAAYj3D,EAAAA,EAAAA,IAAuB,OAElCk3D,EAAYC,IAAiB75D,EAAAA,EAAAA,OAC7Bm0D,EAAQ2F,IAAa95D,EAAAA,EAAAA,OACrB+5D,EAAqBC,IAA0Bh6D,EAAAA,EAAAA,IAAS,IAEvD+kC,QAAS9B,IAAwBgC,EAAAA,GAAAA,IAAwB,CAC/DC,QAASxrB,EACT0vC,WAtB0B,MAuBxB6Q,IACFA,EAAQx3B,SAASy3B,IACf,MAAM,GAAEpgE,GAAOogE,EAAMnwD,OACrB,IAAKjQ,IAAOA,EAAG60B,WAAW,mBACxB,OAGF,MAAMjX,EAAQ5N,OAAOhQ,EAAGwoB,QAAQ,kBAAmB,KACnDi3C,GAAsB7hD,GAASwiD,EAAMh3B,kBAGvC,MAAMi3B,EAA0BZ,GAC7Bh/C,KAAI,CAAC2oB,EAAgBxrB,KAAjB,CAA8BA,MAAAA,EAAOwrB,eAAAA,MACzCjqB,QAAO,EAAGiqB,eAAAA,KAAqBA,IAE7Bi3B,EAAwBn/D,QAI7Bg/D,EAAuBG,EAAwB96D,KAAKkC,MAAM44D,EAAwBn/D,OAAS,IAAI0c,WAGjGgU,EAAAA,GAAAA,GAAoBiuC,EAAUz2D,SAAUnE,EAAAA,KAGxCkB,EAAAA,EAAAA,KAAU,KACR,IAAK25D,EACH,OAGF,MAAM1/C,EAASy/C,EAAUz2D,QACzB,IAAKgX,EACH,OAGF,MAAMkgD,EA3DkB,GA2DRL,EAA4C7/C,EAAOuxB,YAAc,EAAI4uB,IAErFC,EAAAA,GAAAA,GAA2BpgD,EAAQkgD,KAClC,CAACR,EAAYG,IAEhB,MAAMz9D,GAAOC,EAAAA,EAAAA,KAEPg+D,GAAgBh8D,EAAAA,EAAAA,KAAQ,KAC5B,IAAKq7D,EACH,OAAOhrC,GAAAA,EAET,MAAM4rC,EAAkB,IAAIZ,GAS5B,OARI9I,MAAAA,GAAAA,EAAc91D,QAChBw/D,EAAgBC,QAAQ,CACtB3gE,GAAI,SACJ+e,KAAMvc,EAAK,kBACX63D,OAAQrD,IAIL0J,IACN,CAACZ,EAAYt9D,EAAMw0D,KAGtB7wD,EAAAA,EAAAA,KAAU,KACR4C,YAAW,KACT,MAAM63D,EAAO,KACXb,EAAcH,GAAUE,YAExBE,EAAUJ,GAAUvF,SAGlBuF,GACFgB,IAuER1vB,iBAQE,OAPKwuB,KACHA,GAAmB,mCACnBC,UAAsBD,IAAkBmB,QAExCjB,IAAYkB,EAAAA,GAAAA,IAAgBnB,KAGvBD,GA7EDqB,GACGt+B,KAAKm+B,KAnGa,OAsGxB,IAEH,MAAMI,GAAiBz+D,EAAAA,EAAAA,KAAaqb,IAClCsiD,EAAuBtiD,GACvB,MAAMqjD,EAAatiE,SAASod,eAAgB,kBAAiB6B,MAC7Dm3C,EAAAA,GAAAA,GAAiBn1C,EAAaxW,QAAU63D,EAAY,QAxGnC,GADU,OA0G1B,IAEGC,GAAoB3+D,EAAAA,EAAAA,KAAY,CAAC67D,EAAer/C,KACpDu7C,EAAc8D,EAAOr/C,KACpB,CAACu7C,IAEE1jC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIsqC,EAAAA,IAmB1CC,GAAqBr6D,EAAAA,EAAAA,GAAe,cAAenE,GAEzD,OAAKy3D,GAAWzjC,EASd,0BAAKh0B,UAAWw+D,GACd,0BAAK72D,IAAKs1D,EAAWj9D,UAAU,qBAAqBO,IAAKX,EAAKoc,MAAQ,MAAQ,IAC3E6hD,EAAchgD,KA9BrB,SAA8Bg+C,EAA6B7gD,GACzD,MAAMtY,EAAOy5D,GAAkBN,EAASz+D,IAExC,OAAOsF,GACL,mBAACV,EAAA,EAAD,CACEhC,UAAY,sBAAoBgb,IAAUqiD,EAAsB,YAAc,IAC9Ep7D,OAAK,EACLw8D,OAAK,EACLv8D,MAAM,cACNjC,QAAS,IAAMm+D,EAAepjD,GAC9B5Y,UAAWy5D,EAAS1/C,MAEpB,wBAAGnc,UAAW0C,SAoBhB,0BACEiF,IAAKqV,EACLhd,WAAWmE,EAAAA,EAAAA,GAAe,gCAAiCuE,EAAAA,GAAe,eAAiB,kBAE1Fm1D,EAAchgD,KAAI,CAACg+C,EAAUv2C,IAC5B,mBAAC,GAAD,CACEu2C,SAAUA,EACV7gD,MAAOsK,EACPw2C,UAAWrE,EACXlxB,oBAAqBA,EACrBl8B,aAAcgzD,GAAuB/3C,EAAI,GAAK+3C,GAAuB/3C,EAAI,EACzEoyC,cAAe4G,QAtBrB,0BAAKt+D,UAAWw+D,GACd,mBAACrgD,GAAA,EAAD,WCrKFugD,GAAiBr8D,EAAAA,GAA0B,EAAI,GAsDrD,IAAe1B,EAAAA,EAAAA,KAnDkB,EAC/B2lC,WAAAA,EACAq4B,YAAAA,EACA3jD,MAAAA,EACAurB,oBAAAA,EACAl8B,aAAAA,EACAu0D,gBAAAA,EACAC,gBAAAA,MAGA,MAAMl3D,GAAM3B,EAAAA,EAAAA,IAAuB,OAEnC+1D,EAAAA,GAAAA,IAAep0D,EAAK4+B,GAEpB,MAAMh8B,GAAuBq8B,EAAAA,GAAAA,GAAmBv8B,GAE1Cy0D,EAAiBz8D,EAAAA,GACnBM,KAAKkC,OAAOqS,EAAAA,EAAAA,MAAiBzQ,MAnBF,IAmBuCs4D,EAAAA,EAAsBL,KArB1D,EAuB5Bh7D,EAASf,KAAKs5D,KAAK31B,EAAWxF,MAAQg+B,IAAmBC,EAAAA,EAAsBL,IAErF,OACE,0BACE/2D,IAAKA,EACLxH,IAAKmmC,EAAWlpC,GAChBA,GAAK,eAAc4d,IACnBhb,UAAU,cAEV,wBAAGA,UAAU,mBAAmBsmC,EAAWjmB,OAC3C,0BACErgB,WAAWmE,EAAAA,EAAAA,GAAe,uBAAwBoG,GAElDzM,MAAQ,WAAU4F,QAEjB2G,GAAgBi8B,EAAWU,UAAYV,EAAWU,SAASnpB,KAAKwpB,GAC/D,mBAACD,GAAA,EAAD,CACEjnC,IAAKknC,EAAQjqC,GACbiqC,QAASA,EACTjnC,KAAM2+D,EAAAA,EACNx4B,oBAAqBA,EACrBy4B,WAAYL,EACZ1+D,QAAS2+D,EACTxrC,SAAUiU,EACV43B,cAAiC,aAAlB34B,EAAWlpC,GAAoByhE,OAAkB18D,WChBtE+8D,GAAqC,GAmO3C,IAAev+D,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SACJipC,EADI,MAEJH,EAFI,OAGJ20B,EAHI,SAIJ+C,GACExgE,EAAOqoC,SAEX,MAAO,CACLo4B,eAAgBhD,EAAOp1B,SACvBq4B,iBAAkBF,EAASn4B,SAC3BW,gBAAiBC,EACjB03B,YAAa73B,EAAMC,OACnB63B,WAAY5gE,EAAOwS,SAASC,MAAM42B,uBAGtC,CAAC3oC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,qBACA,uBACA,oBACA,mBACA,mBAvBgBZ,EAjO6C,EAC/DsB,UAAAA,EACA2+D,YAAAA,EACAxS,gBAAAA,EACAiT,eAAAA,EACAC,iBAAAA,EACAC,YAAAA,EACA33B,gBAAAA,EACA43B,WAAAA,EACAX,gBAAAA,EACA12B,gBAAAA,EACAs3B,mBAAAA,EACAC,qBAAAA,EACAt3B,kBAAAA,EACAu3B,iBAAAA,EACA/V,cAAAA,MAGA,MAAM3sC,GAAehX,EAAAA,EAAAA,IAAuB,MAEtCi3D,GAAYj3D,EAAAA,EAAAA,IAAuB,OAClC25D,EAAgBC,IAAqBt8D,EAAAA,EAAAA,IAAiB,IAErD+kC,QAAS9B,IAAwBgC,EAAAA,GAAAA,IAAwB,CAC/DC,QAASxrB,EACT0vC,WA7BkC,MA8BhC6Q,IACFA,EAAQx3B,SAASy3B,IACf,MAAM,GAAEpgE,GAAOogE,EAAMnwD,OACrB,IAAKjQ,IAAOA,EAAG60B,WAAW,gBACxB,OAGF,MAAMjX,EAAQ5N,OAAOhQ,EAAGwoB,QAAQ,eAAgB,KAChDs5C,GAAwBlkD,GAASwiD,EAAMh3B,kBAGzC,MAAMi3B,EAA0ByB,GAC7BrhD,KAAI,CAAC2oB,EAAgBxrB,KAAjB,CAA8BA,MAAAA,EAAOwrB,eAAAA,MACzCjqB,QAAO,EAAGiqB,eAAAA,KAAqBA,IAE7Bi3B,EAAwBn/D,QAI7BshE,EAAkBnC,EAAwB96D,KAAKkC,MAAM44D,EAAwBn/D,OAAS,IAAI0c,WAEpFqtB,QAASC,IAAiCC,EAAAA,GAAAA,IAAwB,CAAEC,QAASy0B,IAE/Er9D,GAAOC,EAAAA,EAAAA,KAEPggE,EAAiB12D,QAAQm2D,GAEzBQ,GAAUj+D,EAAAA,EAAAA,KAAQ,IACjBy9D,EAIE,CACL,CACEliE,GAAI,SACJijB,MAAOzgB,EAAK,kBACZonC,SAAUo4B,EACVt+B,MAAOs+B,EAAe9gE,QAExB,CACElB,GAAI,WACJijB,MAAOzgB,EAAK,oBACZonC,SAAUq4B,EACVv+B,MAAOu+B,EAAiB/gE,WAEvBghE,EAAYzhD,KAAKzgB,GAAOuqC,EAAgBvqC,KAAKmf,OAAOpT,UAhBhD+oB,GAAAA,GAkBR,CAACotC,EAAa1/D,EAAMw/D,EAAgBC,EAAkB13B,IAEnDo4B,GAAkBl+D,EAAAA,EAAAA,KAAQ,IAC9Bg+D,GAC4D,IAAzDC,EAAQvjD,QAAQyjD,IAAD,uBAASA,EAAIh5B,gBAAb,aAAS,EAAc1oC,UAAQA,QAChD,CAACwhE,EAASD,KAEbt8D,EAAAA,EAAAA,KAAU,KACJo7D,IACFz2B,IACAs3B,IACAC,OAED,CAACd,EAAac,EAAsBD,EAAoBt3B,KAE3D3kC,EAAAA,EAAAA,KAAU,KACJ+7D,MAAAA,GAAAA,EAAahhE,QACf6pC,MAED,CAACm3B,EAAan3B,KAEjBnZ,EAAAA,GAAAA,GAAoBiuC,EAAUz2D,UAG9BjD,EAAAA,EAAAA,KAAU,KACR,IAAKs8D,EACH,OAGF,MAAMriD,EAASy/C,EAAUz2D,QACzB,IAAKgX,EACH,OAGF,MAAMkgD,EAhHkB,GAgHRiC,GAAwCniD,EAAOuxB,YAAc,EAAI4uB,KAEjFC,EAAAA,GAAAA,GAA2BpgD,EAAQkgD,KAClC,CAACmC,EAAgBF,IAEpB,MAAMvT,GAAmBzsD,EAAAA,EAAAA,KAAaqb,IACpC4kD,EAAkB5kD,GAClB,MAAMilD,EAAelkE,SAASod,eAAgB,eAAc6B,MAC5Dm3C,EAAAA,GAAAA,GAAiBn1C,EAAaxW,QAAUy5D,EAAc,aAAS99D,EAzHpC,OA0H1B,IAEG+9D,GAAsBvgE,EAAAA,EAAAA,KAAa0nC,IACvCu3B,EAAgBv3B,GAChBq4B,EAAiB,CAAEr4B,QAAAA,MAClB,CAACq4B,EAAkBd,IAEhBuB,GAAsBxgE,EAAAA,EAAAA,KAAa0nC,IACvCsiB,EAAc,CAAEtiB,QAAAA,MACf,CAACsiB,IAEE31B,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAqD1CksC,GAAgBj8D,EAAAA,EAAAA,GAAe,gBAAiBnE,GAEtD,OAAK6/D,GAAmB7rC,IAAqB+rC,GAAoB5T,EAe/D,0BAAKnsD,UAAWogE,GACd,0BACEz4D,IAAKs1D,EACLj9D,UAAU,kDAET8/D,EAAQjiD,KAzEf,SAAqByoB,EAAgCtrB,GAAe,MAClE,MAAMisB,EAAY,UAAGX,EAAWU,gBAAd,aAAG,EAAsB,GACrCq5B,GAAkBl8D,EAAAA,EAAAA,GACtB,uCACA6W,IAAU2kD,GAAkB,aAG9B,MAAsB,WAAlBr5B,EAAWlpC,IAAqC,aAAlBkpC,EAAWlpC,IAAqBkpC,EAAWS,eAAiBE,EAE1F,mBAACjlC,EAAA,EAAD,CACE7B,IAAKmmC,EAAWlpC,GAChB4C,UAAWqgE,EACXj+D,UAAWkkC,EAAWjmB,MACtBpe,OAAK,EACLw8D,MAAyB,WAAlBn4B,EAAWlpC,IAAqC,aAAlBkpC,EAAWlpC,GAChD8E,MAAM,cACNjC,QAAS,IAAMmsD,EAAiBpxC,IAEb,WAAlBsrB,EAAWlpC,GACV,wBAAG4C,UAAU,gBACO,aAAlBsmC,EAAWlpC,GACb,wBAAG4C,UAAU,kBACXsmC,EAAWY,WACb,mBAAC,GAAD,CACEZ,WAAYA,EACZC,oBAAqB+B,IAGvB,mBAAC,GAAD,CACEhC,WAAYA,EACZC,oBAAqB+B,KAO3B,mBAAClB,GAAA,EAAD,CACEjnC,IAAKmmC,EAAWlpC,GAChBiqC,QAASJ,EACT7mC,KAAMimC,EAAAA,GACNhmB,MAAOimB,EAAWjmB,MAClBrgB,UAAWqgE,EACX95B,oBAAqB+B,EACrBroC,QAASmsD,EACTh5B,SAAUpY,QA8Bd,0BACErT,IAAKqV,EACLhd,WAAWmE,EAAAA,EAAAA,GAAe,kCAAmCuE,EAAAA,GAAe,eAAiB,kBAE5Fo3D,EAAQjiD,KAAI,CAACyoB,EAAYhhB,IACxB,mBAAC,GAAD,CACEnlB,IAAKmmC,EAAWlpC,GAChBkpC,WAAYA,EACZq4B,YAAax1D,QAAQo2D,GAAcZ,GACnC3jD,MAAOsK,EACPihB,oBAAqBA,EACrBl8B,aAAcs1D,GAAkBr6C,EAAI,GAAKq6C,GAAkBr6C,EAAI,EAC/Ds5C,gBAAiBsB,EACjBrB,gBAAiBsB,QAjCvB,0BAAKngE,UAAWogE,GACZjU,EAEE4T,EACF,0BAAK//D,UAAU,mBAAmBJ,EAAK,eAEvC,mBAACue,GAAA,EAAD,MAJA,0BAAKne,UAAU,mBAAmBJ,EAAK,wC,+NCxNjD,MAiFA,IAAee,EAAAA,EAAAA,KAjFiB,EAC9B2/D,IAAAA,EAAK/5B,oBAAAA,EAAqBomB,WAAAA,EAAY3sD,UAAAA,EAAWC,QAAAA,MAC7C,QAEJ,MAAM0H,GAAM3B,EAAAA,EAAAA,IAAuB,MAE7BwC,GAAWxC,EAAAA,EAAAA,IAAyB,MAEpC+gC,EAAe59B,QAAO,UAACm3D,EAAIl0B,iBAAL,aAAC,EAAeC,SACtCJ,EAAkB,MAAKq0B,EAAIljE,KAE3BuhE,GADiBl4B,EAAAA,GAAAA,IAAkB9+B,EAAK4+B,KACPomB,EACjC73C,GAAiBH,EAAAA,EAAAA,GAAU,GAAEs3B,YAA0B0yB,EAAa/pD,EAAAA,GAAAA,SACpEs3B,GAAWC,EAAAA,GAAAA,GAAa,UAACm0B,EAAIl0B,iBAAL,aAAC,EAAeC,QAASljC,QAAQ2L,IACzDyrD,GAAY5rD,EAAAA,EAAAA,GAASs3B,GAAiB0yB,EAAa/pD,EAAAA,GAAAA,SACnD4rD,EAAoBr3D,QAAQw1D,GAAe4B,IAC3C,WAAEr2D,EAAF,kBAAcC,IAAsBC,EAAAA,EAAAA,IAAa,GACjDE,EAAsBq0D,IAAgBz0D,EACtCu2D,EAAe9B,GAAez0D,GAEpCa,EAAAA,EAAAA,GAAgBvC,EAAU,CAACg4D,IAE3B,MAAM5yC,GAAcjuB,EAAAA,EAAAA,KAClB,IAAMM,EAAQ,IACTqgE,EACH9vD,QAAS+vD,KAEX,CAACtgE,EAASqgE,EAAKC,IAGXH,GAAgBj8D,EAAAA,EAAAA,GACpB,YACAm8D,EAAI75D,OAAS65D,EAAI58D,QAAU48D,EAAI75D,MAAQ65D,EAAI58D,OAAS,WAAa,aACjEuoC,EACAjsC,GAGF,OACE,0BACE2H,IAAKA,EACL3H,UAAWogE,EACX9yD,YAAaozD,GAAAA,EACbzgE,QAAS2tB,GAERmZ,GACC,6BACEp/B,IAAKukC,EACLlsC,UAAU,YAGVlC,MAAO2iE,EAAe,sBAAmBt+D,IAG5C2S,IAAmB2rD,GAClB,0BACEpkE,IAAKyY,EACLnE,IAAI,GACJ3Q,UAAU,YAGbwgE,GACC,+BACE74D,IAAKa,EACLsD,UAAQ,EACRE,MAAI,EACJC,OAAK,EACLF,aAAW,EACX40D,QAAQ,QAEJx2D,GAEJ,6BAAQ9N,IAAKkkE,KAGhBj2D,GACC,mBAACuG,EAAA,EAAD,CAAS3O,MAAO4S,GAAkBiyB,EAAe,QAAU,cCjBnE,IAAepmC,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,CACLiiE,UAAWjiE,EAAOkiE,KAAKC,MAAMD,SAGjC,CAACxhE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBANpCZ,EAjDyC,EAC3DsB,UAAAA,EACA2+D,YAAAA,EACAoC,YAAAA,EACAH,UAAAA,EACAI,YAAAA,EACAC,cAAAA,MAGA,MAAMjkD,GAAehX,EAAAA,EAAAA,IAAuB,OAG1CqiC,QAAS9B,IACPgC,EAAAA,GAAAA,IAAwB,CAAEC,QAASxrB,EAAckkD,WAfzB,OAiB5B39D,EAAAA,EAAAA,KAAU,KACJo7D,GACFsC,MAED,CAACtC,EAAasC,IAEjB,MAAMjtC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAEhD,OACE,0BACEvsB,IAAKqV,EACLhd,WAAWmE,EAAAA,EAAAA,GAAe,YAAanE,EAAW0I,EAAAA,GAAe,eAAiB,kBAEhFq4D,EAEE/sC,GAAqB4sC,GAAaA,EAAUtiE,OAC9CsiE,EAAU/iD,KAAKyiD,GACb,mBAAC,GAAD,CACEngE,IAAKmgE,EAAIljE,GACTkjE,IAAKA,EACL/5B,oBAAqBA,EACrBomB,YAAagS,EACb1+D,QAAS+gE,MAGXhtC,GAAqB4sC,EACvB,0BAAK5gE,UAAU,mBAAf,kBAEA,mBAACme,GAAA,EAAD,MAdA,0BAAKne,UAAU,mBAAf,kDCnDD,IAAKmhE,I,SAAAA,GAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,KAAAA,GAAAA,O,CAAAA,KAAAA,GAAAA,KAQL,MAAMC,GAAyBxjE,OAAOsjD,OAAOigB,IACjD5kD,QAAQtP,GAA4C,iBAAVA,IAEvCo0D,GAAwB,CAC5B,CAACF,GAAeG,OAAQ,aACxB,CAACH,GAAeI,UAAW,gBAC3B,CAACJ,GAAeK,MAAO,aAkEzB,IAAe7gE,EAAAA,EAAAA,KA/DwB,EACrCs1B,UAAAA,EAAWS,YAAAA,EAAa+qC,eAAAA,EAAgBC,aAAAA,MAExC,MAAM9hE,GAAOC,EAAAA,EAAAA,KAEb,SAAS8hE,EAAgBtrC,GACvB,OACE,mBAACr0B,EAAA,EAAD,CACEhC,UAAY,sBAAoBi2B,IAAcI,EAAM,YAAc,IAClEp2B,QAAS,IAAMy2B,EAAYL,GAC3Bj0B,UAAWg/D,GAAuB/qC,GAClCp0B,OAAK,EACLw8D,OAAK,EACLv8D,MAAM,eAEN,wBAAGlC,UAAWqhE,GAAsBhrC,MAK1C,MAAMurC,GAAmBjiE,EAAAA,EAAAA,KAAY,KACnC+hE,EAAazrC,IAAckrC,GAAeI,SAAW,WAAa,UACjE,CAACtrC,EAAWyrC,IAMf,OACE,0BAAK1hE,UAAU,oBAAoBC,QALrC,SAAyByjC,GACvBA,EAAMr/B,mBAIuD9D,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACpF8zB,IAAckrC,GAAeG,OAC5B,mBAACt/D,EAAA,EAAD,CACEhC,UAAU,uBACVoC,UAAW6zB,IAAckrC,GAAeI,SAAW,kBAAoB,cACvEt/D,OAAK,EACLw8D,OAAK,EACLv8D,MAAM,cACNjC,QAAS2hE,GAET,wBAAG5hE,UAAU,iBAIhB2hE,EAAgBR,GAAeG,OAC/BK,EAAgBR,GAAeI,UAC/BI,EAAgBR,GAAeK,MAE/BvrC,IAAckrC,GAAeG,OAC5B,mBAACt/D,EAAA,EAAD,CACEhC,UAAU,uBACVC,QAASwhE,EACTr/D,UAAU,gBACVH,OAAK,EACLw8D,OAAK,EACLv8D,MAAM,eAEN,wBAAGlC,UAAU,0BCzCvB,IAAI6hE,IAAc,EAElB,MAqLA,IAAelhE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACQ,CACLmjE,kBAAmBnjE,EAAOmjE,qBAHZpjE,EArL0B,EAC5CqD,OAAAA,EAAQggE,yBAAAA,EAA0BD,kBAAAA,EAClCrhC,OAAAA,EAAQl4B,QAAAA,EACRmvD,cAAAA,EAAekH,gBAAAA,EAAiBoC,YAAAA,EAChCS,eAAAA,EAAgBC,aAAAA,EAAcnN,eAAAA,MAE9B,MAAOt+B,EAAWC,IAAgB5yB,EAAAA,EAAAA,IAAiB,IAC5C8wD,EAAc4N,IAAmB1+D,EAAAA,EAAAA,IAAmB,KAEpD2+D,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAepgE,EAAQwG,OAASpG,EAAWE,EAAAA,KAClF,aAAEgI,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,EAAQwG,GAAS,GAAO,IAEpFs5D,IAAe9/D,IAClB8/D,IAAc,IAGhBt+D,EAAAA,EAAAA,KAAU,KACRk9B,MACC,CAACA,KAEJr3B,EAAAA,EAAAA,KAAgB,KACd,GAAK/G,EAAAA,GASL,OALIN,IACFhG,SAASsK,KAAKpK,UAAUC,IAAI,iCAC5BH,SAASsK,KAAKpK,UAAUC,IAAI,wBAGvB,KACD6F,IACFqgE,EAAAA,EAAAA,KAAQ,KACNrmE,SAASsK,KAAKpK,UAAUqK,OAAO,uBAC/BH,YAAW,KACTpK,SAASsK,KAAKpK,UAAUqK,OAAO,mCAxDhB,WA6DtB,CAACvE,IAEJ,MAAMsgE,GAAkBr8D,EAAAA,EAAAA,IAAOouD,GAC/BiO,EAAgB77D,QAAU4tD,GAC1B7wD,EAAAA,EAAAA,KAAU,KACH8+D,EAAgB77D,QAAQlI,SAI7B+jE,EAAgB77D,QAAQu/B,SAAS5pB,IAC/Bo4C,EAAe,CAAEiH,MAAOr/C,OAG1B6lD,EAAgB,OACf,CAACjgE,EAAQk0B,EAAWs+B,IAEvB,MAAM+J,GAAoB3+D,EAAAA,EAAAA,KAAY,CAAC67D,EAAer/C,KACpD6lD,GAAiBvK,GACR,IAAIA,EAAQt7C,KAGrBu7C,EAAc8D,KACb,CAAC9D,IAEEpI,GAAe3vD,EAAAA,EAAAA,KAAauN,IAChC3E,IACAm5D,EAAax0D,KACZ,CAAC3E,EAASm5D,IAEPxB,GAAsBvgE,EAAAA,EAAAA,KAAa0nC,IACvCu3B,EAAgBv3B,GAAS,KACxB,CAACu3B,IAEEh/D,GAAOC,EAAAA,EAAAA,MAEP,gBAAEssD,EAAF,YAAmB4U,GAAgBgB,EAEzC,SAASO,EAAc3mD,EAAmBilC,GACxC,OAAQ3qB,GACN,KAAKkrC,GAAeG,MAClB,OACE,mBAAC,GAAD,CACEthE,UAAU,aACV03D,cAAe4G,IAGrB,KAAK6C,GAAeI,SAClB,OACE,mBAAC,GAAD,CACEvhE,UAAU,aACV2+D,cAAaxS,GAAkBpqD,IAAW4Z,GAAYilC,GACtDuL,gBAAiBA,EACjByS,gBAAiBsB,IAGvB,KAAKiB,GAAeK,KAClB,OACE,mBAAC,GAAD,CACExhE,UAAU,aACV2+D,cAAaoC,GAAch/D,IAAW4Z,GAAYilC,GAClDmgB,YAAaA,EACbC,YAAaA,KAYvB,MAAM1qC,EACJ,sCACE,0BAAKt2B,UAAU,kBAAkBC,QANrC,SAAyByjC,GACvBA,EAAMr/B,oBAMDw9D,IACC,mBAAC5lD,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAW+Z,EAAWU,YAAayqC,GAAuB9iE,QAChFgkE,IAINjgE,EAAAA,IACC,mBAACL,EAAA,EAAD,CACEC,OAAK,EACLw8D,OAAK,EACLv8D,MAAM,cACNE,UAAWxC,EAAK,SAChBI,UAAU,sBACVI,KAAK,OACLH,QAASsI,GAET,wBAAGvI,UAAU,gBAGjB,mBAAC,GAAD,CACEi2B,UAAWA,EACXS,YAAaR,EACburC,eAAgBA,EAChBC,aAAcpS,KAKpB,GAAIjtD,EAAAA,GAAyB,CAC3B,IAAKgI,EACH,OAGF,MAAMrK,GAAYmE,EAAAA,EAAAA,GAChB,yBACAoG,GACCu3D,GAAqB,sBAGxB,OACE,mBAACtS,GAAA,EAAD,KACE,0BAAKxvD,UAAWA,GACbs2B,IAMT,OACE,mBAAC6yB,GAAA,EAAD,CACEpnD,OAAQA,EACRS,UAAU,OACVumD,UAAU,SACVxgD,QAASA,EACTvI,UAAU,aACV2jD,oBAAqBp7C,EACrBg6D,aAAe75D,EAAAA,QAAkCvG,EAAnB8/D,EAC9BO,aAAe95D,EAAAA,QAAkCvG,EAAnB+/D,EAC9BO,mBAAoB/5D,EAAAA,IAEnB4tB,OC1IP,IAAe31B,EAAAA,EAAAA,KA/DkB,EAC/BoB,OAAAA,EAAQggE,yBAAAA,EAA0BW,aAAAA,EAAcC,aAAAA,EAAcp6D,QAAAA,MAE9D,MAAO05D,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAepgE,EAAQwG,GAE9DolC,GAAmBhuC,EAAAA,EAAAA,KAAY,CAACyE,EAAU6wD,KAC9C,MAAM,MAAErnB,GAAUxpC,EAAEiJ,OAEhBugC,GAASA,EAAMtvC,OAAS,GAC1BokE,EAAapS,MAAMC,KAAK3iB,GAAQqnB,KAEjC,CAACyN,IAEEE,GAAoBjjE,EAAAA,EAAAA,KAAY,KACpCsqC,GACEqmB,MAAMC,KAAK6F,EAAAA,IAA4B9pD,KAAK,MAC3ClI,GAAMupC,EAAiBvpC,GAAG,OAE5B,CAACupC,IAEEk1B,GAAuBljE,EAAAA,EAAAA,KAAY,KACvCsqC,GAAsB,KAAM7lC,GAAMupC,EAAiBvpC,GAAG,OACrD,CAACupC,IAEE/tC,GAAOC,EAAAA,EAAAA,MAEP,eAAEijE,EAAF,eAAkBC,GAAmBhB,EAE3C,OACE,mBAAC5Y,GAAA,EAAD,CACEpnD,OAAQA,EACRihE,WAAS,EACTxgE,UAAU,QACVumD,UAAU,SACVxgD,QAASA,EACTvI,UAAU,mBACV2jD,oBAAqBp7C,EACrBg6D,aAAe75D,EAAAA,QAAkCvG,EAAnB8/D,EAC9BO,aAAe95D,EAAAA,QAAkCvG,EAAnB+/D,EAC9BO,mBAAoB/5D,EAAAA,KAMlBo6D,GACA,mBAACrgE,EAAA,EAAD,CAAUzC,UAAU,iBAAiB+M,UAAQ,GAA7C,uDAED+1D,GACC,sCACE,mBAACrgE,EAAA,EAAD,CAAUC,KAAK,QAAQzC,QAAS2iE,GAC7BhjE,EAAK,gCAER,mBAAC6C,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAAS4iE,GAAuBjjE,EAAK,oBAGlEmjE,GACC,mBAACtgE,EAAA,EAAD,CAAUC,KAAK,OAAOzC,QAAS0iE,GAAe/iE,EAAK,aCjC3D,IAAee,EAAAA,EAAAA,KA1BkB,EAC/BsiE,WAAAA,EACA7+B,MAAAA,EACA8+B,WAAAA,EACAC,IAAAA,EACAljE,QAAAA,KAGE,mBAAC6d,GAAA,EAAD,CACE3d,IAAK+iE,EAAWpU,QAChB9uD,WAAWmE,EAAAA,EAAAA,GAAe,6CAA8C8+D,GAAc,eACtFpiC,WAAS,EACT5gC,QAAS,IAAMA,EAAQijE,GACvB9+B,MAAOA,GAEN6+B,GACC,mBAAC/iE,EAAA,EAAD,CAAQE,KAAK,QAAQC,KAAM8iE,IAE7B,0BAAKnjE,UAAU,iBACb,2BAAMA,UAAU,SAAhB,IAA0BkjE,EAAWpU,SACrC,2BAAM9uD,UAAU,aAAYQ,EAAAA,EAAAA,GAAW0iE,EAAWl5C,kBC4D1D,IAAerpB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAAD,CACE0vB,UAAW1vB,EAAO2vB,MAAMjQ,SAE1B,CAAChf,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAJpCZ,EAnEiD,EACnE2vB,UAAAA,EACAtsB,OAAAA,EACAqrB,aAAAA,EACAg2C,YAAAA,EACAnjE,QAAAA,EACAsI,QAAAA,EACA+lD,eAAAA,MAGA,MAAMtxC,GAAehX,EAAAA,EAAAA,IAAuB,OACtC,aAAEqE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQI,OAAWA,GAAW,GAEzFkhE,GAAoB1jE,EAAAA,EAAAA,KAAY,EAAG2jE,MAAAA,EAAOxU,QAAAA,MAC9C,MAAMqU,EAAM90C,EAAUi1C,GACtBhV,EAAe,CACbQ,QAAU,IAAGA,IAAU1hC,GAAgB+1C,EAAO,IAAGA,EAAI7wC,WAAa,KAClEgxC,MAAAA,IAEFrjE,MACC,CAACA,EAASquD,EAAgBjgC,EAAWjB,IAElCm2C,EAAuBnR,GAAsB,CACjDz2C,SAAU5Z,EACV2b,MAAO0lD,EACP32C,SAAU42C,EACV96D,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,KACJ6/D,IAAgBA,EAAY9kE,QAC9BiK,MAED,CAAC66D,EAAa76D,KAEjBhF,EAAAA,EAAAA,KAAU,KACRwuD,GAAsB,uBAAwBwR,EAAsBvmD,KACnE,CAACumD,IAEJ,MAAMC,GAAe72D,EAAAA,EAAAA,GAAYy2D,GAAeA,EAAY9kE,OAAS8kE,OAAcjhE,EAAWkI,GACxFo5D,EAAmBL,IAAgBA,EAAY9kE,OAASklE,EAAeJ,EAE7E,IAAK/4D,GAAiBo5D,IAAqBA,EAAiBnlE,OAC1D,OAGF,MAAM0B,GAAYmE,EAAAA,EAAAA,GAChB,mDACAoG,GAGF,OACE,0BAAKvK,UAAWA,EAAW2H,IAAKqV,GAC7BymD,GAAoBA,EAAiB5lD,KAAI,CAAC6lD,EAAgB1oD,IACzD,mBAAC,GAAD,CACE7a,IAAM,GAAEujE,EAAeJ,SAASI,EAAe5U,UAC/CoU,WAAYQ,EACZP,IAAK90C,EAAUq1C,EAAeJ,OAC9BL,YAAU,EACVhjE,QAASojE,EACTj/B,MAAOm/B,IAAyBvoD,WClC1C,IAAera,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,SAClByD,GACA,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAFpCZ,EApCiC,EACnDqD,OAAAA,EAAQqhE,YAAAA,EAAa76D,QAAAA,EAAS+lD,eAAAA,MAE9B,MAAO2T,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAepgE,EAAQwG,OAASpG,EAAWE,EAAAA,IAElFurB,GAAcjuB,EAAAA,EAAAA,KAAaujE,IAC/B5U,EAAe,CACbQ,QAAU,IAAGoU,EAAWpU,UACxBwU,MAAOJ,EAAWI,QAEpB/6D,MACC,CAACA,EAAS+lD,IAEb,OACE,mBAACnF,GAAA,EAAD,CACEpnD,OAAQA,EACRS,UAAU,OACVumD,UAAU,SACVxgD,QAASA,EACTvI,UAAU,iBACV2jD,oBAAqBp7C,EACrBg6D,aAAe75D,EAAAA,QAAkCvG,EAAnB8/D,EAC9BO,aAAe95D,EAAAA,QAAkCvG,EAAnB+/D,EAC9BO,mBAAoB/5D,EAAAA,IAEnB06D,EAAYvlD,KAAKqlD,GAChB,mBAAC,GAAD,CACE/iE,IAAK+iE,EAAWpU,QAChBoU,WAAYA,EACZjjE,QAAS2tB,WCwCnB,IAAejtB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SAAEqoC,GAAaroC,EAAOqoC,SAAS28B,SAErC,MAAO,CAAE38B,SAAAA,MAEX,CAAC3nC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,2BANpCZ,EAzD8C,EAChEqD,OAAAA,EACA68D,gBAAAA,EACA53B,SAAAA,EACA48B,sBAAAA,MAGA,MAAM5mD,GAAehX,EAAAA,EAAAA,IAAuB,OACtC,aAAEqE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQI,OAAWA,GAAW,GACzF0hE,GAAel3D,EAAAA,EAAAA,GAAYq6B,GAAU,GACrC88B,EAAoB98B,GAAY68B,GAGpCx7B,QAAS9B,IACPgC,EAAAA,GAAAA,IAAwB,CAAEC,QAASxrB,EAAc0vC,WAhBzB,OAkB5BnpD,EAAAA,EAAAA,KAAU,IAAOxB,GAAS4Y,EAAAA,EAAAA,GAAsBipD,QAAyBzhE,GAAY,CAACJ,EAAQ6hE,IAE9F,MAQM5jE,GAAYmE,EAAAA,EAAAA,GAChB,gDACAoG,IACEu5D,MAAAA,GAAAA,EAAmBxlE,SAAW,UAGlC,OACE,0BACEqJ,IAAKqV,EACLhd,UAAWA,EACXuiE,aAAe75D,EAAAA,QAAkCvG,EAlB5B,KACvBpG,SAASsK,KAAKpK,UAAUC,IAAI,cAkB1BsmE,aAAe95D,EAAAA,QAAkCvG,EAf5B,KACvBpG,SAASsK,KAAKpK,UAAUqK,OAAO,eAgB5B+D,GAAgBy5D,EACfA,EAAkBjmD,KAAKwpB,GACrB,mBAACD,GAAA,EAAD,CACEjnC,IAAKknC,EAAQjqC,GACbiqC,QAASA,EACTjnC,KAAM2+D,EAAAA,EACNx4B,oBAAqBA,EACrBtmC,QAAS2+D,EACTxrC,SAAUiU,MAGZh9B,EACF,mBAAC8T,GAAA,EAAD,WACEhc,OC1CV,IAAexB,EAAAA,EAAAA,KA1BsB,EACnCoB,OAAAA,EAAQgiE,aAAAA,EAAcC,eAAAA,EAAgBz7D,QAAAA,EAASo7C,oBAAAA,MAE/C,MAAOse,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAepgE,EAAQwG,GAE9D3I,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACspD,GAAA,EAAD,CACEpnD,OAAQA,EACRihE,WAAS,EACTxgE,UAAU,QACVumD,UAAU,SACV/oD,UAAU,iBACVuI,QAASA,EACTo7C,oBAAqBA,EACrB4e,aAAe75D,EAAAA,QAAkCvG,EAAnB8/D,EAC9BO,aAAe95D,EAAAA,QAAkCvG,EAAnB+/D,EAC9BO,mBAAoB/5D,EAAAA,IAEnBq7D,GAAgB,mBAACthE,EAAA,EAAD,CAAUC,KAAK,OAAOzC,QAAS8jE,GAAenkE,EAAK,qBACnEokE,GAAkB,mBAACvhE,EAAA,EAAD,CAAUC,KAAK,WAAWzC,QAAS+jE,GAAiBpkE,EAAK,wB,qCCkBlF,MAsEA,IAAee,EAAAA,EAAAA,KAtEoB,EACjCoB,OAAAA,EACA01D,OAAAA,EACAlvD,QAAAA,EACAmvD,cAAAA,EACAnD,eAAAA,MAGA,MAAMv3C,GAAehX,EAAAA,EAAAA,IAAuB,OACtC,aAAEqE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQI,OAAWA,GAAW,GACzF8hE,GAAsBC,EAAAA,GAAAA,GAAuBzM,EAAOn5D,OAASm5D,OAASt1D,EAhDvD,MAgDqF,GAEpGgiE,GAAoBxkE,EAAAA,EAAAA,KAAa67D,IACrC9D,EAAc8D,EAAMC,QACpBlH,EAAe,CAAEiH,MAAOA,EAAMp+D,OAC7B,CAACm3D,EAAgBmD,IAEd9pC,GAAcjuB,EAAAA,EAAAA,KAAY,CAAC87D,EAAgBr+D,KAC/Cs6D,EAAc+D,GACdlH,EAAe,CAAEiH,MAAOp+D,MACvB,CAACm3D,EAAgBmD,IAEd0M,EAAgBhS,GAAsB,CAC1Cz2C,SAAU5Z,EACVwvD,cAAc,EACd7zC,MAAO+5C,EACPhrC,SAAU03C,EACV57D,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,MAlEZ,SAAwByX,EAAegC,GACrC,MAAMlgB,EAAYkgB,EAAaxW,QAC/B,IAAK1J,EACH,OAGF,MAAM,eAAE60D,EAAF,YAAkBD,GAAgBR,GACtCp0D,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAK40D,EAAYpzD,SAAWozD,EAAY12C,GACtC,OAEF,MAAMi3C,EAAQN,EAAe,GAC7B,IAAKA,EAAet0D,SAAS2d,IACvBA,IAAUi3C,IAAUC,GAAep1D,EAAW40D,EAAYO,IAAQ,GAAQ,CAC9E,MACMyL,EAAuB,UADZ1iD,EAAQ22C,EAAeA,EAAerzD,OAAS,GAAK,QAAU,OAxBxD,GAyBgB0c,EAA6B,GAEpE4iD,EAAAA,GAAAA,GAA2B9gE,EAAW4gE,IA2CtC2G,CAAeD,EAAepnD,KAC7B,CAAConD,IAEJ,MAQMpkE,GAAYmE,EAAAA,EAAAA,GAChB,gDACAoG,GAGF,OACE,0BACE5C,IAAKqV,EACLhd,UAAWA,EACXuiE,aAAe75D,EAAAA,QAAkCvG,EAjB5B,KACvBpG,SAASsK,KAAKpK,UAAUC,IAAI,cAiB1BsmE,aAAe95D,EAAAA,QAAkCvG,EAd5B,KACvBpG,SAASsK,KAAKpK,UAAUqK,OAAO,eAe5B+D,GAAgB45D,EACfA,EAAWpmD,KAAI,CAAC29C,EAAOxgD,IACrB,mBAAC,GAAD,CACE7a,IAAKq7D,EAAMp+D,GACXo+D,MAAOA,EACPp3B,MAAOggC,IAAkBppD,EACzB/a,QAAS2tB,MAGXvjB,EACF,mBAAC8T,GAAA,EAAD,WACEhc,MC5DV,IAAexB,EAAAA,EAAAA,KAxCkB,EAC/B0f,MAAAA,EACA2J,YAAAA,EACAoiB,UAAAA,EACAk4B,SAAAA,EACAlgC,MAAAA,EACA75B,qBAAAA,EAAuB,GACvBtK,QAAAA,MAEA,IAAIq2B,EAA8B,GAElC,MAAMiuC,GAAmB5vD,EAAAA,EAAAA,GAASy3B,EAAa,eAAcA,EAAUnkC,WAAQ9F,GAW/E,OAVAmiE,EAAWA,GAAYC,GAGrBjuC,EACE,0BAAKj6B,IAAKioE,EAAUtkE,UAAWuK,EAAsBoG,IAAI,GAAG6zD,SAAS,QAAQ5zD,UAAU,UAEhFyP,IACTiW,GAAUwQ,EAAAA,GAAAA,IAAgBzmB,EAAO,IAIjC,mBAACvC,GAAA,EAAD,CACEsmB,MAAOA,EACPpkC,UAAU,iCACVsN,YAAaozD,GAAAA,EACbzgE,QAASA,GAET,2BAAMD,UAAU,SACM,iBAAZs2B,GAAuB91B,EAAAA,EAAAA,GAAW81B,GAAWA,GAEvD,0BAAKt2B,UAAU,iBACZqgB,GAAU,0BAAKrgB,UAAU,SAASqgB,GAClC2J,GAAgB,0BAAKhqB,UAAU,eAAegqB,QCavD,IAAerpB,EAAAA,EAAAA,KAjDmB,EAChCyjC,MAAAA,EAAOqgC,aAAAA,EAAcC,aAAAA,EAAczkE,QAAAA,MAC/B,MACJ,IAAIsS,EACA65B,EACAu4B,EAEA,UAAWD,IACbnyD,EAAQmyD,EAAanyD,OAGnB,cAAemyD,IACjBt4B,EAAYs4B,EAAat4B,WAEvB,iBAAkBs4B,GAAgBD,IACpCE,EAAeD,EAAaC,cAG9B,MAAMJ,GAAmB5vD,EAAAA,EAAAA,GAASgwD,EAAgB,eAAcA,EAAa18D,WAAQ9F,GAC/EktB,GAAe1a,EAAAA,EAAAA,GAASpC,GAAU,QAAOA,EAAMnV,aAC/CmN,GAAuBq8B,EAAAA,GAAAA,GAAmBvX,GAE1CzB,GAAcjuB,EAAAA,EAAAA,KAAY,KAC9BM,EAAQykE,KACP,CAACA,EAAczkE,IAEA,QAAlB,GAAIwkE,EACF,OACE,0BAAKzkE,UAAU,kCAAkCC,QAAS2tB,GACxD,0BAAKvxB,KAAK,UAACkW,SAAD,iBAAC,EAAO65B,iBAAR,aAAC,EAAkBC,UAAYk4B,EAAkB5zD,IAAI,KAC/D,0BAAKtU,IAAKgzB,EAAcrvB,WAAWmE,EAAAA,EAAAA,GAAe,aAAcoG,GAAuBoG,IAAI,MAKjG,MAAM,MAAE0P,EAAF,YAAS2J,GAAgB06C,EAE/B,OACE,mBAAC,GAAD,CACEtgC,MAAOA,EACPkgC,SAAUj1C,IAA0B,QAAT,EAAA+c,SAAA,eAAWC,UAAWk4B,EACjDh6D,qBAAsBA,EACtB8V,MAAOA,EACP2J,YAAaA,EACb/pB,QAAS2tB,OCjCf,IAAejtB,EAAAA,EAAAA,KApBqB,EAAGyjC,MAAAA,EAAOsgC,aAAAA,EAAczkE,QAAAA,MAC1D,MAAM,MACJogB,EADI,IACGpY,EADH,YACQ+hB,EADR,aACqB26C,GACvBD,EAEE92C,GAAcjuB,EAAAA,EAAAA,KAAY,KAC9BM,EAAQykE,KACP,CAACA,EAAczkE,IAElB,OACE,mBAAC,GAAD,CACEmkC,MAAOA,EACPgI,UAAWu4B,EACXtkD,MAAOA,GAASpY,EAChB+hB,YAAaA,EACb/pB,QAAS2tB,OCYf,IAAejtB,EAAAA,EAAAA,KAvBiB,EAC9B+jE,aAAAA,EAAcn+B,oBAAAA,EAAqBtmC,QAAAA,MAEnC,MAAM,IAAEqgE,GAAQoE,EAEV92C,GAAcjuB,EAAAA,EAAAA,KAAY,KAC9BM,EAAQykE,KACP,CAACA,EAAczkE,IAElB,GAAKqgE,EAIL,OACE,mBAAC,GAAD,CACEA,IAAKA,EACL/5B,oBAAqBA,EACrBvmC,UAAU,sBACVC,QAAS2tB,OCCf,IAAejtB,EAAAA,EAAAA,KApBqB,EAAG+jE,aAAAA,EAAcn+B,oBAAAA,EAAqBtmC,QAAAA,MACxE,MAAM,QAAEonC,GAAYq9B,EAEpB,GAAKr9B,EAIL,OACE,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTjnC,KAAMwkE,EAAAA,GACNr+B,oBAAqBA,EACrBlmB,MAAOgnB,EAAQm0B,MACfx7D,UAAU,sBACVC,QAASA,EACTmzB,SAAUsxC,OCAV12C,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAK,GAwKjD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,SAClByD,GACA,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,WAAY,WAAY,yBAHRZ,EAxJmC,EACrDqD,OAAAA,EACAuhE,MAAAA,EACAuB,UAAAA,EACAC,iBAAAA,EACAC,SAAAA,EACAroD,SAAAA,EACAnU,QAAAA,EACAqmB,SAAAA,EACAo2C,SAAAA,EACAC,eAAAA,MAGA,MAAMjoD,GAAehX,EAAAA,EAAAA,IAAuB,OACtC,aAAEqE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQI,OAAWA,GAAW,IAE7FkmC,QAAS9B,IACPgC,EAAAA,GAAAA,IAAwB,CAC1BC,QAASxrB,EACTkkD,WApC6B,IAqC7BvU,YAAa5qD,IAGT6vB,GAAiBjyB,EAAAA,EAAAA,KAAY,EAAGob,UAAAA,MAChCA,IAAc8W,EAAAA,GAAAA,WAChB7D,GAAatR,KAEd,CAACA,IAEE0nD,EAAgBhS,GAAsB,CAC1Cz2C,SAAU5Z,EACVuwD,6BAA8BuS,EAC9BtS,kBAAmBsS,EACnBnnD,MAAOonD,EACPr4C,SAAUw4C,EACV18D,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,KACRwuD,GAAsB,uBAAwBqS,EAAepnD,KAC5D,CAAConD,IAEJ,MAAMc,GAAevlE,EAAAA,EAAAA,KAAY,KAC/BivB,EAAS,CAAExxB,GAAIkmE,IACf0B,EAAS,CAAE1B,MAAAA,EAAO74B,MAAOs6B,EAAUI,eAClC,CAAC7B,EAAO10C,EAAUo2C,EAAUD,IAEzBK,GAAuBz4D,EAAAA,EAAAA,GAC3Bm4D,MAAAA,GAAAA,EAAkBxmE,OACdwmE,OACA3iE,EACJkI,GAEIg7D,EAA2BP,IAAqBA,EAAiBxmE,OACnE8mE,EACAN,EAEJ,IAAKz6D,IAAiBg7D,IAA8BA,EAAyB/mE,SAAWymE,EACtF,OAGF,MAAM/kE,GAAYmE,EAAAA,EAAAA,GAChB,oCACAuE,EAAAA,GAAe,eAAiB,gBAChCm8D,GAAa,UACbt6D,GAuEF,OACE,mBAACkT,GAAA,EAAD,CACE9V,IAAKqV,EACLhd,UAAWA,EACX0d,MAAO2nD,EACPhxC,aAAa,uBACbrB,YAAU,EACVrV,WAAYiU,EACZ0zC,cAAe,KAEdP,GA5ED,mBAACjnD,GAAA,EAAD,CAAUjW,QAAM,EAAC7H,UAAU,wBAAwBC,QAASilE,GAC1D,2BAAMllE,UAAU,SAAS+kE,EAAU9hE,OAMhCoiE,EAA0BxnD,KAAI,CAAC0nD,EAAiBvqD,KACrD,OAAQuqD,EAAgBr4D,MACtB,IAAK,MACH,OACE,mBAAC,GAAD,CACE/M,IAAKolE,EAAgBnoE,GACrBsnE,aAAca,EACdh/B,oBAAqBA,EACrBtmC,QAASglE,IAIf,IAAK,QACH,OACE,mBAAC,GAAD,CACE9kE,IAAKolE,EAAgBnoE,GACrBqnE,aAAcI,EACdH,aAAca,EACdtlE,QAASglE,IAIf,IAAK,UACH,OACE,mBAAC,GAAD,CACE9kE,IAAKolE,EAAgBnoE,GACrBsnE,aAAca,EACdh/B,oBAAqBA,EACrBtmC,QAASglE,IAIf,IAAK,QACL,IAAK,OACH,OACE,mBAAC,GAAD,CACE9kE,IAAKolE,EAAgBnoE,GACrBgnC,MAAOggC,IAAkBppD,EACzB0pD,aAAca,EACdtlE,QAASglE,IAGf,IAAK,UACL,IAAK,QACH,OACE,mBAAC,GAAD,CACE9kE,IAAKolE,EAAgBnoE,GACrBgnC,MAAOggC,IAAkBppD,EACzB0pD,aAAca,EACdtlE,QAASglE,IAIf,QACE,gB,eCvHV,MA+GA,IAAetkE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1B4mE,EAAellE,IAAQqR,EAAAA,EAAAA,IAAmBhT,EAAQ2B,EAAKlD,IAC7D,IAAKkD,IAASklE,EACZ,MAAO,GAGT,MAAM,MAAE1zC,EAAF,QAAS49B,IAAYC,EAAAA,EAAAA,IAAwBhxD,IAAW,IACxD,WAAE81C,EAAF,SAAcziC,GAAa09C,GAAW,GAE5C,MAAO,CACLpvD,KAAAA,EACAklE,aAAAA,EACA1zC,MAAAA,EACA2iB,WAAAA,EACAziC,SAAAA,MAGJ,CAACrT,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAA2B,kBAnB5DZ,EA/G2C,EAC7DE,OAAAA,EACAkS,SAAAA,EACAvI,QAAAA,EACAoT,SAAAA,EACArb,KAAAA,EACAklE,aAAAA,EACA1zC,MAAAA,EACA2iB,WAAAA,EACAziC,SAAAA,EACA89C,wBAAAA,EACArwD,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KAEP4lE,GAAe5jE,EAAAA,EAAAA,KAAQ,KAC3B,KAAKiwB,GAAU9f,GAAaA,EAAS1T,QAAWknE,GAC9C,OAAOtzC,GAAAA,EAGT,MAAMw9B,EAAU19C,EAAS6L,KAAKzgB,IAC5B,MAAMY,EAAUwnE,EAAapoE,GAC7B,IAAKY,EACH,OAGF,MAAM0nE,EAAa1nE,EAAQqT,UAAWpS,EAAAA,EAAAA,KAAW0mE,EAAAA,EAAAA,MAAa3nE,EAAQqT,eAAYlP,EAElF,IAAIyjE,EACJ,GAAItlE,IAAQsoB,EAAAA,EAAAA,IAActoB,GACxBslE,EAAatlE,OACR,GAAItC,EAAQ6nE,YAAa,CAC9B,MAAM,cAAEC,EAAF,WAAiBprD,GAAe1c,EAAQ6nE,YAC9CD,EAAaE,GAAiBprD,GAAaxb,EAAAA,EAAAA,KAAWymE,EAAAA,EAAAA,MAAajrD,QAAcvY,OAEjFyjE,EAAa5nE,EAAQqT,UAAWnS,EAAAA,EAAAA,KAAWymE,EAAAA,EAAAA,MAAa3nE,EAAQqT,eAAYlP,EAG9E,MAAO,CACLnE,QAAAA,EACA0nE,WAAAA,EACAE,WAAAA,EACA3lE,QAAS,IAAMR,EAAa,CAAEb,OAAAA,EAAQkS,SAAAA,EAAUjS,UAAWzB,QAE5Dmf,OAAOpT,SAEV,OAAO48D,EAAAA,EAAAA,IAAQrW,GAAS,EAAG1xD,QAAAA,KAAcA,EAAQ0C,MAAM,UACtD,CAAC9B,EAAQkS,EAAUrR,EAAcuS,EAAU1R,EAAMklE,EAAc1zC,KA2BlEhW,EAAAA,EAAAA,IAAeH,EAAUpT,GAGzB,MAAMyU,GAAehX,EAAAA,EAAAA,IAAuB,MACtCmV,GAAgB+B,EAAAA,GAAAA,GAA0BF,GAAc,GAAOhC,IACnE,MAAMgrD,EAAcP,MAAAA,OAAH,EAAGA,GAA0B,IAAXzqD,EAAe,EAAIA,GAClDgrD,GACFA,EAAY/lE,YAEb,oBAAoB,GAEvB,OACE,mBAACwd,GAAA,EAAD,CACEzd,UAAU,4BACV0d,MAAO+nD,EACPQ,iBAAkB,EAClBtoD,WAAYmyC,EACZ98B,YAAU,EACV3V,UAAWlC,EACXxT,IAAKqV,GAEL,wBAAGhd,UAAU,cAAcO,IAAI,QAC3BuxB,EAEkB,IAAf2iB,GAAqBgxB,EAAannE,OAEpB,IAAfm2C,EACF,kBAEC,GAAGgxB,EAAannE,SAAWm2C,GAAcgxB,EAAannE,yBAJvDsB,EAAK,yBAFLA,EAAK,gCASR6lE,EAAa5nD,KAzDS,EACzB7f,QAAAA,EAAS0nE,WAAAA,EAAYE,WAAAA,EAAY3lE,QAAAA,MAEjC,MAAMogB,EAAQulD,GAAanmD,EAAAA,EAAAA,GAAa7f,EAAMgmE,IAAcvzC,EAAAA,EAAAA,IAAgBqzC,GACtEziE,GAAO8sB,EAAAA,EAAAA,IAAsBnwB,EAAM5B,GAEzC,OACE,mBAAC8f,GAAA,EAAD,CACE9d,UAAU,gDACVC,QAASA,GAET,mBAACC,EAAA,EAAD,CAAQI,KAAMslE,EAAYvlE,KAAMqlE,IAChC,0BAAK1lE,UAAU,QACb,0BAAKA,UAAU,SACb,yBAAIO,IAAI,QAAQ8f,IAAS7f,EAAAA,EAAAA,GAAW6f,IACpC,mBAAC6lD,GAAA,EAAD,CAAiBloE,QAASA,KAE5B,0BAAKgC,UAAU,WAAWO,IAAI,SAC3BC,EAAAA,EAAAA,GAAWyC,EAAM,CAAC,QAAS,aAAc,CAAE+sB,UAAW8B,e,eC1FnE,MAqFA,IAAenxB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAU0tD,aAAAA,MACF,CACL2T,KAAK5T,EAAAA,EAAAA,IAAiBztD,EAAQ0tD,GAC9BkT,YAAY4G,EAAAA,EAAAA,IAAyBxnE,OAGzC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,eAAgB,sBAPpDZ,EAnFgD,EAClE2tD,aAAAA,EAAc9lB,oBAAAA,EAAqBy5B,IAAAA,EAAKT,WAAAA,EACxChT,aAAAA,EAAcC,iBAAAA,EAAkB4Z,gBAAAA,EAAiBC,cAAAA,MAEjD,MAAMzmE,GAAOC,EAAAA,EAAAA,KACPymE,EAAUtG,GAAO72D,QAAQ62D,EAAIl2B,eAC7By8B,EAAoBp9D,QAAQ62D,MAAAA,OAAD,EAACA,EAAKh5B,WAEhCyB,EAAaC,EAAWC,IAAc9kB,EAAAA,GAAAA,MAE7C2iD,EAAAA,GAAAA,IAAY,KACVH,EAAc59B,KACb,CAACA,EAAa49B,IAEjB,MAAMvC,GAAoBjiE,EAAAA,EAAAA,KAAQ,KAChC,IAAKm+D,EACH,MAAO,GAGT,MAAMyG,GAAmBzG,EAAI0G,QAAU,IAAI7oD,KAAI,EAAGzgB,GAAAA,KAASA,IACrDupE,EAAgB3G,EAAIh5B,SAAWg5B,EAAIh5B,SAASzqB,QAAO,EAAGnf,GAAAA,MAAUqpE,EAAgBppE,SAASD,KAAO,GAEtG,MAAO,IAAK4iE,EAAI0G,QAAU,MAAQC,GAAehxC,MAAM,EAxB/B,KAyBvB,CAACqqC,KAEJz8D,EAAAA,EAAAA,KAAU,MAEHgjE,GAAqBzC,EAAkBxlE,OA7BpB,GA8BtBiuD,EAAa,CAAEF,aAAAA,MAEhB,CAACka,EAAmBzC,EAAkBxlE,OAAQiuD,EAAcF,IAE/D,MAAMua,GAAiBjnE,EAAAA,EAAAA,KAAY,KACjC6sD,EAAiB,CAAEH,aAAAA,MAClB,CAACG,EAAkBH,IAEtB,IAAK2T,EACH,OAGF,MAAM6G,EAAoB/C,EAAkBxlE,OAAS,EAErD,OACE,0BAAK6B,IAAK6/D,EAAI5iE,GAAI4C,UAAU,cAAcO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAClE,0BAAKnC,UAAU,sBACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,QAAQO,IAAI,QAAQy/D,EAAI3/C,OACtC,wBAAGrgB,UAAU,QAAQO,IAAI,QAAQX,EAAK,WAAYogE,EAAIl/B,MAAO,OAE/D,mBAAC9+B,EAAA,EAAD,CACEhC,UAAWsmE,EAAU,gBAAankE,EAClCD,MAAM,UACN9B,KAAK,OACLsgC,MAAI,EACJC,OAAK,EACL1gC,QAAS2mE,GAERhnE,EAAK0mE,EAAU,qBAAuB,sBAG3C,0BAAKtmE,UAAU,qBACX6mE,GAAqB,mBAACh2D,EAAA,EAAD,MACtBg2D,GAAqB/C,EAAkBjmD,KAAKwpB,GAC3C,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTjnC,KAAM0mE,EAAAA,GACNvgC,oBAAqBA,EACrBy4B,WAAYO,GAAc92B,GAAe29B,EACzCnmE,QAASyoC,OAIdm+B,GACC,mBAAC,KAAD,CACE9kE,OAAQ0mC,EACRsB,YAAa+5B,EAAkB,GAC/Bv7D,QAASogC,SC/Eb3a,IAAelqB,EAAAA,EAAAA,KAAUmqB,GAAOA,KAAM,KAAO,GA0EnD,IAAettB,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAMmT,GAAgBi1D,EAAAA,EAAAA,IAA2BpoE,IAC3C,MAAEmzB,EAAF,UAASyvB,GAAczvC,GAAiB,IACxC,SAAEk1D,GAAaroE,EAAOqoC,SAE5B,MAAO,CACLlV,MAAAA,EACAm1C,YAAaD,EAASt/B,OACtB6Z,UAAAA,MAGJ,CAACliD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAZpCZ,EAxE6C,EAC/D6J,QAAAA,EACAoT,SAAAA,EACAmW,MAAAA,EACAm1C,YAAAA,EACA1lB,UAAAA,EACA2lB,qBAAAA,MAGA,MAAMlqD,GAAehX,EAAAA,EAAAA,IAAuB,MAEtCpG,GAAOC,EAAAA,EAAAA,MAEN4oC,EAAa0+B,IAAkB7jE,EAAAA,EAAAA,KAAS,IAG7C+kC,QAAS9B,IACPgC,EAAAA,GAAAA,IAAwB,CAAEC,QAASxrB,EAAc0vC,WArBzB,MAqE5B,OA5CAnpD,EAAAA,EAAAA,KAAU,KACRyqB,IAAa,KACXk5C,WAIJprD,EAAAA,EAAAA,IAAeH,EAAUpT,GAuCvB,0BAAKZ,IAAKqV,EAAchd,UAAU,8BAA8BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GArC5F,WACE,QAAcA,IAAV2vB,EAIJ,OAAKA,GAASm1C,EACLA,EAAYppD,KAAKzgB,GACtB,mBAAC,GAAD,CACE+C,IAAK/C,EACLivD,aAAcjvD,EACdmpC,oBAAqBA,EACrB6/B,gBAAiB39B,EACjB49B,cAAec,MAKjB5lB,EACGA,EAAUjjD,OAIRijD,EAAU1jC,KAAKzgB,GACpB,mBAAC,GAAD,CACE+C,IAAK/C,EACLivD,aAAcjvD,EACdmpC,oBAAqBA,EACrB6/B,gBAAiB39B,EACjB49B,cAAec,MATV,wBAAGnnE,UAAU,cAAcO,IAAI,QAA/B,kBAcJ,mBAAC4d,GAAA,EAAD,MAKJmkD,QCsBP,IAAe3hE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAMmT,GAAgBs1D,EAAAA,EAAAA,IAAuBzoE,IACvC,MAAEmzB,EAAF,QAAS49B,GAAY59C,GAAiB,IACtC,OAAElT,IAAW2oB,EAAAA,EAAAA,IAAyB5oB,IAAW,GACjD2B,EAAO1B,GAASM,EAAAA,EAAAA,IAAWP,EAAQC,QAAUuD,EAGnD,MAAO,CACL2vB,MAAAA,EACA49B,QAAAA,EACApvD,KAAAA,EACA+mE,cANoB/mE,GAAOgnE,EAAAA,EAAAA,IAAoB3oE,EAAQ2B,QAAQ6B,MASnE,CAAC9C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,iBAAkB,cAAe,uBAfrEZ,EAhFyC,EAC3D6J,QAAAA,EACAoT,SAAAA,EACAmW,MAAAA,EACA49B,QAAAA,EACApvD,KAAAA,EACA+mE,cAAAA,EACAE,eAAAA,EACA9a,YAAAA,EACA+a,kBAAAA,MAGA,MAAMxqD,GAAehX,EAAAA,EAAAA,IAAuB,OAG1CqiC,QAAS9B,IACPgC,EAAAA,GAAAA,IAAwB,CAAEC,QAASxrB,EAAckkD,WAlBzB,OAoBtB,YAAEH,IAAgB7U,EAAAA,EAAAA,IAA4B5rD,EAAM+mE,GAEpDI,GAAiB9nE,EAAAA,EAAAA,KAAa2gE,IAC9BS,GACFtU,EAAY,CAAE6T,IAAAA,IAGZ53D,EAAAA,IACF8+D,EAAkB,CAAE11C,WAAO3vB,MAE5B,CAAC4+D,EAAatU,EAAa+a,IAExB5nE,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GA6BzB,MAAMm/D,EAAav+D,aAAkBhH,IAAV2vB,GAAuB49B,GAAWA,EAAQpxD,QAErE,OACE,0BAAK0B,UAAU,YAAYO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACnD,mBAACsb,GAAA,EAAD,CACE9V,IAAKqV,EACLhd,WAAWmE,EAAAA,EAAAA,GAAe,8BAA+BujE,GAAc,QACvEhqD,MAAOgyC,EACPr7B,aAAa,aACb4xC,iBAzEkB,GA0ElBjzC,YAAU,EACVrV,WAAY4pD,GAtClB,WACE,QAAcplE,IAAV2vB,EAIJ,OAAK49B,EAMAA,EAAQpxD,OAMNoxD,EAAQ7xC,KAAKyiD,GAClB,mBAAC,GAAD,CACEngE,IAAKmgE,EAAIljE,GACTkjE,IAAKA,EACL/5B,oBAAqBA,EACrBtmC,QAASwnE,MATT,wBAAGznE,UAAU,cAAcO,IAAI,QAAQX,EAAK,gBAN5C,mBAACue,GAAA,EAAD,MAiCCmkD,SCcT,IAAe3hE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUgpE,OAAAA,MACT,MAAM,OAAEC,EAAF,QAAUC,GAAYlpE,EAAOmpE,YAEnC,MAAO,CACLF,OAAQA,MAAAA,OAAF,EAAEA,EAASD,EAAO1N,QACxB8N,QAASF,MAAAA,OAAD,EAACA,EAAUF,EAAO1N,UAAY,OAG1C,CAACt7D,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,wBAAyB,WAAY,sBATtEZ,EA5FiD,EACnE4B,KAAAA,EACAtC,QAAAA,EACA2pE,OAAAA,EACAK,WAAAA,EACAC,YAAAA,EACAL,OAAAA,EACAG,OAAAA,EACAG,sBAAAA,EACAt5C,SAAAA,EACAu5C,iBAAAA,MAEA,MAAMC,GAAkBz7D,EAAAA,EAAAA,GAAoBq7D,EAAWK,cAChDz0C,EAAW00C,IAAgBhlE,EAAAA,EAAAA,KAAkB,GAC9CilE,EAAkBp/D,QAAQy+D,IAC1B,OAAE3N,EAAF,KAAUh3D,GAAS0kE,EACnB/nE,GAAOC,EAAAA,EAAAA,MAEb0D,EAAAA,EAAAA,KAAU,KAEHglE,GAAmBH,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpB5nE,KAAAA,EAAMzB,UAAWb,EAAQZ,GAAI68D,OAAAA,EAAQ8N,OAAAA,EAAQS,MAzB/B,EAyBqDC,mBAAmB,MAIzF,CAACT,EAAWK,YAAaE,IAE5B,MAAMG,GAAsB/oE,EAAAA,EAAAA,KAAY,KACtC2oE,GAAa,GACbJ,EAAsB,CACpB5nE,KAAAA,EAAMzB,UAAWb,EAAQZ,GAAI68D,OAAAA,EAAQ8N,OAAAA,EAAQS,MAjC3B,OAmCnB,CAACloE,EAAM4nE,EAAuBlqE,EAAQZ,GAAI2qE,EAAQ9N,KAErD12D,EAAAA,EAAAA,KAAU,KACR+kE,GAAa,KACZ,CAACV,IAEJ,MAAMe,GAAoBhpE,EAAAA,EAAAA,KAAavC,IACrCwxB,EAAS,CAAExxB,GAAAA,IACX+qE,MACC,CAACA,EAAkBv5C,IAetB,OACE,0BAAK5uB,UAAU,qBACb,0BAAKA,UAAU,eACZ4nE,EACGA,EAAO/pD,KAAKzgB,GACZ,mBAAC0gB,GAAA,EAAD,CACE3d,IAAK/C,EACL4C,UAAU,sBACVC,QAAS,IAAM0oE,EAAkBvrE,IAEjC,mBAAC2gB,GAAA,EAAD,CACE+P,WAAW,OACX7P,OAAQ7gB,EACRy7B,eAAa,EACb+vC,kBAAgB,OAIpB,mBAACzqD,GAAA,EAAD,MACHypD,GAhCP,WACE,MAAMiB,EAAkBb,EAAWK,YAAcT,EAAQtpE,OAEzD,OAAO0pE,EAAWK,YAlDA,GAkD+BQ,EAAkB,GACjE,mBAAC,GAAD,CACE/nC,MAAO+nC,EACP9nC,SAAS,QACTnN,UAAWA,EACX3zB,QAASyoE,IAwBEI,IAEb,0BAAK9oE,UAAU,cAAcO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACrD,2BAAMnC,UAAU,eAAeO,IAAI,QAAQ0C,GAC3C,2BAAMjD,UAAU,iBAAiBO,IAAKX,EAAKoc,MAAQ,YAAS7Z,IAQ7C8K,EAPE+6D,EAAWK,aAOEU,EAPWd,GAQhC,GAAMh7D,EAAQ87D,EAAS,KAAKhkE,UAAY,GATjD,OAQR,IAAuBkI,EAAe87D,MC7DtC,IAAepoE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACEmpE,aAAa,OAAElpE,EAAF,UAAUC,GADnB,aAEJqwB,GACEvwB,EAEJ,OAAKC,GAAWC,EAOT,CACLyB,MAJWpB,EAAAA,EAAAA,IAAWP,EAAQC,GAK9BZ,SAJcmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAKhDqwB,aAAAA,GATO,KAROxwB,EAzC2B,EAC7C6J,QAAAA,EACAoT,SAAAA,EACArb,KAAAA,EACAtC,QAAAA,EACAkxB,aAAAA,MAEA,MAAMtvB,GAAOC,EAAAA,EAAAA,KAGb,IAFAic,EAAAA,EAAAA,IAAeH,EAAUpT,IAEpBvK,IAAYsC,EACf,OAAO,mBAAC6d,GAAA,EAAD,MAGT,MAAM,QAAE47C,EAAF,QAAWrK,IAAYsZ,EAAAA,EAAAA,IAAehrE,GAC5C,IAAK0xD,EAAQA,QACX,OAGF,MAAMuZ,GAAkBC,EAAAA,EAAAA,IAAqBxZ,EAAQA,QAAS,UAE9D,OACE,0BAAK1vD,UAAU,cAAcO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACrD,yBAAInC,UAAU,gBAAgBO,IAAI,SAAQC,EAAAA,EAAAA,GAAWu5D,EAAQ3B,SAAU,CAAC,QAAS,QACjF,0BAAKp4D,UAAU,mCACZkvB,GAAgB6qC,EAAQC,QAAQn8C,KAAK8pD,GACpC,mBAAC,GAAD,CACExnE,IAAM,GAAEnC,EAAQZ,MAAMuqE,EAAO1N,SAC7B35D,KAAMA,EACNtC,QAASA,EACT2pE,OAAQA,EACRK,WAAYiB,EAAgBtB,EAAO1N,QACnCgO,YAAavY,EAAQuY,iBAGvB/4C,GAAgB,mBAAC/Q,GAAA,EAAD,YChBpBic,GAA2B,4BAoKjC,IAAez5B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUsf,OAAAA,MACT,MAAM5d,GAAOpB,EAAAA,EAAAA,IAAWN,EAAQsf,GAC1B3d,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQsf,IAC1B,SAAElb,GAAapE,EAAOwqE,WAG5B,MAAO,CACL9oE,KAAAA,EAAMC,KAAAA,EAAMyC,SAAAA,EAAUiqB,SAHRC,EAAAA,EAAAA,IAAkB3sB,GAAM4sB,EAAAA,EAAAA,IAAqBvuB,IAASwuB,EAAAA,EAAAA,IAAuBxuB,QAM/F,CAACA,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAChD,gBAAiB,aAAc,kBAAmB,WAAY,mBAZ9CZ,EAlK0C,EAC5Duf,OAAAA,EACA5d,KAAAA,EACAC,KAAAA,EACAyC,SAAAA,EACAiqB,QAAAA,EACAo8C,cAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACA36C,SAAAA,EACArmB,QAAAA,EACAoT,SAAAA,MAEA,MAAO6tD,EAAoBC,EAAkBC,IAAqB7lD,EAAAA,GAAAA,MAC3DsX,EAAwBC,IAA6B93B,EAAAA,EAAAA,KAAS,IAC9Dsc,EAAOyb,IAAY/3B,EAAAA,EAAAA,MACpB1D,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMiyB,EAAmBn6B,GAAQA,EAAKk6B,WAAmB,GACnDG,EAAkBr6B,GAAQA,EAAKo6B,UAAkB,IAEhDF,EAAWgB,IAAgBj4B,EAAAA,EAAAA,IAASk3B,IACpCC,EAAUe,IAAel4B,EAAAA,EAAAA,IAASo3B,IAClCivC,EAAwBC,IAA6BtmE,EAAAA,EAAAA,KAAU0pB,IAEtEzpB,EAAAA,EAAAA,KAAU,KACRqmE,GAA2B58C,KAC1B,CAACA,KAEJzpB,EAAAA,EAAAA,KAAU,KACR63B,GAA0B,GAC1BsuC,MACC,CAACA,EAAmBzrD,KAEvB1a,EAAAA,EAAAA,KAAU,KACRg4B,EAAaf,GACbgB,EAAYd,KACX,CAACF,EAAkBE,EAAiBr6B,KAEvCkD,EAAAA,EAAAA,KAAU,KACJR,IAAa8mE,EAAAA,GAAAA,WACfzuC,GAA0B,GAC1BC,OAASl5B,GACTunE,OAED,CAACA,EAAmB3mE,IAEvB,MAAMi5B,GAAwBr8B,EAAAA,EAAAA,KAAayE,IACzCm3B,EAAan3B,EAAEiJ,OAAOJ,OACtBmuB,GAA0B,KACzB,IAEGa,GAAuBt8B,EAAAA,EAAAA,KAAayE,IACxCo3B,EAAYp3B,EAAEiJ,OAAOJ,OACrBmuB,GAA0B,KACzB,IAEG0uC,GAA2BnqE,EAAAA,EAAAA,KAAayE,IAC5CwlE,EAA0BxlE,EAAEiJ,OAAO8wB,SACnC/C,GAA0B,KACzB,IAEGe,GAAoBx8B,EAAAA,EAAAA,KAAY,KACpC,MAAMy8B,EAAmB7B,EAAUR,OAC7BsC,EAAkB5B,EAASV,OAE5BqC,EAAiB99B,QACpB+8B,EAASjB,IAGXgvC,EAAc,CACZnrD,OAAAA,EACA+O,SAAU28C,EACVpvC,UAAW6B,EACX3B,SAAU4B,MAEX,CAAC9B,EAAWE,EAAU2uC,EAAenrD,EAAQ0rD,IAE1CI,GAAsBpqE,EAAAA,EAAAA,KAAY,KACtC2pE,EAAc,CACZ1qE,OAAQ0B,EAAKlD,GACbkrB,oBAAoB,IAEtB+gD,EAAW,CAAEprD,OAAAA,IACbyrD,IACAH,IACA36C,EAAS,CAAExxB,QAAI+E,MACd,CAAC7B,EAAKlD,GAAIssE,EAAmBH,EAAiBD,EAAeD,EAAYz6C,EAAU3Q,IAEtF,IAAK5d,EACH,OAGF,MAAMuzB,EAAY7wB,IAAa8mE,EAAAA,GAAAA,WAE/B,OACE,0BAAK7pE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC+d,GAAA,EAAD,CACEE,OAAQ5d,EAAKjD,GACb0wB,WAAW,QACX9P,OAAO,gBACPgsD,cAAY,IAEd,mBAAC5sD,GAAA,EAAD,CACEhgB,GAAG,kBACHmtB,MAAO3qB,EAAK,iCACZuN,SAAU6uB,EACV/uB,MAAOstB,EACP3a,MAAOA,IAAUwa,GAA2Bxa,OAAQzd,IAEtD,mBAACib,GAAA,EAAD,CACEhgB,GAAG,iBACHmtB,MAAO3qB,EAAK,gCACZuN,SAAU8uB,EACVhvB,MAAOwtB,IAET,0BAAKz6B,UAAU,gCACb,mBAACk+B,GAAA,EAAD,CACEC,QAASwrC,EACTp/C,MAAO3qB,EAAK,iBACZkpC,SAAUlpC,EAAK+pE,EACX,gCACA,kCACJx8D,SAAU28D,MAIhB,0BAAK9pE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAUpb,KAAK,SAASmF,QAAM,EAAC2kB,aAAW,EAACvsB,QAASwpE,GACjD7pE,EAAK,oBAIZ,mBAAC68B,GAAA,EAAD,CACEjwB,QAAS2uB,EACTl7B,QAASk8B,EACTpvB,SAAU6mB,EACVxxB,UAAWxC,EAAK,SAEfg0B,EACC,mBAAC/iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,gBAGjB,mBAACyhB,GAAA,EAAD,CACE1f,OAAQynE,EACRjhE,QAASmhE,EACTzmE,KAAMrD,EAAK,2BACX8hB,aAAc9hB,EAAK,iBACnB+hB,eAAgBooD,EAChBvxC,sBAAoB,SCzJtByxC,GAAoB,6BAiR1B,IAAetpE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,SAAEmE,GAAapE,EAAOwqE,WACtBe,EAAmB/gE,QAAO,UAAC7I,EAAKq6B,gBAAN,aAAC,EAAe4yB,cAC1C4c,GAAeriD,EAAAA,EAAAA,IAAiBxnB,GAEtC,MAAO,CACLA,KAAAA,EACAyC,SAAAA,EACAonE,aAAAA,EACAD,iBAAAA,EACAE,cAAeD,EAAe7pE,EAAK+pE,WAAYC,EAAAA,EAAAA,IAAiBhqE,EAAM,cACtEiqE,YAAaJ,EAAe7pE,EAAK+pE,WAAYC,EAAAA,EAAAA,IAAiBhqE,EAAM,gBAGxE,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,yBAA0B,aAAc,kBACxC,eAAgB,gBAAiB,aAAc,cAlB/BZ,EA3Q2C,EAC7DE,OAAAA,EACA0B,KAAAA,EACAyC,SAAAA,EACAonE,aAAAA,EACAD,iBAAAA,EACAE,cAAAA,EACAG,YAAAA,EACA7yC,eAAAA,EACA8yC,uBAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,aAAAA,EACAC,cAAAA,EACArB,gBAAAA,EACA36C,SAAAA,EACArmB,QAAAA,EACAoT,SAAAA,MACI,UACJ,MAAO6tD,EAAoBC,EAAkBC,IAAqB7lD,EAAAA,GAAAA,KAC5DgnD,EAAevqE,EAAK+f,MACpByqD,EAAexqE,EAAKq6B,UAAYr6B,EAAKq6B,SAAS6nB,OAAe,IAE5DrnB,EAAwBC,IAA6B93B,EAAAA,EAAAA,KAAS,IAC9D+c,EAAOkiC,IAAYj/C,EAAAA,EAAAA,IAASunE,IAC5BroB,EAAOC,IAAYn/C,EAAAA,EAAAA,IAASwnE,IAC5Bv4D,EAAO+oB,IAAYh4B,EAAAA,EAAAA,OACnBsc,EAAOyb,IAAY/3B,EAAAA,EAAAA,MACpBynE,GAAYt2D,EAAAA,EAAAA,IAAkBnU,GAC9Bo7B,GAAuB/mB,EAAAA,EAAAA,GAASo2D,GAAW,EAAOn2D,EAAAA,GAAAA,SAClDhV,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,IAEzBhF,EAAAA,EAAAA,KAAU,KACJR,IAAa8mE,EAAAA,GAAAA,WACfzuC,GAA0B,GAC1BC,OAASl5B,MAEV,CAACY,IAEJ,MAAMioE,GAAsBrrE,EAAAA,EAAAA,KAAY,KACtC+3B,EAAeuzC,EAAAA,GAAAA,mBACd,CAACvzC,IAEEwzC,GAAwBvrE,EAAAA,EAAAA,KAAY,KACxC+3B,EAAeuzC,EAAAA,GAAAA,cACd,CAACvzC,IAEEyzC,GAAyBxrE,EAAAA,EAAAA,KAAY,KACzC+3B,EAAeuzC,EAAAA,GAAAA,oBACd,CAACvzC,IAEE0zC,GAA4BzrE,EAAAA,EAAAA,KAAY,KAC5C+3B,EAAeuzC,EAAAA,GAAAA,sBACd,CAACvzC,IAEE2zC,GAAiB1rE,EAAAA,EAAAA,KAAaw2D,IAClC76B,EAAS66B,GACT/6B,GAA0B,KACzB,IAEG0nB,GAAoBnjD,EAAAA,EAAAA,KAAayE,IACrCm+C,EAASn+C,EAAEiJ,OAAOJ,OAClBmuB,GAA0B,KACzB,IAEGkwC,GAAoB3rE,EAAAA,EAAAA,KAAayE,IACrCq+C,EAASr+C,EAAEiJ,OAAOJ,OAClBmuB,GAA0B,KACzB,IAEGmwC,IAAoB5rE,EAAAA,EAAAA,KAAY,KACpC,MAAM6rE,EAAenrD,EAAM0Z,OACrB0xC,EAAejpB,EAAMzoB,OAEtByxC,EAAaltE,OAKlBmsE,EAAW,CACT7rE,OAAAA,EACAyhB,MAAOmrD,EACPhpB,MAAOipB,EACPl5D,MAAAA,IARA8oB,EAAS4uC,MAUV,CAACznB,EAAO5jD,EAAQ2T,EAAO8N,EAAOoqD,IAE3BiB,IAAqB/rE,EAAAA,EAAAA,KAAY,KACrC+3B,EAAeuzC,EAAAA,GAAAA,gBACd,CAACvzC,IAEEi0C,IAAyBhsE,EAAAA,EAAAA,KAAY,KACzC,IAAKW,EAAKq6B,SACR,OAGF,MAAM,mBAAEixC,GAAuBtrE,EAAKq6B,SAEpC6vC,EAAuB,CAAE5rE,OAAQ0B,EAAKlD,GAAIyuE,WAAYD,MACrD,CAACtrE,EAAMkqE,IAEJsB,IAA0BjqE,EAAAA,EAAAA,KAAQ,KACtC,IAAKvB,EAAKyrE,oBACR,OAAO,EAGT,IAAIt3B,EAAa,CACf,eACA,YACA,aACA,YACA,aACA,cACA,eACAl4B,QACCpc,IAASG,EAAKyrE,oBAAqB5rE,KACpC7B,OAEF,MAAM,aAAE0tE,EAAF,SAAgBC,GAAa3rE,EAAKyrE,oBAOxC,OAJKC,GAAiBC,IACpBx3B,GAAc,GAGTA,IACN,CAACn0C,IAEE4rE,IAAc,UAAC5rE,EAAKq6B,gBAAN,iBAAC,EAAewxC,oBAAhB,aAAC,EAA6B7tE,SAAW,EAEvD8tE,IAAoBzsE,EAAAA,EAAAA,KAAY,KAChCwqE,EACFO,EAAW,CAAE9rE,OAAQ0B,EAAKlD,KAChBkD,EAAK+pE,UAGfO,EAAc,CAAEhsE,OAAQ0B,EAAKlD,KAF7ButE,EAAa,CAAE/rE,OAAQ0B,EAAKlD,KAI9BssE,IACAH,IACA36C,EAAS,CAAExxB,QAAI+E,MACd,CACDgoE,EAAc7pE,EAAK+pE,UAAW/pE,EAAKlD,GACnCssE,EAAmBH,EAAiBoB,EAAcC,EAAeF,EAAY97C,IAG/E,GAAItuB,EAAK2sD,aACP,OAGF,MAAMr5B,GAAY7wB,IAAa8mE,EAAAA,GAAAA,WAE/B,OACE,0BAAK7pE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACu8B,GAAA,EAAD,CACEb,qBAAsBA,EACtBvuB,SAAUk+D,EACVt+D,UAAWq9D,IAEb,mBAAChtD,GAAA,EAAD,CACEhgB,GAAG,cACHmtB,MAAO3qB,EAAK,aACZuN,SAAU21C,EACV71C,MAAOoT,EACPT,MAAOA,IAAUqqD,GAAoBrqD,OAAQzd,EAC7C4K,UAAWq9D,IAEb,mBAAChtD,GAAA,EAAD,CACEhgB,GAAG,cACH4C,UAAU,OACVuqB,MAAO3qB,EAAK,0BACZuN,SAAUm+D,EACVr+D,MAAOu1C,EACPz1C,UAAWq9D,IAEZ9pE,EAAK+pE,WACJ,mBAACvsD,GAAA,EAAD,CAAUpb,KAAK,OAAOm+B,WAAS,EAAC5gC,QAAS+qE,GACvC,2BAAMhrE,UAAU,SAASJ,EAAK,cAC9B,2BAAMI,UAAU,YAAYM,EAAKgyB,SAAW1yB,EAAK,cAAgBA,EAAK,iBAGzEsqE,GACC,mBAACpsD,GAAA,EAAD,CACEpb,KAAK,UACLm+B,WAAS,EACT5gC,QAASirE,GAET,2BAAMlrE,UAAU,SAASJ,EAAK,kBAC9B,2BAAMI,UAAU,YAAYJ,EAAK,sBAGrC,mBAACke,GAAA,EAAD,CACEpb,KAAK,cACLm+B,WAAS,EACT5gC,QAASkrE,EACTp+D,UAAWw9D,GAEX,2BAAMvqE,UAAU,SAASJ,EAAK,uBAC9B,2BAAMI,UAAU,WAAWO,IAAI,QAC5BurE,GADH,IA5MoB,IAgNtB,mBAAChuD,GAAA,EAAD,CACEpb,KAAK,QACLm+B,WAAS,EACT5gC,QAASmrE,GAET,2BAAMprE,UAAU,SAASJ,EAAK,0BAC9B,2BAAMI,UAAU,aAAYqsE,EAAAA,GAAAA,IAAcH,OAG9C,0BAAKlsE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAUpb,KAAK,QAAQm+B,WAAS,EAAC5gC,QAASyrE,IACxC,2BAAM1rE,UAAU,SAASJ,EAAK,iBAC9B,2BAAMI,UAAU,aAAYqsE,EAAAA,GAAAA,IAAa,UAAC/rE,EAAK43C,oBAAN,QAAsB,KAGhE53C,EAAKq6B,UACJ,0BAAK36B,UAAU,gCACb,mBAACk+B,GAAA,EAAD,CACEC,SAAU79B,EAAKq6B,SAASixC,mBACxBrhD,MAAO3qB,EAAK,eACZuN,SAAUw+D,GACV5+D,UAAWw9D,MAKnB,0BAAKvqE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAUpb,KAAK,SAASmF,QAAM,EAAC2kB,aAAW,EAACvsB,QAASwpE,GACjD7pE,EAAK,iBAIZ,mBAAC68B,GAAA,EAAD,CACEjwB,QAAS2uB,EACTl7B,QAASsrE,GACTx+D,SAAU6mB,GACVxxB,UAAWxC,EAAK,SAEfg0B,GACC,mBAAC/iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,gBAGjB,mBAACyhB,GAAA,EAAD,CACE1f,OAAQynE,EACRjhE,QAASmhE,EACT7yD,WAAWrW,EAAAA,EAAAA,GACT2pE,IAAiB7pE,EAAK+pE,UAClBzqE,EAAK,2BACLA,EAAK,oCAAqCU,EAAK+f,OACnD,CAAC,KAAM,oBAETqB,aAAcyoD,IAAiB7pE,EAAK+pE,UAAYzqE,EAAK,cAAgBA,EAAK,qBAC1E+hB,eAAgByqD,GAChB5zC,sBAAoB,SCjB5B,IAAe73B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAGF,CAAE0B,MAFIpB,EAAAA,EAAAA,IAAWP,EAAQC,GAEjBwd,cAAezd,EAAOyd,kBAEvC,CAAC/c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mCANpCZ,EAjPsD,EACxEg5B,eAAAA,EACA40C,mBAAAA,EACAhsE,KAAAA,EACA8b,cAAAA,EACAmwD,8BAAAA,EACAhkE,QAAAA,EACAoT,SAAAA,MAEA,MAAO6wD,EAAaC,IAAkBnpE,EAAAA,EAAAA,IAA8B,KAC7DopE,EAAuBC,IAA4BrpE,EAAAA,EAAAA,KAAS,IAC5DswB,EAAW00C,IAAgBhlE,EAAAA,EAAAA,KAAS,GACrC1D,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMqkE,GAA0BjtE,EAAAA,EAAAA,KAAY,KAC1C+3B,EAAeuzC,EAAAA,GAAAA,qBACd,CAACvzC,IAEEm1C,GAA0BltE,EAAAA,EAAAA,KAAY,KAC1C+3B,EAAeuzC,EAAAA,GAAAA,8BACd,CAACvzC,IAEEo1C,GAA6BntE,EAAAA,EAAAA,KAAai0D,IAC9C0Y,EAAmB1Y,EAAO31C,OAAQ21C,EAAOmZ,mBAAqB3wD,GAC9Dsb,EAAeuzC,EAAAA,GAAAA,wBACd,CAAC7uD,EAAekwD,EAAoB50C,KAEvCn0B,EAAAA,EAAAA,KAAU,KACRkpE,GAAgBnsE,MAAAA,OAAD,EAACA,EAAMyrE,sBAAwB,IAC9CY,GAAyB,GACzBxmE,YAAW,KACTmiE,GAAa,KA1D0B,OA4DxC,CAAChoE,IAEJ,MAAM0sE,GAAyBrtE,EAAAA,EAAAA,KAAayE,IAC1C,MAAM,KAAE+X,GAAS/X,EAAEiJ,OAEnB,SAAS4/D,EAA0BhgE,GACjC,OAAOA,QAAQ9K,EAGjBsqE,GAAgBjhC,IAAD,IACVA,EACH,CAACrvB,GAAO8wD,EAA0BzhC,EAAErvB,OACvB,iBAATA,GAA2B,CAC7B8vD,SAAUgB,EAA0BzhC,EAAErvB,SAG1CwwD,GAAyB,KACxB,IAEGO,GAAwBvtE,EAAAA,EAAAA,KAAY,KACnCW,IAILgoE,GAAa,GACbiE,EAA8B,CAAE3tE,OAAQ0B,EAAKlD,GAAI+vE,aAAcX,OAC9D,CAAClsE,EAAMksE,EAAaD,IAEjBa,GAAoBvrE,EAAAA,EAAAA,KAAQ,IAC3BvB,GAASA,EAAKq6B,UAAar6B,EAAKq6B,SAAS0yC,cAIvC/sE,EAAKq6B,SAAS0yC,cAAc/uE,OAH1B,GAIR,CAACgC,IAEEgtE,GAAmBzrE,EAAAA,EAAAA,KAAQ,IAC1BvB,GAASA,EAAKq6B,UAAar6B,EAAKq6B,SAAS4yC,QAIvCjtE,EAAKq6B,SAAS4yC,QAAQhxD,QAAO,EAAG4wD,aAAAA,OAAqBA,IAHnD,IAIR,CAAC7sE,IAEEktE,GAAsB7tE,EAAAA,EAAAA,KAAai0D,IACvC,MAAM,aAAEuZ,GAAiBvZ,EACzB,IAAKuZ,IAAiB7sE,EACpB,OAGF,MAAM,oBAAEyrE,GAAwBzrE,EAEhC,OAAO1C,OAAOi4B,KAAKs3C,GAAcn1B,QAAO,CAACC,EAAQ93C,KAC/C,IACGgtE,EAAahtE,IACV4rE,MAAAA,GAAAA,EAAsB5rE,IACf,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAO83C,EAGT,MAAMw1B,EAvHZ,SAAqCttE,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,QACE,QAoGgButE,CAA4BvtE,GAE5C,IAAKstE,EACH,OAAOx1B,EAGT,MAAM01B,EAAmB/tE,EAAK6tE,GAE9B,MAAQ,GAAEx1B,IAAUA,EAAO35C,OAA6B,KAAIqvE,IAAxBA,MACnC,MACF,CAACrtE,EAAMV,IAEV,OACE,0BAAKI,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,yBAAIA,UAAU,kBAAkBO,IAAI,QAAQX,EAAK,6BAEjD,0BAAKI,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,eACLgiB,SAAUquC,EAAYoB,aACtBrjD,MAAO3qB,EAAK,wBACZiuE,UAAQ,EACR1gE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,YACLgiB,SAAUquC,EAAYsB,UACtBvjD,MAAO3qB,EAAK,6BACZiuE,UAAQ,EACR1gE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,eACLgiB,SAAUquC,EAAYR,eAAiBQ,EAAYP,SACnD1hD,MAAO3qB,EAAK,gCACZiuE,UAAQ,EACR1gE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,YACLgiB,SAAUquC,EAAYuB,UACtBxjD,MAAO3qB,EAAK,6BACZiuE,UAAQ,EACR1gE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAUquC,EAAYwB,WACtBzjD,MAAO3qB,EAAK,8BACZiuE,UAAQ,EACR1gE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,cACLgiB,SAAUquC,EAAYyB,YACtB1jD,MAAO3qB,EAAK,+BACZiuE,UAAQ,EACR1gE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,cACLgiB,SAAUquC,EAAY0B,YACtB3jD,MAAO3qB,EAAK,+BACZiuE,UAAQ,EACR1gE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAUquC,EAAY2B,WACtB5jD,MAAO3qB,EAAK,8BACZiuE,UAAQ,EACR1gE,SAAU6/D,MAKhB,0BAAKhtE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,cACLm+B,WAAS,EACTD,QAAM,EACN3gC,QAAS2sE,GAET,2BAAM5sE,UAAU,SAASJ,EAAK,wBAC9B,2BAAMI,UAAU,YAAYotE,KAIhC,0BAAKptE,UAAU,WACb,yBAAIA,UAAU,kBAAkBO,IAAI,QAAQX,EAAK,sBAEjD,mBAACke,GAAA,EAAD,CACEpb,KAAK,WACLzC,QAAS4sE,GAERjtE,EAAK,wBAGP0tE,EAAiBzvD,KAAK+1C,GACrB,mBAAC91C,GAAA,EAAD,CACE3d,IAAKyzD,EAAO31C,OACZje,UAAU,wCACVC,QAAS,IAAM6sE,EAA2BlZ,IAE1C,mBAAC71C,GAAA,EAAD,CACEE,OAAQ21C,EAAO31C,OACfD,OAAQwvD,EAAoB5Z,UAOtC,mBAACn3B,GAAA,EAAD,CACEjwB,QAASkgE,EACTzsE,QAASitE,EACT9qE,UAAWxC,EAAK,QAChBmN,SAAU6mB,GAETA,EACC,mBAAC/iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,qBCtNvB,IAAeW,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MACE2vB,OACEjQ,KAAMgQ,GAFJ,cAIJjS,GACEzd,EAEJ,MAAO,CAAE0vB,UAAAA,EAAWjS,cAAAA,MAEtB,CAAC/c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kBAAmB,sBAXvDZ,EApDoD,EACtE4B,KAAAA,EACA+tB,UAAAA,EACAjS,cAAAA,EACAra,OAAAA,EACAwG,QAAAA,EACA6lE,gBAAAA,EACAC,iBAAAA,MACI,MACJ,MAAMzuE,GAAOC,EAAAA,EAAAA,MACN0c,EAAQ0C,IAAa3b,EAAAA,EAAAA,IAAS,IAE/BgZ,GAAYtW,EAAAA,EAAAA,IAAyB,MAErCsoE,GAAUzsE,EAAAA,EAAAA,KAAQ,KAAM,MAK5B,QAJ0B,UAAAvB,EAAKq6B,gBAAL,eAAe4yC,UAAW,IAAIhxD,QAAQq3C,IACtDA,EAAO2a,UAAY3a,EAAO4a,SAAW5a,EAAO31C,SAAW7B,IAGzC47B,QAAiB,CAACqC,EAAKuZ,KAE1Cr3C,GACG8R,EAAUulC,EAAO31C,WAClBuB,EAAAA,GAAAA,IAAY6S,EAAAA,EAAAA,IAAgBhE,EAAUulC,EAAO31C,UAAY,GAAI1B,IAEhE89B,EAAI90B,KAAKquC,EAAO31C,QAGXo8B,IACN,MACF,WAAC/5C,EAAKq6B,gBAAN,aAAC,EAAe4yC,QAASnxD,EAAeG,EAAQ8R,IAE7CqsB,GAAmB/6C,EAAAA,EAAAA,KAAase,IACpCowD,EAAiB,CAAEzvE,OAAQ0B,EAAKlD,GAAI6gB,OAAAA,IACpC1V,MACC,CAACjI,EAAKlD,GAAIixE,EAAkB9lE,IAE/B,OACE,mBAAC,GAAD,CACExG,OAAQA,EACRsa,cAAeiyD,EACfhyD,UAAWA,EACXE,kBAAmB5c,EAAK,oBACxB2c,OAAQA,EACRE,eAAgBwC,EAChBvC,SAAU0xD,EACVzxD,mBAAoB+9B,EACpBnyC,QAASA,QCmDf,IAAe5H,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxByf,KAAMgQ,GAAc1vB,EAAO2vB,MAGnC,MAAO,CAAEhuB,KAAAA,EAAM+tB,UAAAA,EAAWogD,iBAFDnuE,KAASgqE,EAAAA,EAAAA,IAAiBhqE,EAAM,aAAeA,EAAK+pE,eAI/E,CAAChrE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kCARpCZ,EA5FuD,EACzE4B,KAAAA,EACA+tB,UAAAA,EACAogD,iBAAAA,EACAC,6BAAAA,EACAnmE,QAAAA,EACAoT,SAAAA,MAEA,MAAM/b,GAAOC,EAAAA,EAAAA,MACN8uE,EAAuBC,EAAqBC,IAAwBhrD,EAAAA,GAAAA,MAE3E/H,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMumE,GAAiBjtE,EAAAA,EAAAA,KAAQ,IACxBvB,GAASA,EAAKq6B,UAAar6B,EAAKq6B,SAAS0yC,cAIvC/sE,EAAKq6B,SAAS0yC,cAHZ,IAIR,CAAC/sE,IAEEyuE,GAAepvE,EAAAA,EAAAA,KAAai0D,IAChC,IAAKA,EAAOob,eACV,OAGF,MAAMC,EAAe5gD,EAAUulC,EAAOob,gBACtC,OAAKC,EAIErvE,EAAK,iBAAiByyB,EAAAA,EAAAA,IAAgB48C,SAJ7C,IAKC,CAACrvE,EAAMyuB,IAEJ6gD,GAAoBvvE,EAAAA,EAAAA,KAAai0D,IACrC,GAAKtzD,EAIL,MAAO,CAAC,CACN+f,MAAOzgB,EAAK,WACZ8C,KAAM,SACN8pB,aAAa,EACbktB,QAAS,IAAMg1B,EAA6B,CAC1C9vE,OAAQ0B,EAAKlD,GACb6gB,OAAQ21C,EAAO31C,OACfkvD,aAAc,SAGjB,CAACvtE,EAAMU,EAAMouE,IAEhB,OACE,0BAAK1uE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjD,wBAAGnC,UAAU,cAAcJ,EAAK,oBAE/BkvE,EAAejxD,KAAK+1C,GACnB,mBAAC91C,GAAA,EAAD,CACE3d,IAAKyzD,EAAO31C,OACZje,UAAU,sBACV6H,QAAM,EACN2lB,eAAgB0hD,EAAkBtb,IAElC,mBAAC71C,GAAA,EAAD,CACEE,OAAQ21C,EAAO31C,OACfD,OAAQ+wD,EAAanb,QAI1B6a,GACC,mBAAChyC,GAAA,EAAD,CACEjwB,SAAO,EACPvM,QAAS2uE,EACTxsE,UAAWxC,EAAK,0CAEhB,wBAAGI,UAAU,0BAGhBM,GAAQmuE,GACP,mBAAC,GAAD,CACEnuE,KAAMA,EACNyB,OAAQ4sE,EACRpmE,QAASsmE,WCvEjBM,GAAsB,+BAiN5B,IAAexuE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,SAAEmE,GAAapE,EAAOwqE,WAG5B,MAAO,CACL7oE,KAAAA,EACAyC,SAAAA,EACAqsE,kBALwBjmE,QAAQ7I,MAAAA,OAAD,EAACA,EAAM8uE,mBAMtChF,eAAeE,EAAAA,EAAAA,IAAiBhqE,EAAM,kBAG1C,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,mBAAoB,aAAc,kBAAmB,eAAgB,gBAAiB,cAdtEZ,EA/M6C,EAC/DE,OAAAA,EACA0B,KAAAA,EACAyC,SAAAA,EACAqsE,kBAAAA,EACAhF,cAAAA,EACA1yC,eAAAA,EACA+yC,WAAAA,EACA4E,iBAAAA,EACA9F,gBAAAA,EACAoB,aAAAA,EACAC,cAAAA,EACAh8C,SAAAA,EACArmB,QAAAA,EACAoT,SAAAA,MACI,YACJ,MAAMkvD,EAAevqE,GAAQA,EAAK+f,OAAe,GAC3CyqD,EAAexqE,MAAAA,GAAAA,EAAMq6B,UAAYr6B,EAAKq6B,SAAS6nB,OAAe,GAC9D8K,EAAgBhtD,MAAAA,GAAH,UAAGA,EAAMq6B,gBAAT,aAAG,EAAgB4yB,cAE/Bic,EAAoBC,EAAkBC,IAAqB7lD,EAAAA,GAAAA,MAC3DsX,EAAwBC,IAA6B93B,EAAAA,EAAAA,KAAS,IAC9D+c,EAAOkiC,IAAYj/C,EAAAA,EAAAA,IAASunE,IAC5BroB,EAAOC,IAAYn/C,EAAAA,EAAAA,IAASwnE,IAC5Bv4D,EAAO+oB,IAAYh4B,EAAAA,EAAAA,OACnBsc,EAAOyb,IAAY/3B,EAAAA,EAAAA,MACpBynE,EAAYzqE,IAAQmU,EAAAA,EAAAA,IAAkBnU,GACtCo7B,GAAuB/mB,EAAAA,EAAAA,GAASo2D,GAAW,EAAOn2D,EAAAA,GAAAA,SAClDhV,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,IAEzBhF,EAAAA,EAAAA,KAAU,KACJR,IAAa8mE,EAAAA,GAAAA,WACfzuC,GAA0B,GAC1BC,OAASl5B,MAEV,CAACY,IAEJ,MAAMmpE,GAAe5rE,MAAAA,GAAD,UAACA,EAAMq6B,gBAAP,iBAAC,EAAgBwxC,oBAAjB,aAAC,EAA8B7tE,SAAW,EAExD0sE,GAAsBrrE,EAAAA,EAAAA,KAAY,KACtC+3B,EAAeuzC,EAAAA,GAAAA,mBACd,CAACvzC,IAEEwzC,GAAwBvrE,EAAAA,EAAAA,KAAY,KACxC+3B,EAAeuzC,EAAAA,GAAAA,cACd,CAACvzC,IAEE0zC,GAA4BzrE,EAAAA,EAAAA,KAAY,KAC5C+3B,EAAeuzC,EAAAA,GAAAA,sBACd,CAACvzC,IAEE2zC,GAAiB1rE,EAAAA,EAAAA,KAAaw2D,IAClC76B,EAAS66B,GACT/6B,GAA0B,KACzB,IAEG0nB,GAAoBnjD,EAAAA,EAAAA,KAAayE,IACrCm+C,EAASn+C,EAAEiJ,OAAOJ,OAClBmuB,GAA0B,KACzB,IAEGkwC,GAAoB3rE,EAAAA,EAAAA,KAAayE,IACrCq+C,EAASr+C,EAAEiJ,OAAOJ,OAClBmuB,GAA0B,KACzB,IAEGk0C,GAAsB3vE,EAAAA,EAAAA,KAAY,KACtC,MAAM6rE,EAAenrD,EAAM0Z,OACrB0xC,EAAejpB,EAAMzoB,OAEtByxC,EAAaltE,OAKlBmsE,EAAW,CACT7rE,OAAAA,EACAyhB,MAAOmrD,EACPhpB,MAAOipB,EACPl5D,MAAAA,IARA8oB,EAAS8zC,MAUV,CAAC3sB,EAAO5jD,EAAQ2T,EAAO8N,EAAOoqD,IAE3B8E,GAAyB5vE,EAAAA,EAAAA,KAAY,KACzC0vE,EAAiB,CAAEzwE,OAAAA,EAAQitE,WAAYuD,MACtC,CAACxwE,EAAQwwE,EAAmBC,IAEzBG,IAAyB7vE,EAAAA,EAAAA,KAAY,KACzC+3B,EAAeuzC,EAAAA,GAAAA,sBACd,CAACvzC,IAEE+3C,IAAsB9vE,EAAAA,EAAAA,KAAY,KAClCW,EAAK+pE,UACPO,EAAc,CAAEhsE,OAAQ0B,EAAKlD,KAE7ButE,EAAa,CAAE/rE,OAAQ0B,EAAKlD,KAG9BssE,IACAH,IACA36C,EAAS,CAAExxB,QAAI+E,MACd,CAAC7B,EAAK+pE,UAAW/pE,EAAKlD,GAAIssE,EAAmBH,EAAiBoB,EAAcC,EAAeh8C,IAE9F,GAAItuB,EAAK2sD,aACP,OAGF,MAAMr5B,GAAY7wB,IAAa8mE,EAAAA,GAAAA,WAE/B,OACE,0BAAK7pE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACu8B,GAAA,EAAD,CACEb,qBAAsBA,EACtBvuB,SAAUk+D,EACVt+D,UAAWq9D,IAEb,mBAAChtD,GAAA,EAAD,CACEhgB,GAAG,gBACHmtB,MAAO3qB,EAAK,oBACZuN,SAAU21C,EACV71C,MAAOoT,EACPT,MAAOA,IAAUuvD,GAAsBvvD,OAAQzd,EAC/C4K,UAAWq9D,IAEb,mBAAChtD,GAAA,EAAD,CACEhgB,GAAG,gBACH4C,UAAU,OACVuqB,MAAO3qB,EAAK,0BACZuN,SAAUm+D,EACVr+D,MAAOu1C,EACPz1C,UAAWq9D,IAEZ9pE,EAAK+pE,WACJ,mBAACvsD,GAAA,EAAD,CAAUpb,KAAK,OAAOm+B,WAAS,EAAC5gC,QAAS+qE,GACvC,2BAAMhrE,UAAU,SAASJ,EAAK,gBAC9B,2BAAMI,UAAU,YAAYM,EAAKgyB,SAAW1yB,EAAK,cAAgBA,EAAK,iBAG1E,mBAACke,GAAA,EAAD,CACEpb,KAAK,UACLm+B,WAAS,EACT5gC,QAASirE,EACTn+D,UAAWq9D,GAEX,2BAAMpqE,UAAU,SAASJ,EAAK,eAC9B,2BAAMI,UAAU,YAA4BJ,EAAhB0tD,EAAqB,mBAA2B,SAE9E,mBAACxvC,GAAA,EAAD,CACEpb,KAAK,QACLm+B,WAAS,EACT5gC,QAASmrE,GAET,2BAAMprE,UAAU,SAASJ,EAAK,0BAC9B,2BAAMI,UAAU,YAAYksE,IAE9B,0BAAKlsE,UAAU,gCACb,mBAACk+B,GAAA,EAAD,CACEC,QAASixC,EACT7kD,MAAO3qB,EAAK,uBACZuN,SAAUoiE,MAIhB,0BAAKvvE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,QACLm+B,WAAS,EACT5gC,QAASuvE,IAET,2BAAMxvE,UAAU,QAAQO,IAAI,QAAQX,EAAK,uBACzC,2BAAMI,UAAU,WAAWO,IAAI,QAAQX,EAAK,cAAD,UAAgBU,EAAK43C,oBAArB,QAAqC,EAAG,QAGvF,0BAAKl4C,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAUpb,KAAK,SAASmF,QAAM,EAAC2kB,aAAW,EAACvsB,QAASwpE,GACjDnpE,EAAK+pE,UAAYzqE,EAAK,iBAAmBA,EAAK,mBAIrD,mBAAC68B,GAAA,EAAD,CACEjwB,QAAS2uB,EACTl7B,QAASqvE,EACTviE,SAAU6mB,GACVxxB,UAAWxC,EAAK,SAEfg0B,GACC,mBAAC/iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,gBAGjB,mBAACyhB,GAAA,EAAD,CACE1f,OAAQynE,EACRjhE,QAASmhE,EACTzmE,KAAM3C,EAAK+pE,UAAYzqE,EAAK,sBAAwBA,EAAK,qBACzD8hB,aAAcphB,EAAK+pE,UAAYzqE,EAAK,iBAAmBA,EAAK,gBAC5D+hB,eAAgB8tD,GAChBj3C,sBAAoB,S,aC7M5B,MA4HA,IAAe73B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,oBAAE06B,IAAwBo2C,EAAAA,EAAAA,IAAiB/wE,EAAQC,GAEzD,MAAO,CACL0B,KAAAA,EACAigB,WAAWqI,EAAAA,EAAAA,IAActoB,GACzByC,SAAUpE,EAAOwqE,WAAWpmE,SAC5Bu2B,oBAAAA,MAGJ,CAACj6B,EAAWC,KAAYC,EAAAA,EAAAA,IAAKD,EAAS,CACpC,kBAAmB,mBAAoB,uBAbvBZ,EA5HqD,EACvE4B,KAAAA,EACAiI,QAAAA,EACAoT,SAAAA,EACA4E,UAAAA,EACAxd,SAAAA,EACAu2B,oBAAAA,EACAq2C,gBAAAA,EACAC,iBAAAA,EACAC,kBAAAA,MACI,MACJ,MAAM1V,EAAWhxD,QAAQ7I,EAAKgyB,UACxBw9C,EAAW,UAAGxvE,EAAKq6B,gBAAR,aAAG,EAAeo1C,YAE5BC,EAAaC,IAAkB3sE,EAAAA,EAAAA,IAAsB62D,EAAW,SAAW,YAC3E7nC,EAAUkH,IAAel2B,EAAAA,EAAAA,OACzB4sE,EAA2BC,EAAyBC,IAA4BvsD,EAAAA,GAAAA,KAEjFwsD,EAAYlnE,QACC,WAAhB6mE,GAA4B19C,GAAYgH,GACrB,YAAhB02C,GAA6B7V,IAGnCr+C,EAAAA,EAAAA,IAAeH,EAAUpT,IAEzBhF,EAAAA,EAAAA,KAAU,KACJysE,IAAgBF,GAClBD,MAED,CAACG,EAAaF,EAAaD,IAE9B,MAAMS,GAAqB3wE,EAAAA,EAAAA,KAAasN,IACtCgjE,EAAehjE,KACd,IAEGsjE,GAAa5wE,EAAAA,EAAAA,KAAY,KAC7BiwE,EAAiB,CAAEt9C,SAA0B,WAAhB09C,EAA2B19C,EAAW,OAClE,CAAC09C,EAAaJ,EAAkBt9C,IAE7Bk+C,GAA0B7wE,EAAAA,EAAAA,KAAY,KAC1CywE,IACAP,MACC,CAACO,EAA0BP,IAExBjwE,GAAOC,EAAAA,EAAAA,KACP4wE,EAAclwD,EAAY,UAAY,OACtCmwD,EAAcnwD,EAAY,UAAY,QAEtCkK,EAAU,CACd,CAAExd,MAAO,UAAWsd,MAAO3qB,EAAM,GAAE6wE,YAAuB3nC,SAAUlpC,EAAM,GAAE6wE,iBAC5E,CAAExjE,MAAO,SAAUsd,MAAO3qB,EAAM,GAAE6wE,WAAsB3nC,SAAUlpC,EAAM,GAAE6wE,iBAGtE78C,EAAY7wB,IAAa8mE,EAAAA,GAAAA,WAE/B,OACE,0BAAK7pE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjD,yBAAInC,UAAU,mBAAmBJ,EAAM,GAAE8wE,UACzC,mBAAClmD,GAAA,EAAD,CACEE,SAAUslD,EACV7zD,KAAK,eACLsO,QAASA,EACTtd,SAAUmjE,KAGG,YAAhBN,EACC,0BAAKhwE,UAAU,UAAUO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChD2tE,EACC,sCACE,mBAACa,GAAA,EAAD,CAAU1oE,IAAK6nE,EAAa9vE,UAAU,aAAaiD,KAAM6sE,IACzD,wBAAG9vE,UAAU,eAAeO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACnDvC,EAAM,GAAE6wE,qBAGX,mBAAC3yD,GAAA,EAAD,CAAUpb,KAAK,SAASmF,QAAM,EAAC2kB,aAAW,EAACvsB,QAASkwE,GACjDvwE,EAAK,eAER,mBAAC6hB,GAAA,EAAD,CACE1f,OAAQmuE,EACR3nE,QAAS6nE,EACTntE,KAAMrD,EAAK,eACX8hB,aAAc9hB,EAAK,gBACnB+hB,eAAgB6uD,EAChBh4C,sBAAoB,KAIxB,mBAACra,GAAA,EAAD,OAIJ,0BAAKne,UAAU,qBACb,mBAACw8B,GAAD,CACEnD,QAAM,EACND,gBAAiB94B,EAAKgyB,SACtBsB,UAAWA,EACX0F,oBAAqBA,EACrBC,cAAeo2C,EACfxiE,SAAUqsB,IAEZ,wBAAGx5B,UAAU,eAAeO,IAAI,QAC7BX,EAAM,GAAE8wE,sCAKjB,mBAACj0C,GAAA,EAAD,CACEjwB,QAAS6jE,EACTtjE,SAAU6mB,EACVxxB,UAAWxC,EAAK,QAChBK,QAASswE,GAER38C,EACC,mBAAC/iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,qBCkGvB,IAAeW,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,iBAAEgyE,EAAkBvyD,KAAMu8B,GAAej8C,EAAOyf,MAKtD,MAAO,CACL9d,KAAAA,EACAs6C,WAAAA,EACAg2B,iBAAAA,EACAC,WARiBvwE,MAAAA,GAAA,UAAAA,EAAMq6B,gBAAN,SAAgB4yB,cAC/BruD,EAAAA,EAAAA,IAAWP,EAAQ2B,EAAKq6B,SAAS4yB,mBACjCprD,EAOFoe,UAAWjgB,IAAQsoB,EAAAA,EAAAA,IAActoB,OAGrC,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,0BAA2B,sBAAuB,2BAjBlCZ,EAxNgD,EAClE4B,KAAAA,EACAiI,QAAAA,EACAoT,SAAAA,EACA/c,OAAAA,EACAg8C,WAAAA,EACAi2B,WAAAA,EACAD,iBAAAA,EACArwD,UAAAA,EACAmX,eAAAA,EACAo5C,wBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,MAEA,MAAOC,EAAeC,IAAoB5tE,EAAAA,EAAAA,OACnCi8B,EAAeC,IAAoBl8B,EAAAA,EAAAA,OACnCm8B,EAAmBC,IAAwBp8B,EAAAA,EAAAA,KAAS,GACrDq8B,GAAsBhgC,EAAAA,EAAAA,KAAY,IAAM+/B,GAAqB,IAAO,KACnEyxC,EAAgCC,EAA8BC,IAAiCxtD,EAAAA,GAAAA,MAC/FytD,EAA8BC,EAA4BC,IAA+B3tD,EAAAA,GAAAA,KAC1FjkB,GAAOC,EAAAA,EAAAA,KACP0tD,EAAesjB,MAAAA,OAAH,EAAGA,EAAYzzE,IAEjC0e,EAAAA,EAAAA,IAAeH,EAAUpT,IAEzBhF,EAAAA,EAAAA,KAAU,KACRutE,MACC,CAACA,KAEJvtE,EAAAA,EAAAA,KAAU,KACHg8B,IACHK,EAAAA,GAAAA,GAAiB,oBAAoBC,KAAKL,KAE3C,CAACD,IAEJ,MAAMkyC,GAA4B9xE,EAAAA,EAAAA,KAAY,KAC5C0xE,IACAL,EAAsB,CAAEU,UAAWnxD,EAAY3hB,EAAS2uD,IACnDhtC,GACHmX,EAAeuzC,EAAAA,GAAAA,WAEhB,CAACoG,EAA+BL,EAAuBzwD,EAAW3hB,EAAQ2uD,EAAc71B,IAErFi6C,GAA0BhyE,EAAAA,EAAAA,KAAY,KAC1C6xE,IACAT,EAAoB,CAAEW,UAAW9yE,EAAQA,OAAQqyE,MAChD,CAACO,EAA6BT,EAAqBnyE,EAAQqyE,IAkJ9D,OACE,0BAAKjxE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,0BAAKA,UAAU,gBACZu/B,GACC,mBAACc,GAAA,EAAD,CACEjjC,GAAG,wBACHgD,KAAMwxE,EAAAA,GACNryC,cAAeA,EACfgB,KAAMd,EACNe,QAAM,EACNC,OAAQd,KAIbkxC,GA3FL,8BACE,mBAAC/yD,GAAA,EAAD,CACE9d,UAAU,sBACVwjC,UAAQ,GAER,mBAACtlB,GAAA,EAAD,CAAetf,OAAQiyE,EAAYzzE,MAErC,mBAAC0gB,GAAA,EAAD,CACEpb,KAAK,SACLmF,QAAM,EACN2kB,aAAW,EACXvsB,QAASmxE,GAERxxE,EAAK2gB,EAAY,wBAA0B,4BAE9C,mBAACkB,GAAA,EAAD,CACE1f,OAAQovE,EACR5oE,QAAS8oE,EACT7zD,OAhFJ,0BAAKxd,UAAU,gBACb,mBAACE,EAAA,EAAD,CACEE,KAAK,OACLE,KAAMuwE,IAER,0BAAK7wE,UAAU,eACZJ,EAAK2gB,EAAY,wBAA0B,6BA2E5C1J,WAAWrW,EAAAA,EAAAA,GACTZ,EAAK2gB,EAAY,+BAAiC,6BAA8BswD,EAAYxwD,OAC5F,CAAC,KAAM,oBAETqB,aAAc9hB,EAAK2gB,EAAY,wBAA0B,2BACzDoB,eAAgB8vD,EAChBj5C,sBAAoB,MAmElBq4C,GA3DN,8BACE,wBAAG7wE,UAAU,eAAeO,IAAI,QAAQX,EAAK,0BAE7C,0BAAKiyE,eAAa,GAChB,mBAAC/zD,GAAA,EAAD,CACE3d,IAAI,eACJuC,KAAK,QACLmF,QAAM,EACNiqE,cAAe,EACf9xE,UAAU,mBAETJ,EAAK,0BAEPgxE,EACCA,EAAiB/yD,KAAI,CAACzgB,EAAIkoB,IACxB,mBAACxH,GAAA,EAAD,CACE3d,IAAK/C,EACL00E,cAAexsD,EAAI,EACnBtlB,UAAU,kCACVC,QAAS,KAxHrBixE,EAwH+C9zE,GAvH/Cm0E,MAyHY,mBAACrzD,GAAA,EAAD,CAAetf,OAAQxB,OAI3B,mBAAC61B,GAAA,EAAD,CAAc9yB,IAAI,gBAAgB2xE,cAAe,EAAG7uE,KAAK,gCAG7D,wBAAGjD,UAAU,yBAAyBO,IAAI,QAAQX,EAAK,2BACvD,mBAAC6hB,GAAA,EAAD,CACE1f,OAAQuvE,EACR/oE,QAASipE,EACTh0D,OApHR,WACE,MAAMu0D,EAAcn3B,EAAWq2B,GAE/B,GAAKc,EAIL,OACE,0BAAK/xE,UAAU,gBACb,mBAACE,EAAA,EAAD,CACEE,KAAK,OACLE,KAAMyxE,IAER,0BAAK/xE,UAAU,eACZJ,EAAK,uCAsGEoyE,GACRn7D,UAjGR,WACE,MAAMk7D,EAAcn3B,EAAWq2B,GAE/B,GAAKc,EAIL,OAAIA,EAAYE,gBACPzxE,EAAAA,EAAAA,GACJ,yBAAwBuxE,EAAY1xD,sCAAsC/f,EAAM+f,WACjF,CAAC,KAAM,qBAQJ7f,EAAAA,EAAAA,GAEJ,yBAAwBuxE,EAAY1xD,sCAAsC/f,EAAM+f,kFACjF,CAAC,KAAM,oBA4EQ6xD,GACXxwD,aAAc9hB,EAAK,uBACnB+hB,eAAgBgwD,EAChBQ,mBAAiB,YCgC3B,IAAexxE,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,EAAQwzE,wBAAAA,MACjB,MAAM9xE,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAGhC,MAAO,CAAE0B,KAAAA,EAAM+xE,sBAFe/xE,EAAK+pE,WAAa+H,OAIlD,CAAC/yE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kCAPpCZ,EA/N0D,EAC5E4B,KAAAA,EACAgyE,qBAAAA,EACA56C,eAAAA,EACAg3C,6BAAAA,EACA2D,oBAAAA,EACA9pE,QAAAA,EACAoT,SAAAA,MAEA,MAAO6wD,EAAaC,IAAkBnpE,EAAAA,EAAAA,IAA8B,KAC7DopE,EAAuBC,IAA4BrpE,EAAAA,EAAAA,KAAS,IAC5DswB,EAAW00C,IAAgBhlE,EAAAA,EAAAA,KAAS,IACpCivE,EAA6BC,EAA2BC,IAA8B5uD,EAAAA,GAAAA,KACvFjkB,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMmqE,GAAqB7wE,EAAAA,EAAAA,KAAQ,KACjC,GAAKvB,GAASA,EAAKq6B,UAAar6B,EAAKq6B,SAAS4yC,QAI9C,OAAOjtE,EAAKq6B,SAAS4yC,QAAQ5oC,MAAK,EAAG1mB,OAAAA,KAAaA,IAAWq0D,MAC5D,CAAChyE,EAAMgyE,KAEV/uE,EAAAA,EAAAA,KAAU,KACJjD,MAAAA,GAAAA,EAAMq6B,UAAY23C,IAAyBI,GAC7Ch7C,EAAeuzC,EAAAA,GAAAA,oBAEhB,CAAC3qE,EAAMo3B,EAAgBg7C,EAAoBJ,KAE9C/uE,EAAAA,EAAAA,KAAU,KACRkpE,GAAgBiG,MAAAA,OAAD,EAACA,EAAoBvF,gBAAkB7sE,MAAAA,OAAvC,EAAuCA,EAAMyrE,sBAAwB,IACpFY,GAAyB,GACzBrE,GAAa,KACZ,CAAChoE,EAAMoyE,IAEV,MAAM1F,GAAyBrtE,EAAAA,EAAAA,KAAayE,IAC1C,MAAM,KAAE+X,GAAS/X,EAAEiJ,OAEnB,SAAS4/D,EAA0BhgE,GACjC,OAAOA,QAAQ9K,EAGjBsqE,GAAgBjhC,IAAD,IACVA,EACH,CAACrvB,GAAO8wD,EAA0BzhC,EAAErvB,OACvB,iBAATA,GAA2B,CAC7B8vD,SAAUgB,EAA0BzhC,EAAErvB,SAG1CwwD,GAAyB,KACxB,IAEGO,GAAwBvtE,EAAAA,EAAAA,KAAY,KACnCW,GAASgyE,IAIdhK,GAAa,GACboG,EAA6B,CAC3B9vE,OAAQ0B,EAAKlD,GACb6gB,OAAQq0D,EACRnF,aAAcX,OAEf,CAAClsE,EAAMgyE,EAAsB9F,EAAakC,IAEvCiE,GAAqBhzE,EAAAA,EAAAA,KAAY,KAChCW,GAASgyE,GAId5D,EAA6B,CAC3B9vE,OAAQ0B,EAAKlD,GACb6gB,OAAQq0D,EACRnF,aAAc,CACZyF,cAAc,OAGjB,CAACtyE,EAAMgyE,EAAsB5D,IAE1BmE,GAAuBlzE,EAAAA,EAAAA,KAAaQ,KACpCkyE,MAIC/xE,IAASA,EAAKyrE,sBAIZzrE,EAAKyrE,oBAAoB5rE,IAC/B,CAACG,EAAM+xE,IAEV,GAAKK,EAIL,OACE,0BAAK1yE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAU0lB,UAAQ,EAACxjC,UAAU,uBAC3B,mBAAC+d,GAAA,EAAD,CAAiBE,OAAQy0D,EAAmBz0D,UAG9C,yBAAIje,UAAU,uBAAuBO,IAAI,QAAQX,EAAK,0BAEtD,0BAAKI,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,eACLgiB,SAAUquC,EAAYoB,aACtBrjD,MAAO3qB,EAAK,wBACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,gBAC/B1lE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,YACLgiB,SAAUquC,EAAYsB,UACtBvjD,MAAO3qB,EAAK,6BACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,aAC/B1lE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,eACLgiB,SAAUquC,EAAYR,eAAiBQ,EAAYP,SACnD1hD,MAAO3qB,EAAK,gCACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,gBAC/B1lE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,YACLgiB,SAAUquC,EAAYuB,UACtBxjD,MAAO3qB,EAAK,6BACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,aAC/B1lE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAUquC,EAAYwB,WACtBzjD,MAAO3qB,EAAK,8BACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,cAC/B1lE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,cACLgiB,SAAUquC,EAAYyB,YACtB1jD,MAAO3qB,EAAK,+BACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,eAC/B1lE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,cACLgiB,SAAUquC,EAAY0B,YACtB3jD,MAAO3qB,EAAK,+BACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,eAC/B1lE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAUquC,EAAY2B,WACtB5jD,MAAO3qB,EAAK,8BACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,cAC/B1lE,SAAU6/D,OAKdqF,GACA,0BAAKryE,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAUpb,KAAK,cAAcmF,QAAM,EAAC2kB,aAAW,EAACvsB,QAASuyE,GACtD5yE,EAAK,4BAMd,mBAAC68B,GAAA,EAAD,CACEjwB,QAASkgE,EACTzsE,QAASitE,EACT9qE,UAAWxC,EAAK,QAChBmN,SAAU6mB,GAETA,EACC,mBAAC/iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,gBAIjB,mBAACyhB,GAAA,EAAD,CACE1f,OAAQwwE,EACRhqE,QAASkqE,EACTxvE,KAAK,oEACLye,aAAa,SACbC,eAAgBgxD,EAChBn6C,sBAAoB,SCnI5B,IAAe73B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxByf,KAAMgQ,GAAc1vB,EAAO2vB,MAEnC,MAAO,CACLhuB,KAAAA,EACA8b,cAAezd,EAAOyd,cACtBmE,WAAWqI,EAAAA,EAAAA,IAActoB,GACzB+tB,UAAAA,KATc3vB,EA7FwC,EAC1D4B,KAAAA,EACAigB,UAAAA,EACAnE,cAAAA,EACAiS,UAAAA,EACAqJ,eAAAA,EACA40C,mBAAAA,EACA/jE,QAAAA,EACAoT,SAAAA,MAEA,MAAM/b,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAMzB,MAAM4jE,GAAetqE,EAAAA,EAAAA,KAAQ,IACtBvB,EAAKq6B,UAAar6B,EAAKq6B,SAASwxC,aAI9B7rE,EAAKq6B,SAASwxC,aAAa15C,MAAK,CAACC,EAAGC,IACrCD,EAAE87C,SACI,EACC77C,EAAE67C,QACJ,EAGF,IAVA,IAYR,CAACluE,IAEEwyE,GAAyBnzE,EAAAA,EAAAA,KAAai0D,IAC1C0Y,EAAmB1Y,EAAO31C,OAAQ21C,EAAOmZ,mBAAqB3wD,GAC9Dsb,EAAeuzC,EAAAA,GAAAA,mBACd,CAAC7uD,EAAekwD,EAAoB50C,IAEjCq7C,GAAkBpzE,EAAAA,EAAAA,KAAai0D,IACnC,GAAIA,EAAO4a,QACT,OAAO5uE,EAAK,kBAGd,MAAMozE,EAAiBpf,EAAOmZ,iBAAmB1+C,EAAUulC,EAAOmZ,uBAAoB5qE,EAEtF,OAAI6wE,EACKpzE,EAAK,uBAAuByyB,EAAAA,EAAAA,IAAgB2gD,IAG9CpzE,EAAK,kBACX,CAACA,EAAMyuB,IAEV,OACE,0BAAKruB,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC8d,GAAA,EAAD,CACEpb,KAAK,SACLm+B,WAAS,EACT5gC,QA9CV,WACEy3B,EAAeuzC,EAAAA,GAAAA,sBA+CP,2BAAMjrE,UAAU,SAASJ,EAAK,aAC9B,2BAAMI,UAAU,YAAYJ,EAAK2gB,EAAY,4BAA8B,yBAI/E,0BAAKvgB,UAAU,UAAUO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjD,wBAAGnC,UAAU,aAAaO,IAAI,QAC3BggB,EACG,8DACA,6DAGL4rD,EAAatuD,KAAK+1C,GACjB,mBAAC91C,GAAA,EAAD,CACE3d,IAAKyzD,EAAO31C,OACZje,UAAU,sBACVC,QAAS,IAAM6yE,EAAuBlf,IAEtC,mBAAC71C,GAAA,EAAD,CACEE,OAAQ21C,EAAO31C,OACfD,OAAQ+0D,EAAgBnf,GACxB/6B,eAAa,cCoC7B,IAAel4B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAGF,CAAE0B,MAFIpB,EAAAA,EAAAA,IAAWP,EAAQC,MAFhBF,EA9HwC,EAAG4B,KAAAA,EAAMiI,QAAAA,EAASoT,SAAAA,MAC5E,MAAM/b,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAM4jE,GAAetqE,EAAAA,EAAAA,KAAQ,IACtBvB,GAASA,EAAKq6B,UAAar6B,EAAKq6B,SAASwxC,aAIvC7rE,EAAKq6B,SAASwxC,aAAa15C,MAAK,CAACC,EAAGC,IACrCD,EAAE87C,SACI,EACC77C,EAAE67C,QACJ,EAGF,IAVA,IAYR,CAACluE,IAEEyyE,GAAkBpzE,EAAAA,EAAAA,KAAai0D,GAC/BA,EAAO4a,QACF5uE,EAAK,kBAGPA,EAAK,iBACX,CAACA,IAEJ,OACE,0BAAKI,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,0BAA0BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjE,yBAAInC,UAAU,kBAAkBO,IAAI,QAApC,WAEA,0BAAKP,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAS,EACT5T,MAAO3qB,EAAK,qBACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAS,EACT5T,MAAO3qB,EAAK,2BACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAS,EACT5T,MAAO3qB,EAAK,4BACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAS,EACT5T,MAAO3qB,EAAK,6BACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAS,EACT5T,MAAO3qB,EAAK,iCACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAS,EACT5T,MAAO3qB,EAAK,gCACZuN,cAAUhL,KAGd,0BAAKnC,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAS,EACT5T,MAAO3qB,EAAK,gCACZuN,cAAUhL,MAKhB,0BAAKnC,UAAU,0BAA0BO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GACjE,yBAAInC,UAAU,kBAAkBO,IAAI,QAAQX,EAAK,6BAEjD,0BAAKI,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,SAAS,EACT5T,MAAO3qB,EAAK,qBACZuN,cAAUhL,KAIbgqE,EAAatuD,KAAK+1C,GACjB,mBAAC91C,GAAA,EAAD,CACE3d,IAAKyzD,EAAO31C,OACZje,UAAU,uCACVC,aAASkC,EACT0F,QAAM,GAEN,mBAACq2B,GAAA,EAAD,CAAU3T,MAAM,GAAG4T,SAAS,IAC5B,mBAACpgB,GAAA,EAAD,CACEE,OAAQ21C,EAAO31C,OACfD,OAAQ+0D,EAAgBnf,GACxB/6B,eAAa,cC6M7B,IAAel4B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,EAAQwzE,wBAAAA,MACjB,MAAM9xE,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxByf,KAAMgQ,GAAc1vB,EAAO2vB,OAC7B,cAAElS,GAAkBzd,EAI1B,MAAO,CACL2B,KAAAA,EACA+tB,UAAAA,EACAjS,cAAAA,EACAmE,WAPgBqI,EAAAA,EAAAA,IAActoB,GAQ9B+xE,sBAP4B/xE,EAAK+pE,WAAa+H,OAUlD,CAAC/yE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,qBAhBpCZ,EA5SsD,EACxE4zE,qBAAAA,EACA56C,eAAAA,EACAp3B,KAAAA,EACA+tB,UAAAA,EACAjS,cAAAA,EACAmE,UAAAA,EACA8xD,oBAAAA,EACAY,gBAAAA,EACA1qE,QAAAA,EACAoT,SAAAA,MAEA,MAAO6wD,EAAaC,IAAkBnpE,EAAAA,EAAAA,IAA6B,KAC5DqgC,EAAWuvC,IAAgB5vE,EAAAA,EAAAA,KAAS,IACpCswB,EAAW00C,IAAgBhlE,EAAAA,EAAAA,KAAS,IACpC6vE,EAAiCC,EAA+BC,IAAkCxvD,EAAAA,GAAAA,MAClGyvD,EAAaC,IAAkBjwE,EAAAA,EAAAA,IAAS,IACzC1D,GAAOC,EAAAA,EAAAA,MAEbic,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAMmqE,GAAqB7wE,EAAAA,EAAAA,KAAQ,KACjC,GAAKvB,EAAKq6B,UAAar6B,EAAKq6B,SAASwxC,aAIrC,OAAO7rE,EAAKq6B,SAASwxC,aAAaxnC,MAAK,EAAG1mB,OAAAA,KAAaA,IAAWq0D,MACjE,CAAChyE,EAAMgyE,KAEV/uE,EAAAA,EAAAA,KAAU,KACJjD,MAAAA,GAAAA,EAAMq6B,UAAY23C,IAAyBI,GAC7Ch7C,EAAeuzC,EAAAA,GAAAA,sBAEhB,CAAC3qE,EAAMo3B,EAAgBg7C,EAAoBJ,KAE9C/uE,EAAAA,EAAAA,KAAU,KACRkpE,GAAgBiG,MAAAA,OAAD,EAACA,EAAoBc,cAAgB,IACpDD,IAAiBb,MAAAA,OAAD,EAACA,EAAoBY,cAAgB,IAAI58B,OAAO,EAvCpC,KAwC5Bw8B,GAAa,GACb5K,GAAa,KACZ,CAACoK,IAEJ,MAAM1F,GAAyBrtE,EAAAA,EAAAA,KAAayE,IAC1C,MAAM,KAAE+X,GAAS/X,EAAEiJ,OAMnBo/D,GAAgBjhC,IAAD,UACVA,EACH,CAACrvB,IANgClP,EAMCu+B,EAAErvB,IAL7BlP,QAAQ9K,IADjB,IAAmC8K,KAQnCimE,GAAa,KACZ,IAEGhG,GAAwBvtE,EAAAA,EAAAA,KAAY,KACnC2yE,IAILhK,GAAa,GACb2K,EAAgB,CACdr0E,OAAQ0B,EAAKlD,GACb6gB,OAAQq0D,EACRkB,YAAahH,EACb8G,YAAAA,OAED,CAAChzE,EAAMgyE,EAAsB9F,EAAa8G,EAAaL,IAEpDQ,GAAqB9zE,EAAAA,EAAAA,KAAY,KAChC2yE,IAILW,EAAgB,CACdr0E,OAAQ0B,EAAKlD,GACb6gB,OAAQq0D,EACRkB,YAAa,KAEfH,OACC,CAAC/yE,EAAKlD,GAAIi2E,EAAgCf,EAAsBW,IAE7DJ,GAAuBlzE,EAAAA,EAAAA,KAAaQ,MACpC2nB,EAAAA,EAAAA,IAAiBxnB,KAIjB+xE,GAAwB/xE,EAAKkzE,aAIzBlzE,EAAKkzE,YAAarzE,KACzB,CAACG,EAAM+xE,IAEJqB,GAAe7xE,EAAAA,EAAAA,KAAQ,KAC3B,IAAK6wE,EACH,OAGF,GAAIA,EAAmBlE,QACrB,OAAO5uE,EAAK,kBAGd,MAAMozE,EAAiBN,EAAmB3F,iBACtC1+C,EAAUqkD,EAAmB3F,uBAC7B5qE,EAEJ,OAAI6wE,EACKpzE,EAAK,uBAAuByyB,EAAAA,EAAAA,IAAgB2gD,IAG9CpzE,EAAK,kBACX,CAAC8yE,EAAoBrkD,EAAWzuB,IAE7B+zE,GAA0Bh0E,EAAAA,EAAAA,KAAayE,IAC3C,MAAM,MAAE6I,GAAU7I,EAAEiJ,OACpBkmE,EAAetmE,GACfimE,GAAa,KACZ,IAEH,GAAKR,EAIL,OACE,0BAAK1yE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC8d,GAAA,EAAD,CAAU0lB,UAAQ,EAACxjC,UAAU,uBAC3B,mBAAC+d,GAAA,EAAD,CACEE,OAAQy0D,EAAmBz0D,OAC3BD,OAAQ01D,EACR76C,eAAa,KAIjB,yBAAI74B,UAAU,uBAAuBO,IAAI,QAAQX,EAAK,uBAEtD,0BAAKI,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,UAAWquC,EAAY2B,WACvB5jD,MAAO3qB,EAAK2gB,EAAY,6BAA+B,4BACvDstD,UAAQ,EACR9gE,SAAU8lE,EAAqB,cAC/B1lE,SAAU6/D,KAGbzsD,GACC,0BAAKvgB,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,eACLgiB,UAAWquC,EAAYoH,aACvBrpD,MAAO3qB,EAAK,yBACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,gBAC/B1lE,SAAU6/D,KAIfzsD,GACC,0BAAKvgB,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,eACLgiB,UAAWquC,EAAYqH,aACvBtpD,MAAO3qB,EAAK,yBACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,gBAC/B1lE,SAAU6/D,KAIhB,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,iBACLgiB,UAAWquC,EAAYtkD,eACvBqC,MAAO3qB,EAAK2gB,EAAY,0BAA4B,gCACpDstD,UAAQ,EACR9gE,SAAU8lE,EAAqB,kBAC/B1lE,SAAU6/D,MAGZzsD,GACA,0BAAKvgB,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,WACLgiB,UAAWquC,EAAYsH,SACvBvpD,MAAO3qB,EAAK,qBACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,YAC/B1lE,SAAU6/D,KAIhB,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,cACLgiB,UAAWquC,EAAYyB,YACvB1jD,MAAO3qB,EAAK,qBACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,eAC/B1lE,SAAU6/D,MAGZzsD,GACA,0BAAKvgB,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,cACLgiB,UAAWquC,EAAY0B,YACvB3jD,MAAO3qB,EAAK,wBACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,eAC/B1lE,SAAU6/D,KAIhB,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,YACLgiB,UAAWquC,EAAYuH,UACvBxpD,MAAO3qB,EAAK,sBACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,aAC/B1lE,SAAU6/D,KAGd,0BAAKhtE,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,aACLgiB,UAAWquC,EAAYwH,WACvBzpD,MAAO3qB,EAAK,2BACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,cAC/B1lE,SAAU6/D,MAGZzsD,GACA,0BAAKvgB,UAAU,yBACb,mBAACk+B,GAAA,EAAD,CACE/hB,KAAK,YACLgiB,UAAWquC,EAAYyH,UACvB1pD,MAAO3qB,EAAK,4BACZiuE,UAAQ,EACR9gE,SAAU8lE,EAAqB,aAC/B1lE,SAAU6/D,KAKfqF,GACC,wBAAGryE,UAAU,oBAAoBO,IAAI,QAClCX,EAAK,kCAIR2gB,GACA,mBAACnD,GAAA,EAAD,CACEhgB,GAAG,cACHmtB,MAAO3qB,EAAK,iBACZuN,SAAUwmE,EACV1mE,MAAOqmE,EACPvmE,SAAUslE,EACV6B,UAzQkB,KA6QrB93D,IAAkBk2D,IAAyBD,GAC1C,mBAACv0D,GAAA,EAAD,CAAUpb,KAAK,SAASmF,QAAM,EAAC2kB,aAAW,EAACvsB,QAASmzE,GACjDxzE,EAAK,2BAMd,mBAAC68B,GAAA,EAAD,CACEjwB,QAASm3B,EACT1jC,QAASitE,EACT9qE,UAAWxC,EAAK,QAChBmN,SAAU6mB,GAETA,EACC,mBAAC/iB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAGlC,UAAU,gBAIjB,mBAACyhB,GAAA,EAAD,CACE1f,OAAQoxE,EACR5qE,QAAS8qE,EACTpwE,KAAK,+CACLye,aAAa,UACbC,eAAgB8xD,EAChBj7C,sBAAoB,SCjQ5B,IAAe73B,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxByf,KAAMgQ,GAAc1vB,EAAO2vB,MAInC,MAAO,CACLi/C,QAJcjtE,MAAAA,GAAH,UAAGA,EAAMq6B,gBAAT,aAAG,EAAgB4yC,QAK9Bl/C,UAAAA,EACA9N,UALgBjgB,IAAQsoB,EAAAA,EAAAA,IAActoB,GAMtCghD,iBAAkB3iD,EAAO2iD,qBAG7B,CAACjiD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAfgBZ,EAnDkD,EACpE6uE,QAAAA,EACAl/C,UAAAA,EACA9N,UAAAA,EACA4zD,aAAAA,EACA5rE,QAAAA,EACAoT,SAAAA,EACA2lC,iBAAAA,MAEA,MAAMc,GAAYvgD,EAAAA,EAAAA,KAAQ,KACxB,GAAK0rE,GAAYl/C,EAIjB,OAAOmzB,EAAAA,EAAAA,IAAY+rB,EAAQ1vD,KAAI,EAAGI,OAAAA,KAAaA,IAASoQ,OAAWlsB,EAAWm/C,KAC7E,CAACisB,EAASjsB,EAAkBjzB,IAEzBs6C,GAAoBhpE,EAAAA,EAAAA,KAAavC,IACrC+2E,EAAa,CAAE/2E,GAAAA,MACd,CAAC+2E,IAIJ,OAFAr4D,EAAAA,EAAAA,IAAeH,EAAUpT,GAGvB,0BAAKvI,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAU6xE,eAAa,GACnCzvB,EACCA,EAAUvkC,KAAI,CAACzgB,EAAIkoB,IACjB,mBAACxH,GAAA,EAAD,CACE3d,IAAK/C,EACL00E,cAAexsD,EACftlB,UAAU,kCACVC,QAAS,IAAM0oE,EAAkBvrE,IAEjC,mBAAC2gB,GAAA,EAAD,CAAiBE,OAAQ7gB,EAAIy7B,eAAa,OAI9C,mBAAC5F,GAAA,EAAD,CACE6+C,cAAe,EACf3xE,IAAI,gBACJ8C,KAAMsd,EAAY,uBAAyB,4BCczD,IAAe5f,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxByf,KAAMgQ,GAAc1vB,EAAO2vB,MAInC,MAAO,CACLi/C,QAJcjtE,MAAAA,GAAH,UAAGA,EAAMq6B,gBAAT,aAAG,EAAgB4yC,QAK9Bl/C,UAAAA,EACA9N,UALgBjgB,IAAQsoB,EAAAA,EAAAA,IAActoB,GAMtCghD,iBAAkB3iD,EAAO2iD,oBAXX5iD,EAxDgD,EAClE2vB,UAAAA,EACAk/C,QAAAA,EACAhtD,UAAAA,EACAmX,eAAAA,EACA40C,mBAAAA,EACA/jE,QAAAA,EACAoT,SAAAA,EACA2lC,iBAAAA,OAEAxlC,EAAAA,EAAAA,IAAeH,EAAUpT,GAEzB,MAAM65C,GAAYvgD,EAAAA,EAAAA,KAAQ,KACxB,GAAK0rE,GAAYl/C,EAIjB,OAAOmzB,EAAAA,EAAAA,IACL+rB,EAAQhxD,QAAQq3C,IAAYA,EAAO4a,UAAS3wD,KAAI,EAAGI,OAAAA,KAAaA,IAChEoQ,OAAWlsB,EAAWm/C,KAEvB,CAACisB,EAASjsB,EAAkBjzB,IAEzBy+C,GAA6BntE,EAAAA,EAAAA,KAAay0E,IAC9C9H,EAAmB8H,GACnB18C,EAAeuzC,EAAAA,GAAAA,wBACd,CAACqB,EAAoB50C,IAExB,OACE,0BAAK13B,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAU6xE,eAAa,GACnCzvB,EACCA,EAAUvkC,KAAI,CAACzgB,EAAIkoB,IACjB,mBAACxH,GAAA,EAAD,CACE3d,IAAK/C,EACL00E,cAAexsD,EACftlB,UAAU,kCACVC,QAAS,IAAM6sE,EAA2B1vE,IAE1C,mBAAC2gB,GAAA,EAAD,CAAiBE,OAAQ7gB,EAAIy7B,eAAa,OAI9C,mBAAC5F,GAAA,EAAD,CACE6+C,cAAe,EACf3xE,IAAI,gBACJ8C,KAAMsd,EAAY,uBAAyB,4BC4IzD,IAAe5f,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IAGQ,CACL01E,gBAHqBC,EAAAA,EAAAA,IAA4B31E,MAFnCD,EAtL0B,EAC5CE,OAAAA,EACAy4B,cAAAA,EACAi7C,qBAAAA,EACAF,wBAAAA,EACA16C,eAAAA,EACA40C,mBAAAA,EACA/jE,QAAAA,EACAoT,SAAAA,EACA04D,eAAAA,MAEA,OAAQh9C,GACN,KAAK4zC,EAAAA,GAAAA,QACH,OAAQoJ,GACN,IAAK,OACH,OACE,mBAAC,GAAD,CACEl0E,IAAKvB,EACLqf,OAAQrf,EACR2J,QAASA,EACToT,SAAUA,IAGhB,IAAK,QACH,OACE,mBAAC,GAAD,CACExb,IAAKvB,EACLA,OAAQA,EACR84B,eAAgBA,EAChBnvB,QAASA,EACToT,SAAUA,GAAY,CACpBsvD,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACA5tE,SAASg6B,KAGjB,IAAK,UACH,OACE,mBAAC,GAAD,CACEl3B,IAAKvB,EACLA,OAAQA,EACR84B,eAAgBA,EAChBnvB,QAASA,EACToT,SAAUA,GAAY,CACpBsvD,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACA5tE,SAASg6B,KAKnB,MAGF,KAAK4zC,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACErsE,OAAQA,EACR+c,SAAUA,EACVpT,QAASA,IAIf,KAAK0iE,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACErsE,OAAQA,EACR84B,eAAgBA,EAChB/b,SAAUA,EACVpT,QAASA,IAIf,KAAK0iE,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACErsE,OAAQA,EACR84B,eAAgBA,EAChB40C,mBAAoBA,EACpB3wD,SAAUA,GAAY,CACpBsvD,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,sBACA5tE,SAASg6B,GACX9uB,QAASA,IAIf,KAAK0iE,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACErsE,OAAQA,EACR+c,SAAUA,EACVpT,QAASA,IAIf,KAAK0iE,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACErsE,OAAQA,EACR0tE,mBAAoBA,EACpB50C,eAAgBA,EAChB/b,SAAUA,GAAY,CACpBsvD,EAAAA,GAAAA,sBACA5tE,SAASg6B,GACX9uB,QAASA,IAIf,KAAK0iE,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACErsE,OAAQA,EACR0zE,qBAAsBA,EACtBF,wBAAyBA,EACzB16C,eAAgBA,EAChB/b,SAAUA,EACVpT,QAASA,IAIf,KAAK0iE,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACErsE,OAAQA,EACR84B,eAAgBA,EAChB40C,mBAAoBA,EACpB3wD,SAAUA,GAAY,CACpBsvD,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACA5tE,SAASg6B,GACX9uB,QAASA,IAIf,KAAK0iE,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACErsE,OAAQA,EACR+c,SAAUA,EACVpT,QAASA,IAIf,KAAK0iE,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACErsE,OAAQA,EACR0zE,qBAAsBA,EACtBF,wBAAyBA,EACzB16C,eAAgBA,EAChB/b,SAAUA,EACVpT,QAASA,IAIf,KAAK0iE,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACErsE,OAAQA,EACR+c,SAAUA,EACVpT,QAASA,S,eClNnB,MAAMgsE,GAAO,8BACPC,GAAc,uBACdC,GAAc,uBAEb,IAAKC,I,SAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,KAMZ,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,cAGlB,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAWpvD,QAAQ,MAAO,IACnC2uD,GAAK36C,KAAKo7C,GACLN,GAASG,KAEdL,GAAY56C,KAAKo7C,IAAeP,GAAY76C,KAAKo7C,GAC5CN,GAASI,WAEXJ,GAASE,QCvBlB,MA0OMK,GAAuC,GAChCC,GAA2B,oDAoCxC,GA/Qc,+8JA8OX1iD,MAAM,MACN3U,KAAKs3D,IAQG,CACL/3E,GARS+3E,EAAIz+B,OAAO,EAAG,GAQnB0+B,KAPOD,EAAIz+B,OAAO,EAAG,GAOf7vB,KANE,IAAGsuD,EAAI/kD,MAAM,OAAQ,KAMjBjU,KALLg5D,EAAI3iD,MAAM,OAAO,GAKN6iD,YAI5B,SAA8BC,GAC5B,IAAKA,EACH,OAAOJ,GAGT,MAAMK,EAAcD,EAAO,GAC3B,IAAIE,EAEJ,IAAKP,GAAaM,GAAc,CAC9B,MAAME,EAAoBF,EAAY/iD,MAAM,IAAI3U,IAAIzQ,QACpDooE,EAAoBC,EAAkBz9B,QAAO,CAACC,EAAQnX,EAAOxb,IACnD,GAAE2yB,WAAgBnX,MAAUxb,EAAI,EAAI,IAAM,MACjD,IACH2vD,GAAaM,GAAe,IAAIG,OAAQ,GAAEF,IAAoB,MAAMG,OAAO,EAAIF,EAAkBn3E,WAGnG,OAAO22E,GAAaM,GAvBEK,CADLT,EAAI/kD,MAAM,aCpNvBwG,GAA2B,CAC/Bi/C,YAAa,GACbC,YAAa,GACbC,KAAM,GACN7+C,MAAO,GACP8+C,YAAa,GACbC,SAAU,GACV7jD,SAAU,GACV4E,MAAO,GACPk/C,MAAO,GACPC,SAAU,GACVnB,WAAY,GACZoB,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,IAGRC,GAAgD,CAAC1/C,EAAOC,KAC5D,OAAQA,EAAOjqB,MACb,IAAK,iBACH,MAAO,IACFgqB,EACH2+C,YAAa1+C,EAAOC,QACpBu/C,WAAY,IACPz/C,EAAMy/C,WACTd,iBAAa1zE,IAGnB,IAAK,iBACH,MAAO,IACF+0B,EACH4+C,YAAa3+C,EAAOC,QACpBu/C,WAAY,IACPz/C,EAAMy/C,WACTb,iBAAa3zE,IAGnB,IAAK,aACH,MAAO,IACF+0B,EACH6+C,KAAM5+C,EAAOC,QACbu/C,WAAY,IACPz/C,EAAMy/C,WACTZ,UAAM5zE,IAGZ,IAAK,cACH,MAAO,IACF+0B,EACHA,MAAOC,EAAOC,QACdu/C,WAAY,IACPz/C,EAAMy/C,WACTz/C,WAAO/0B,IAGb,IAAK,gBACH,MAAO,IACF+0B,EACH8+C,YAAa7+C,EAAOC,QACpBm/C,eAAgBM,GAAkB1/C,EAAOC,SACzCu/C,WAAY,IACPz/C,EAAMy/C,WACTX,iBAAa7zE,IAGnB,IAAK,iBACH,MAAO,IACF+0B,EACH++C,SAAU9+C,EAAOC,QACjBu/C,WAAY,IACPz/C,EAAMy/C,WACTV,cAAU9zE,IAGhB,IAAK,iBACH,MAAO,IACF+0B,EACH9E,SAAU+E,EAAOC,QACjBu/C,WAAY,IACPz/C,EAAMy/C,WACTvkD,cAAUjwB,IAGhB,IAAK,cACH,MAAO,IACF+0B,EACHF,MAAOG,EAAOC,QACdu/C,WAAY,IACPz/C,EAAMy/C,WACT3/C,WAAO70B,IAGb,IAAK,cACH,MAAO,IACF+0B,EACHg/C,MAAO/+C,EAAOC,QACdu/C,WAAY,IACPz/C,EAAMy/C,WACTT,WAAO/zE,IAGb,IAAK,iBACH,MAAO,IAAK+0B,EAAOi/C,SAAUh/C,EAAOC,SACtC,IAAK,mBACH,MAAO,IACFF,EACH89C,WAAY79C,EAAOC,QACnBu/C,WAAY,IACPz/C,EAAMy/C,WACT3B,gBAAY7yE,IAGlB,IAAK,mBACH,MAAO,IACF+0B,EACHk/C,WAAYj/C,EAAOC,QACnBu/C,WAAY,IACPz/C,EAAMy/C,WACTP,gBAAYj0E,IAGlB,IAAK,mBACH,MAAO,IACF+0B,EACHm/C,OAAQl/C,EAAOC,QACfu/C,WAAY,IACPz/C,EAAMy/C,WACTN,YAAQl0E,IAGd,IAAK,gBACH,MAAO,IACF+0B,EACHo/C,IAAKn/C,EAAOC,QACZu/C,WAAY,IACPz/C,EAAMy/C,WACTL,SAAKn0E,IAGX,IAAK,uBACH,MAAO,IACF+0B,EACHq/C,eAAgBp/C,EAAOC,QACvBu/C,WAAY,IACPz/C,EAAMy/C,WACTJ,oBAAgBp0E,IAGtB,IAAK,mBACH,MAAO,IACF+0B,EACHs/C,WAAYr/C,EAAOC,QACnBu/C,WAAY,IACPz/C,EAAMy/C,WACTH,gBAAYr0E,IAGlB,IAAK,iBACH,MAAO,IAAK+0B,EAAOu/C,SAAUt/C,EAAOC,SACtC,IAAK,wBACH,MAAO,IAAKF,EAAOw/C,gBAAiBv/C,EAAOC,SAC7C,IAAK,iBACH,OAAID,EAAOC,QAAQ4+C,YACV,IACF9+C,KACAC,EAAOC,QACVm/C,eAAgBM,GAAkB1/C,EAAOC,QAAQ4+C,cAG9C,IAAK9+C,KAAUC,EAAOC,SAC/B,IAAK,gBACH,MAAO,IACFF,EACHy/C,WAAY,IACPz/C,EAAMy/C,cACNx/C,EAAOC,UAGhB,QACE,OAAOF,IAIb,SAAS2/C,GAAkBC,GACzB,MAAMt+B,EAAUsC,GAAAA,MAAiB,EAAG19C,GAAAA,KAASA,IAAO05E,IACpD,OAAOt+B,EAAUA,EAAQr8B,KAAO,GCvNnB,SAAS46D,GACtBpvE,EAAkCqvE,EAHX,MAKvBzzE,EAAAA,EAAAA,KAAU,KACJmF,EAAAA,IAIJvC,YAAW,MACTi8D,EAAAA,EAAAA,KAAQ,KACFz6D,EAAInB,SACNmB,EAAInB,QAAQ49B,aAGf4yC,KACF,CAACrvE,EAAKqvE,ICNX,MAyCA,IAAer2E,EAAAA,EAAAA,KAzCe2yB,IAC5B,MAAM,GACJl2B,EADI,MAEJ6P,EAFI,MAGJsd,EAHI,SAIJ0sD,EAJI,MAKJr3D,EALI,IAMJjY,EANI,YAOJ2V,EAPI,SAQJnQ,EARI,SASJQ,GACE2lB,EACE4jD,EAAYt3D,GAAS2K,EACrB61C,GAAgBj8D,EAAAA,EAAAA,GACpB,cACA8I,GAAS,UACT2S,GAAS,QACTs3D,GAAa,aACbD,GAAY,aACZ,eAGF,OACE,0BAAKj3E,UAAWogE,GACd,6BACEpgE,UAAU,eACV5C,GAAIA,EACJ6P,MAAOA,GAAS,GAChBE,SAAUA,EACVmQ,YAAaA,GAAeiN,EAC5B5iB,IAAKA,GAEJgG,GAEFupE,GAAa95E,GACZ,4BAAO+5E,QAAS/5E,GAAK85E,OCsJ7B,IAAev2E,EAAAA,EAAAA,KAlLoB,EACjCu2B,MAAAA,EACAkgD,UAAAA,EACAC,UAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAl2C,SAAAA,MAGA,MAAMz0B,GAAW5G,EAAAA,EAAAA,IAAyB,MAEpCwxE,GAAWxxE,EAAAA,EAAAA,IAAyB,MAEpCyxE,GAAmBzxE,EAAAA,EAAAA,IAA0B,OAEnDzC,EAAAA,EAAAA,KAAU,KACJk0E,EAAiBjxE,SAChBixE,EAAiBjxE,QAAQyG,QAAUiqB,EAAM8+C,cAC5CyB,EAAiBjxE,QAAQyG,MAAQiqB,EAAM8+C,eAExC,CAAC9+C,EAAM8+C,cAEV,MAAMp2E,GAAOC,EAAAA,EAAAA,KAEbk3E,GAAuBnqE,GAEvB,MAAM8qE,GAAuB/3E,EAAAA,EAAAA,KAAayE,IACxCi9B,EAAS,CAAEn0B,KAAM,iBAAkBkqB,QAAShzB,EAAEiJ,OAAOJ,UACpD,CAACo0B,IAEEs2C,GAAuBh4E,EAAAA,EAAAA,KAAayE,IACxCi9B,EAAS,CAAEn0B,KAAM,iBAAkBkqB,QAAShzB,EAAEiJ,OAAOJ,UACpD,CAACo0B,IAEEu2C,GAAmBj4E,EAAAA,EAAAA,KAAayE,IACpCi9B,EAAS,CAAEn0B,KAAM,aAAckqB,QAAShzB,EAAEiJ,OAAOJ,UAChD,CAACo0B,IAEEw2C,GAAoBl4E,EAAAA,EAAAA,KAAayE,IACrCi9B,EAAS,CAAEn0B,KAAM,cAAekqB,QAAShzB,EAAEiJ,OAAOJ,UACjD,CAACo0B,IAEEy2C,GAAsBn4E,EAAAA,EAAAA,KAAayE,IACvCi9B,EAAS,CAAEn0B,KAAM,gBAAiBkqB,QAAShzB,EAAEiJ,OAAOJ,UACnD,CAACo0B,IAEE02C,GAAuBp4E,EAAAA,EAAAA,KAAayE,IACxCi9B,EAAS,CAAEn0B,KAAM,iBAAkBkqB,QAAShzB,EAAEiJ,OAAOJ,UACpD,CAACo0B,IAEE22C,GAAuBr4E,EAAAA,EAAAA,KAAayE,IACxCi9B,EAAS,CAAEn0B,KAAM,iBAAkBkqB,QAAShzB,EAAEiJ,OAAOJ,UACpD,CAACo0B,IAEE42C,GAAoBt4E,EAAAA,EAAAA,KAAayE,IACrCi9B,EAAS,CAAEn0B,KAAM,cAAekqB,QAAShzB,EAAEiJ,OAAOJ,UACjD,CAACo0B,IAEE62C,GAAoBv4E,EAAAA,EAAAA,KAAayE,IACrC,IAAI,MAAE6I,GAAU7I,EAAEiJ,OAClBJ,EAAS,IAAGA,EAAM2Y,QAAQ,MAAO,MAC7B4xD,EAAShxE,UACXgxE,EAAShxE,QAAQyG,MAAQA,GAE3Bo0B,EAAS,CAAEn0B,KAAM,cAAekqB,QAASnqB,MACxC,CAACo0B,IAEE82C,GAAuBx4E,EAAAA,EAAAA,KAAayE,IACxCi9B,EAAS,CAAEn0B,KAAM,iBAAkBkqB,QAAShzB,EAAEiJ,OAAOJ,UACpD,CAACo0B,KAEE,WAAEs1C,GAAez/C,EACvB,OACE,0BAAKl3B,UAAU,gBACb,+BACGu3E,EACC,8BACE,6BAAK33E,EAAK,2BACV,mBAACwd,GAAA,EAAD,CACEzV,IAAKiF,EACL2d,MAAM,oBACNpd,SAAUuqE,EACVzqE,MAAOiqB,EAAM2+C,YACbpvD,UAAU,OACV7G,MAAO+2D,EAAWd,cAEpB,mBAACz4D,GAAA,EAAD,CACEmN,MAAM,oBACNpd,SAAUwqE,EACV1qE,MAAOiqB,EAAM4+C,YACbrvD,UAAU,OACV7G,MAAO+2D,EAAWb,cAEpB,mBAAC14D,GAAA,EAAD,CACEmN,MAAM,OACNpd,SAAUyqE,EACV3qE,MAAOiqB,EAAM6+C,KACbtvD,UAAU,OACV7G,MAAO+2D,EAAWZ,OAEpB,mBAAC34D,GAAA,EAAD,CACEmN,MAAM,QACNpd,SAAU0qE,EACV5qE,MAAOiqB,EAAMA,MACbzQ,UAAU,OACV7G,MAAO+2D,EAAWz/C,QAEpB,mBAAC,GAAD,CACE3M,MAAM,UACNjN,YAAY,UACZnQ,SAAU2qE,EACV7qE,MAAOiqB,EAAM8+C,YACbiB,SAAU9tE,SAAQ,GAClB/L,GAAG,mBACHwiB,MAAO+2D,EAAWX,YAClBruE,IAAK8vE,GAEJ38B,GAAAA,KAAgB,EAAG3+B,KAAAA,EAAM/e,GAAAA,KACxB,6BACE6P,MAAO7P,EACP4C,UAAU,eAETmc,MAKP,mBAACiB,GAAA,EAAD,CACEmN,MAAM,YACNpd,SAAU4qE,EACV9qE,MAAOiqB,EAAM++C,SACbxvD,UAAU,OACV7G,MAAO+2D,EAAWV,iBAGpB9zE,EACFm1E,GAAYF,GAAaC,EACzB,6BAAKz3E,EAAK,iCACRuC,EACFm1E,GACA,mBAACl6D,GAAA,EAAD,CACEmN,MAAM,YACNpd,SAAU6qE,EACV/qE,MAAOiqB,EAAM9E,SACb3L,UAAU,OACV7G,MAAO+2D,EAAWvkD,WAGpBglD,GACA,mBAACh6D,GAAA,EAAD,CACEmN,MAAM,QACNpd,SAAU8qE,EACVhrE,MAAOiqB,EAAMF,MACbvQ,UAAU,QACV7G,MAAO+2D,EAAW3/C,QAGpBqgD,GACA,mBAACj6D,GAAA,EAAD,CACEmN,MAAM,eACNpd,SAAU+qE,EACVjrE,MAAOiqB,EAAMg/C,MACbzvD,UAAU,MACV7G,MAAO+2D,EAAWT,MAClBvuE,IAAK6vE,IAGT,mBAACt5C,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,uBACZkpC,SAAUlpC,EAAK,2BACfu+B,QAASh1B,QAAQ+tB,EAAMu/C,UACvBtpE,SAAUgrE,SCtIpB,IAAex3E,EAAAA,EAAAA,KAxCgB,EAC7Bu2B,MAAAA,EACAkhD,gBAAAA,EACAC,SAAAA,EACAh3C,SAAAA,MAEA,MAAMzhC,GAAOC,EAAAA,EAAAA,MAEb0D,EAAAA,EAAAA,KAAU,KACH60E,IAAmBlhD,EAAMi/C,UAG9B90C,EAAS,CAAEn0B,KAAM,iBAAkBkqB,QAASghD,EAAgB,GAAGh7E,OAC9D,CAACg7E,EAAiBlhD,EAAMi/C,SAAU90C,IAErC,MAAMi3C,GAAuB34E,EAAAA,EAAAA,KAAasN,IACxCo0B,EAAS,CAAEn0B,KAAM,iBAAkBkqB,QAASnqB,MAC3C,CAACo0B,IAEE5W,GAAU5oB,EAAAA,EAAAA,KAAQ,IAAOu2E,EAAgBv6D,KAAI,EAAGzgB,GAAI6P,EAAOoT,MAAOkK,EAAOguD,OAAAA,MAA5B,CACjDhuD,MAAAA,EACAue,UAAU0vC,EAAAA,GAAAA,GAAeD,EAAQF,EAAUz4E,EAAKinB,MAChD5Z,MAAAA,OACI,CAACmrE,EAAiBC,EAAUz4E,EAAKinB,OAEvC,OACE,0BAAK7mB,UAAU,YACb,+BACE,sDACA,mBAACwqB,GAAA,EAAD,CACErO,KAAK,mBACLsO,QAASA,EACTtd,SAAUmrE,EACV5tD,SAAUwM,EAAMi/C,gBC6B1B,SAASsC,GACPriC,EAAgC/1B,EAAepT,EAAeorE,EAAmBK,GAAO,GAExF,OACE,0BAAK14E,UAAY,oBAAkB04E,EAAO,uBAAyB,KACjE,0BAAK14E,UAAU,SACXqgB,GAEJ,0BAAKrgB,UAAU,UACZw4E,EAAAA,GAAAA,GAAevrE,EAAOorE,EAAUjiC,KAMzC,SAASuiC,GAAmBj2E,EAAc2d,EAAe0f,GACvD,OACE,0BAAK//B,UAAU,sBACb,wBAAGA,UAAW0C,GAAd,KACA,0BAAK1C,UAAU,QACb,0BAAKA,UAAU,SACXqgB,GAEJ,wBAAGrgB,UAAU,QACT+/B,KAOZ,UAAep/B,EAAAA,EAAAA,KAnFgB,EAC7Bi4E,eAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,aAAAA,EACAV,SAAAA,EACAW,WAAAA,MAEA,MAAMp5E,GAAOC,EAAAA,EAAAA,MAEP,SAAEo5E,EAAF,MAAY54D,EAAZ,KAAmBpd,GAAS21E,GAAkB,IAC9C,cACJM,EADI,gBAEJC,EAFI,gBAGJC,EAHI,KAIJj9D,EAJI,MAKJ+5D,EALI,eAMJmD,GACGN,GAAgB,GAErB,OACE,0BAAK/4E,UAAU,YACb,0BAAKA,UAAU,yBACZi5E,GAAY,0BAAK58E,IAAK48E,EAAUtoE,IAAI,KACrC,0BAAK3Q,UAAU,QACb,6BAAKqgB,GACL,4BAAIpd,KAGR,0BAAKjD,UAAU,cACX64E,GAAUA,EAAOh7D,KAAKm1C,GACtBylB,GAAkB74E,EAAKinB,KAAMmsC,EAAKzoC,MAAOyoC,EAAKulB,OAAQF,KAEtDS,GAAkBA,EAAej7D,KAAKm1C,GACtCylB,GAAkB74E,EAAKinB,KAAMmsC,EAAKzoC,MAAOyoC,EAAKulB,OAAQF,UAEvCl2E,IAAf62E,GACAP,GAAkB74E,EAAKinB,KAAMjnB,EAAK,wBAAyBo5E,EAAYX,GAAU,IAGrF,0BAAKr4E,UAAU,gBACZk5E,GAAiBP,GAAmB,YAAaO,EAAe,kBAChEC,GAAmBR,GAAmB,kBAAmBQ,EAAiB,oBAC1EC,GAAmBT,GAAmB,gBAAiBS,EAAiB,oBACxEj9D,GAAQw8D,GAAmB,YAAax8D,EAAM,QAC9C+5D,GAASyC,GAAmB,aAAczC,EAAO,gBACjDmD,GAAkBV,GAAmB,aAAcU,EAAgB,wBC9B5E,IAAe14E,EAAAA,EAAAA,KA/BoB,EAAGsM,MAAAA,EAAO2S,MAAAA,EAAOzS,SAAAA,MAElD,MAAMmsE,GAAiBtzE,EAAAA,EAAAA,IAAyB,MAE1CmV,GAAgBxb,EAAAA,EAAAA,KAAayE,IACjC,GAAc,cAAVA,EAAEjE,KAA0D,MAAnC8M,EAAMssE,OAAOtsE,EAAM3O,OAAS,GAAY,CACnE,MAAMi/C,EAAWtwC,EAAM0oB,MAAM,EAAG1oB,EAAM3O,OAAS,GAC3Cg7E,EAAe9yE,UACjB8yE,EAAe9yE,QAAQyG,MAAQswC,MAGlC,CAACtwC,IAEEkpC,GAAex2C,EAAAA,EAAAA,KAAayE,IAChC+I,EC9BG,SAA0BqjD,GAE/B,MAAMgpB,GADNhpB,EAAQA,EAAM5qC,QAAQ,SAAU,IAAI+P,MAAM,EAAG,IACzBvF,MAAM,WAO1B,OANIopD,MAAAA,GAAAA,EAAQ,IAAMpsE,OAAOosE,EAAM,IAAM,KACnCA,EAAM,GAAK,MAETA,MAAAA,GAAAA,EAAQ,IAA0B,IAApBA,EAAM,GAAGl7E,SAAiBk7E,EAAM,KAChDA,EAAM,GAAK,IAENA,EAAQA,EAAMltE,KAAK,KAAO,GDqBtBmtE,CAAiBr1E,EAAEiJ,OAAOJ,UAClC,CAACE,IAEJ,OACE,mBAACiQ,GAAA,EAAD,CACEmN,MAAM,cACN5iB,IAAK2xE,EACLnsE,SAAUgpC,EACV94B,UAAWlC,EACXlO,MAAOA,EACP2S,MAAOA,EACP6G,UAAU,UACVytD,UAlCmB,O,0BESzB,MAkDA,IAAevzE,EAAAA,EAAAA,KA1CkB,EAAGsM,MAAAA,EAAO2S,MAAAA,EAAOzS,SAAAA,MAEhD,MAAMusE,GAAgB1zE,EAAAA,EAAAA,IAAyB,MAE/C+wE,GAAuB2C,GAEvB,MAAOC,EAAUC,IAAet2E,EAAAA,EAAAA,IAAiBoxE,GAASE,UAC1DrxE,EAAAA,EAAAA,KAAU,KACR,MAAMs2E,EAAc9E,GAAe9nE,GACnC2sE,EAAYC,KAEX,IAEH,MAAM1jC,GAAex2C,EAAAA,EAAAA,KAAayE,IAChC,MAAMm5C,ED3BH,SAA0BiT,GAE/B,MAAMgpB,GADNhpB,EAAQA,EAAM5qC,QAAQ,SAAU,KACZwK,MAAM,WAC1B,OAAOopD,EAAQA,EAAMltE,KAAK,KAAO,GCwBdwtE,CAAiB11E,EAAEiJ,OAAOJ,OACrC4sE,EAAc9E,GAAe3wE,EAAEiJ,OAAOJ,OAC5C2sE,EAAYC,GACZ1sE,EAASowC,GACLm8B,EAAclzE,UAChBkzE,EAAclzE,QAAQyG,MAAQswC,KAE/B,CAACpwC,EAAUusE,IAERK,EAqBR,SAAqBJ,GACnB,OAAQA,GACN,KAAKjF,GAASI,WACZ,OAAO,0BAAKz4E,IAAK29E,GAAoBrpE,IAAI,KAC3C,KAAK+jE,GAASG,KACZ,OAAO,0BAAKx4E,IAAK49E,GAActpE,IAAI,KACrC,QACE,QA5BaupE,CAAYP,GAE7B,OACE,0BAAK35E,UAAU,aACb,2BAAMA,UAAU,cAAc+5E,GAC9B,mBAAC38D,GAAA,EAAD,CACEzV,IAAK+xE,EACLnvD,MAAM,cACNpd,SAAUgpC,EACVlpC,MAAOA,EACPwZ,UAAU,UACVzmB,UAAW25E,EAAW,iBAAmB,GACzC/5D,MAAOA,EACPs0D,UA5CuB,SC0I/B,IAAevzE,EAAAA,EAAAA,KAlImB,EAChCu2B,MAAAA,EACAijD,mBAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACAj5C,SAAAA,MAGA,MAAMo2C,GAAmBzxE,EAAAA,EAAAA,IAA0B,OAEnDzC,EAAAA,EAAAA,KAAU,KACJk0E,EAAiBjxE,SAChBixE,EAAiBjxE,QAAQyG,QAAUiqB,EAAMq/C,iBAC5CkB,EAAiBjxE,QAAQyG,MAAQiqB,EAAMq/C,kBAExC,CAACr/C,EAAMq/C,iBAEV,MAAMgE,GAAyB56E,EAAAA,EAAAA,KAAasN,IAC1Co0B,EAAS,CAAEn0B,KAAM,mBAAoBkqB,QAASnqB,MAC7C,CAACo0B,IAEEm5C,GAAyB76E,EAAAA,EAAAA,KAAayE,IAC1Ci9B,EAAS,CAAEn0B,KAAM,mBAAoBkqB,QAAShzB,EAAEiJ,OAAOJ,MAAMwtE,kBAC5D,CAACp5C,IAEEq5C,GAAqB/6E,EAAAA,EAAAA,KAAasN,IACtCo0B,EAAS,CAAEn0B,KAAM,mBAAoBkqB,QAASnqB,MAC7C,CAACo0B,IAEEs5C,GAAkBh7E,EAAAA,EAAAA,KAAayE,IACnCi9B,EAAS,CAAEn0B,KAAM,gBAAiBkqB,QAAShzB,EAAEiJ,OAAOJ,UACnD,CAACo0B,IAEEy2C,GAAsBn4E,EAAAA,EAAAA,KAAayE,IACvCi9B,EAAS,CAAEn0B,KAAM,uBAAwBkqB,QAAShzB,EAAEiJ,OAAOJ,UAC1D,CAACo0B,IAEEu5C,GAA8Bj7E,EAAAA,EAAAA,KAAayE,IAC/Ci9B,EAAS,CAAEn0B,KAAM,mBAAoBkqB,QAAShzB,EAAEiJ,OAAOJ,UACtD,CAACo0B,IAEEw5C,GAA8Bl7E,EAAAA,EAAAA,KAAayE,IAC/Ci9B,EAAS,CAAEn0B,KAAM,wBAAyBkqB,QAAShzB,EAAEiJ,OAAOJ,UAC3D,CAACo0B,IAEEzhC,GAAOC,EAAAA,EAAAA,MAEP,WAAE82E,EAAa,IAAOz/C,EAE5B,OACE,0BAAKl3B,UAAU,eACb,+BACE,6BAAKJ,EAAK,qBACV,mBAAC,GAAD,CACEuN,SAAUotE,EACVttE,MAAOiqB,EAAM89C,WACbp1D,MAAO+2D,EAAW3B,aAElBoF,GACA,mBAACh9D,GAAA,EAAD,CACEmN,MAAM,eACNpd,SAAUqtE,EACVvtE,MAAOiqB,EAAMk/C,WACb3vD,UAAU,OACV7G,MAAO+2D,EAAWP,aAGtB,8BAASp2E,UAAU,iBACjB,mBAAC,GAAD,CACEiN,MAAOiqB,EAAMm/C,OACblpE,SAAUutE,EACV96D,MAAO+2D,EAAWN,SAEpB,mBAACj5D,GAAA,EAAD,CACEmN,MAAM,WACNpd,SAAUwtE,EACV1tE,MAAOiqB,EAAMo/C,IACb7vD,UAAU,UACVytD,UAAW,EACXt0D,MAAO+2D,EAAWL,OAGpB+D,GAAeC,EACf,6BAAK16E,EAAK,+BACRuC,EACFk4E,GACA,mBAAC,GAAD,CACE9vD,MAAM,UACNjN,YAAY,UACZnQ,SAAU2qE,EACV7qE,MAAOiqB,EAAMq/C,eACbU,SAAU9tE,SAAQ,GAClB/L,GAAG,kBACHwiB,MAAO+2D,EAAWJ,eAClB5uE,IAAK8vE,GAGH38B,GAAAA,KAAgB,EAAG3+B,KAAAA,KACjB,6BACElP,MAAOkP,EACPnc,UAAU,eAETmc,MAMTm+D,GACA,mBAACl9D,GAAA,EAAD,CACEmN,MAAM,YACNpd,SAAUytE,EACV3tE,MAAOiqB,EAAMs/C,WACb/vD,UAAU,OACV7G,MAAO+2D,EAAWH,aAGpB2D,GACA,mBAACj8C,GAAA,EAAD,CACE3T,MAAO3qB,EAAK,qCACZu+B,QAASjH,EAAMw/C,gBACfvpE,SAAU0tE,SCyMtB,IAAel6E,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,KACJqO,EADI,gBAEJorE,EAFI,UAGJ0C,EAHI,mBAIJX,EAJI,QAKJY,EALI,eAMJnC,EANI,eAOJoC,EAPI,aAQJC,EARI,gBASJC,EATI,MAUJt7D,GACEjhB,EAAOw8E,QAELC,EAAkBjyE,QAAQ4xE,KAAaC,GAlVxB,WAkV0CA,KACzD,mBAAEZ,EAAF,YAAsBC,EAAtB,QAAmCC,GAAaW,GAAgB,IAChE,cACJI,EADI,eAEJC,EAFI,eAGJC,EAHI,yBAIJC,EAJI,SAKJC,EALI,gBAMJC,EANI,gBAOJC,EAPI,SAQJtD,EARI,OASJQ,GACGkC,GAAW,GAEhB,MAAO,CACL/tE,KAAAA,EACAorE,gBAAAA,EACA0C,UAAAA,EACAX,mBAAAA,EACAa,eAAAA,EACAE,gBAAAA,EACAG,cAAAA,EACAG,yBAAAA,EACAF,eAAAA,EACAC,eAAAA,EACAE,SAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAtD,SAAAA,EACAQ,OAAAA,EACAuC,gBAAAA,EACAxC,eAAAA,EACAwB,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACA16D,MAAAA,MAGJ,CAACvgB,EAAWC,KACHC,EAAAA,EAAAA,IAAKD,EAAS,CACnB,wBACA,kBACA,iBACA,sBACA,uBA3DcZ,EArS0D,EAC5EqD,OAAAA,EACAwG,QAAAA,EACAyE,KAAAA,EACAorE,gBAAAA,EACA0C,UAAAA,EACAX,mBAAAA,EACAkB,cAAAA,EACAG,yBAAAA,EACAF,eAAAA,EACAC,eAAAA,EACAG,gBAAAA,EACAC,gBAAAA,EACAtD,SAAAA,EACA6C,gBAAAA,EACAE,gBAAAA,EACAxC,eAAAA,EACAoC,eAAAA,EACAnC,OAAAA,EACAuB,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACA16D,MAAAA,EACAg8D,sBAAAA,EACAC,gBAAAA,EACAC,eAAAA,EACAC,oBAAAA,EACAC,kBAAAA,MAEA,MAAOC,EAAcC,IV+Id17B,EAAAA,GAAAA,GAAWo2B,GAAShgD,KU9IpBhD,EAAW00C,IAAgBhlE,EAAAA,EAAAA,KAAS,GACrC1D,GAAOC,EAAAA,EAAAA,MAEb0D,EAAAA,EAAAA,KAAU,MACJyJ,GAAQ4S,IACV0oD,GAAa,KAEd,CAACt7D,EAAM4S,KAEVrc,EAAAA,EAAAA,KAAU,KACJqc,MAAAA,GAAAA,EAAOu8D,OACTD,EAAgB,CACdhvE,KAAM,gBACNkqB,QAAS,CACP,CAACxX,EAAMu8D,OAAQv8D,EAAM5hB,aAI1B,CAAC4hB,EAAOs8D,KAEX34E,EAAAA,EAAAA,KAAU,KACR,GAAIu3E,EAAW,CACb,MACE3+D,KAAMiW,EADF,MACY8jD,EADZ,MACmBl/C,EADnB,gBAC0BoiD,GAC5B0B,EACJoB,EAAgB,CACdhvE,KAAM,iBACNkqB,QAAS,CACPhF,SAAAA,EACA8jD,MAAOA,GAA6B,MAApBA,EAAMqD,OAAO,GACxB,IAAGrD,IACJA,EACJl/C,MAAAA,KACIoiD,GAAmB,SAI5B,CAAC0B,EAAWoB,IAEf,MAAME,GAAwBz8E,EAAAA,EAAAA,KAAY,KACxCq8E,MACC,CAACA,IAEEhD,GAAan3E,EAAAA,EAAAA,KAAQ,IACrBmL,IAASqvE,EAAAA,GAAAA,SACJ,EAmSb,SAAuBxD,EAAkB,GAAIT,EAA+CkE,GAC1F,MAAMxD,EAAiBV,EACnBmE,GAAkBnE,EAAiBkE,GACnC,GACJ,IAAIvT,EAAQ,EAKZ,OAHAA,EADoB8P,EAAO1+B,OAAO2+B,GAAkB,IAChC9gC,QAAO,CAACqC,EAAKmiC,IACxBniC,EAAMmiC,EAAIjE,QAChBxP,GACIA,EAzSE0T,CAAc5D,EAAQT,EAAiB6D,EAAa9F,WAC1D,CAACnpE,EAAMivE,EAAa9F,SAAU0C,EAAQT,IAEnCW,GAAel3E,EAAAA,EAAAA,KAAQ,KAC3B,GAAImL,IAASqvE,EAAAA,GAAAA,SAGb,OAqSJ,SAAyBnlD,EAAkBkhD,EAA+Ce,GACxF,MACMD,EAAiB,GZxZlB,SAA4BlE,GACjC,MAAM2E,EAAW5E,GAAeC,GAChC,OAAOL,GAAMgF,IAAuB,GYqZf+C,CAAmBxlD,EAAM89C,gBACJ99C,EAAM89C,WAAWr/C,OAAO,KAC5DyjD,EAAkBliD,EAAM2+C,YACzB,GAAE3+C,EAAM2+C,gBAAgB3+C,EAAM6+C,SAAS7+C,EAAM8+C,mBAC9C7zE,GACE,MAAE+zE,EAAO9jD,SAAUjW,GAAS+a,EAC5BolD,EAAiBlE,EAAkBuE,GAAmBvE,EAAiBlhD,EAAMi/C,eAAYh0E,EAE/F,MAAO,CACL+2E,cAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAj9D,KAAAA,EACA+5D,MAAAA,EACAmD,eAPqBiD,MAAAA,OAAH,EAAGA,EAAgBj8D,OA7S9Bu8D,CAAgBX,EAAc7D,EAAiB4C,GAAkB,MACvE,CAAChuE,EAAMivE,EAAc7D,EAAiB4C,IA2EnC6B,GAAkBl9E,EAAAA,EAAAA,KAAY,KAClC,MAAM,SAAE82E,GAAawF,EACfa,EA0OV,SAAwBb,GACtB,MAAM,YACJpG,EADI,YAEJC,EAFI,KAGJC,EAHI,MAIJ7+C,EAJI,YAKJ8+C,EALI,SAMJC,EACA7jD,SAAUjW,EAPN,MAQJ+5D,EARI,MASJl/C,GACEilD,EAWJ,MAAO,CACL9/D,KAAAA,EACA+5D,MAAAA,EACAl/C,MAAAA,EACAoiD,gBAbsB,CACtBvD,YAAAA,EACAC,YAAAA,EACAC,KAAAA,EACA7+C,MAAAA,EACA8+C,YAAAA,EACAC,SAAAA,IA7PoB8G,CAAed,GACnCL,EAAsB,CAAEkB,YAAAA,EAAarG,SAAAA,MACpC,CAACmF,EAAuBK,IAErBe,GAAkBr9E,EAAAA,EAAAA,KAAY,KAClC,MAAMs9E,EAmQV,SAAwBhB,GACtB,MAAM,WACJjH,EADI,WACQoB,EADR,OACoBC,EADpB,IAC4BC,EAD5B,eACiCC,EADjC,WACiDC,GACnDyF,GACGiB,EAAaC,GAAc9G,EAAO7jD,MAAM,KAW/C,MAAO,CACLuN,KAXW,CACXi1C,WAAAA,EACAoB,WAAAA,EACA8G,YAAAA,EACAC,WAAAA,EACA7G,IAAAA,EACA99B,QAAS+9B,EACT6G,IAAK5G,IA/Qe6G,CAAepB,GACnCF,EAAoB,CAClBkB,YAAAA,MAED,CAAClB,EAAqBE,IAEnBqB,GAAW39E,EAAAA,EAAAA,KAAY,KAC3Bk8E,EAAgB,CACd0B,iBAAkBtB,EAAa9F,SAC/BO,gBAAiBuF,EAAavF,oBAE/B,CAACmF,EAAiBI,IAEfuB,GAAU79E,EAAAA,EAAAA,KAAa89E,IAC3B3B,EAAe,CAAE9uE,KAAMywE,MACtB,CAAC3B,IAEEhvB,GAAoBntD,EAAAA,EAAAA,KAAY,KAEpC,OADA2oE,GAAa,GACLt7D,GACN,KAAKqvE,EAAAA,GAAAA,aACH,OAAOQ,IACT,KAAKR,EAAAA,GAAAA,SACH,OAAOmB,EAAQnB,EAAAA,GAAAA,aACjB,KAAKA,EAAAA,GAAAA,YACH,OAAOW,IACT,KAAKX,EAAAA,GAAAA,SACH,OAAOiB,IACT,QACE,MAAO,UAEV,CAACtwE,EAAM6vE,EAAiBW,EAASR,EAAiBM,IAE/CngE,GAActb,EAAAA,EAAAA,KAAQ,KAC1B,OAAQmL,GACN,KAAKqvE,EAAAA,GAAAA,aACH,OAAOz8E,EAAK,uBACd,KAAKy8E,EAAAA,GAAAA,SACH,OAAOz8E,EAAK,yBACd,KAAKy8E,EAAAA,GAAAA,YACH,OAAOz8E,EAAK,mBACd,KAAKy8E,EAAAA,GAAAA,SACH,OAAOz8E,EAAK,mBACd,QACE,MAAO,MAEV,CAACoN,EAAMpN,IAEJ89E,GAAa77E,EAAAA,EAAAA,KAAQ,KACzB,OAAQmL,GACN,KAAKqvE,EAAAA,GAAAA,SACH,OAAOz8E,EAAK,qBAAqB44E,EAAAA,GAAAA,GAAeQ,EAAYX,EAAUz4E,EAAKinB,OAC7E,QACE,OAAOjnB,EAAK,WAEf,CAACoN,EAAMpN,EAAMy4E,EAAUW,IAE1B,OAAIoC,EAEA,mBAAC79D,GAAA,EAAD,CACEvd,UAAU,QACV+B,OAAQA,EACRwG,QAASA,GAET,qGAC6E,8BAD7E,iDAIA,mBAACvG,EAAA,EAAD,CACE0e,QAAM,EACNzgB,QAASsI,GAER3I,EAAK,QAOZ,mBAAC2d,GAAA,EAAD,CACEvd,UAAU,eACV+B,OAAQA,EACRwG,QAASA,GAET,0BAAKvI,UAAU,SAASO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChD,mBAACH,EAAA,EAAD,CACEhC,UAAU,eACVkC,MAAM,cACND,OAAK,EACL7B,KAAK,UACLH,QAASsI,EACTnG,UAAU,SAEV,wBAAGpC,UAAU,gBAEf,6BAAKmd,SAEGhb,IAAT6K,EACC,mBAACiP,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAWlP,IACjC,IACC,0BAAKhN,UAAU,yBA9JzB,SAA4B29E,GAC1B,OAAQA,GACN,KAAKtB,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEnlD,MAAO+kD,EACP56C,SAAU66C,EACV3E,YAAapuE,QAAQqyE,GACrBpE,UAAWjuE,QAAQoyE,GAAkBI,GACrCtE,UAAWluE,QAAQmyE,GAAkBI,GACrCpE,SAAUnuE,QAAQkyE,KAGxB,KAAKgB,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACEnlD,MAAO+kD,EACP56C,SAAU66C,EACV9D,gBAAiBA,GAAmB,GACpCC,SAAUA,IAGhB,KAAKgE,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACEnlD,MAAO+kD,EACP56C,SAAU66C,EACV/B,mBAAoBhxE,SAAS+xE,GAAmBf,GAChDC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,IAGf,KAAK+B,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACExD,OAAQA,EACRC,eAAgBmD,EAAa9F,UAAYiC,EACrCmE,GAAkBnE,EAAiB6D,EAAa9F,eAChDh0E,EACJ62E,WAAYA,EACZJ,eAAgBA,EAChBG,aAAcA,EACdV,SAAUA,IAGhB,QACE,QAgHOuF,CAAmB5wE,MAK1B,0BAAKhN,UAAU,iBACb,mBAAC6Q,EAAA,EAAD,CAAS3O,MAAM,UAGnB,0BAAKlC,UAAU,UACb,mBAACgC,EAAA,EAAD,CACEkL,KAAK,SACLjN,QAAS6sD,EACT//C,SAAU6mB,EACVA,UAAWA,GAEV8pD,IAGJ99D,IAAUA,EAAMu8D,OAxMrB,WACE,GAAKv8D,EAGL,OACE,mBAACrC,GAAA,EAAD,CACEvd,UAAU,QACV+B,OAAQoH,QAAQyW,GAChBrX,QAAS6zE,GAET,6BAAKx8D,EAAMoK,aAAe,SAC1B,4BAAIpK,EAAMoK,aAAe,SACzB,mBAAChoB,EAAA,EAAD,CACE0e,QAAM,EACNzgB,QAAS+7E,GAERp8E,EAAK,QAwLgBi+E,QAqEhC,SAASlB,GAAmBvE,EAAmC0F,GAC7D,OAAO1F,EAAgBzzC,MAAK,EAAGvnC,GAAAA,KAASA,IAAO0gF,IAGjD,SAASvB,GAAkBnE,EAAmCkE,GAC5D,MAAMriB,EAAS0iB,GAAmBvE,EAAiBkE,GACnD,OAAOriB,MAAAA,OAAP,EAAOA,EAAQ4e,OC5XjB,MA0DA,IAAel4E,EAAAA,EAAAA,KAAKjC,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAEo/E,GAAYp/E,EAAOw8E,SACrB,SACJ9C,EADI,OAEJQ,EAFI,KAGJmF,EAHI,YAIJC,EAJI,iBAKJC,EALI,eAMJpF,EANI,eAOJO,EAPI,SAQJJ,EARI,KASJh2E,EATI,MAUJod,GACG09D,GAAW,GAEhB,MAAO,CACL1F,SAAAA,EACAQ,OAAAA,EACAmF,KAAAA,EACAC,YAAAA,EACAC,iBAAAA,EACApF,eAAAA,EACAO,eAAAA,EACAJ,SAAAA,EACAh2E,KAAAA,EACAod,MAAAA,KA1Bc3hB,EA1D4B,EAC9CqD,OAAAA,EACAwG,QAAAA,EACAswE,OAAAA,EACAC,eAAAA,EACAmF,YAAAA,EACA5F,SAAAA,EACA2F,KAAAA,EACA/E,SAAAA,EACAh2E,KAAAA,EACAod,MAAAA,EACA69D,iBAAAA,EACA7E,eAAAA,MAEA,MAAMz5E,GAAOC,EAAAA,EAAAA,KACPk5E,GAAel3E,EAAAA,EAAAA,KAAQ,IA0E/B,SAAyBq3E,EACvB8E,EAKA3E,GACA,IAAK2E,EACH,MAAO,CAAE9E,cAAAA,GAEX,MAAM,gBAAEE,GAAoB4E,EACtBG,EAAc/E,MAAAA,GAAAA,EAAiBvD,YAChC,GAAEuD,EAAgBvD,gBAAgBuD,EAAgBrD,SAASqD,EAAgBpD,mBAC5E7zE,GACE,MAAE+zE,EAAF,KAAS/5D,GAAS6hE,EACxB,MAAO,CACL9E,cAAAA,EACAC,gBAAiB,SACjBC,gBAAiB+E,EACjBhiE,KAAAA,EACA+5D,MAAAA,EACAmD,eAAAA,GA9FOuD,CAAgBsB,EAAkBF,EAAM3E,IAC9C,CAAC2E,EAAM3E,EAAgB6E,IAE1B,OACE,mBAAC3gE,GAAA,EAAD,CACEvd,UAAU,oCACV+B,OAAQA,EACRwG,QAASA,GAET,8BACE,0BAAKvI,UAAU,SAASO,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAChD,mBAACH,EAAA,EAAD,CACEhC,UAAU,eACVkC,MAAM,cACND,OAAK,EACL7B,KAAK,UACLH,QAASsI,EACTnG,UAAU,SAEV,wBAAGpC,UAAU,gBAEf,iCAAMJ,EAAK,kBAAX,MAEF,0BAAKI,UAAU,iCACb,mBAAC,GAAD,CACE64E,OAAQA,EACRC,eAAgBA,EAChBE,WAAYiF,EACZrF,eAAgB,CACdK,SAAAA,EACAh2E,KAAAA,EACAod,MAAAA,GAEF04D,aAAcA,EACdV,SAAUA,Y,+FC/DtB,MAAMv7B,EAAyBz6C,EAAAA,GAA0B,IAAM,IAuG/D,GAAe1B,EAAAA,EAAAA,KArGoB,EACjCizB,UAAAA,GAAY,EACZ8oB,kBAAAA,EACA98B,MAAAA,EACAmX,KAAAA,EACAzZ,YAAAA,EAAc,WACdy+B,YAAAA,EAAc,OACdC,WAAAA,EACAY,2BAAAA,EACAwhC,cAAAA,EACA/6D,SAAAA,MAGA,MAAMzW,GAAW5G,EAAAA,EAAAA,IAAyB,MACpCpG,GAAOC,EAAAA,EAAAA,MAENi3B,EAAUunD,IAAe/6E,EAAAA,EAAAA,IAAS,KAClCg7E,EAAWC,IAAgBj7E,EAAAA,EAAAA,KAAS,GAgD3C,OA9CAC,EAAAA,EAAAA,KAAU,KACHmF,EAAAA,IACHvC,YAAW,KACTyG,EAASpG,QAAS49B,UACjB0Y,KAEJ,KAEHv5C,EAAAA,EAAAA,KAAU,KACJqc,GACF/G,uBAAsB,KACpBjM,EAASpG,QAAS49B,QAClBx3B,EAASpG,QAASg4E,cAGrB,CAAC5+D,IAgCF,2BAAMuX,OAAO,GAAG9T,SAblB,SAAsBqgB,GACpBA,EAAMj4B,iBAEFmoB,GAIA0qD,GACFj7D,EAASyT,IAK6B2nD,aAAa,OACnD,0BACEz+E,WAAWmE,EAAAA,EAAAA,GAAe,6BAA8B2yB,GAAY,UAAWlX,GAAS,SACxFrf,IAAKX,EAAKoc,MAAQ,WAAQ7Z,GAE1B,4BACEwF,IAAKiF,EACL5M,UAAU,eACVkN,KAAMwvC,EAAoB,OAAS,WACnCt/C,GAAG,mBACH6P,MAAO6pB,GAAY,GACnB2nD,aAAa,mBACbtxE,SA1CR,SAA0B/I,GACpBwb,GACFo8B,IAGF,MAAM,OAAE3uC,GAAWjJ,EACnBi6E,EAAYhxE,EAAOJ,OACnBsxE,EAAalxE,EAAOJ,MAAM3O,QAAUogF,EAAAA,IAChCN,GACFA,EAAc/wE,EAAOJ,QAkCjB1M,IAAI,SAEN,gCAAQqf,GAASmX,GAAQzZ,GACzB,0BACEtd,UAAU,kBACVC,QAnCR,WACE28C,GAA4BF,IAmCtBp2B,KAAK,SACLC,SAAU,EACVlG,MAAM,8BAEN,wBAAGrgB,UAAW08C,EAAoB,WAAa,sBAGlD4hC,GACC,mBAAC,IAAD,CAAQpxE,KAAK,SAASrF,QAAM,EAAC+rB,UAAWA,GACrCmoB,Q,sFCxGX,MACM4iC,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAC3CC,EAAez8E,EAAAA,GAA0B08E,EAAAA,GAA2BC,EAAAA,GAsD1E,GAAer+E,EAAAA,EAAAA,KApDsB,EAAG+7C,kBAAAA,EAAmBD,MAAAA,MACzD,MAAOwiC,EAAiBC,IAAsB57E,EAAAA,EAAAA,OACvC67E,EAAgBC,IAAqB97E,EAAAA,EAAAA,OACrC+7E,EAAqBC,IAA0Bh8E,EAAAA,EAAAA,KAAS,IACxDi8E,EAAaC,IAAkBl8E,EAAAA,EAAAA,KAAS,IAE/CC,EAAAA,EAAAA,KAAU,KACH07E,EAGH94E,YAAW,IAAMq5E,GAAe,IAhBP,MAczB5/C,EAAAA,EAAAA,GAAiB,eAAeC,KAAKq/C,KAItC,CAACD,KAEJ17E,EAAAA,EAAAA,KAAU,KACH47E,IACHv/C,EAAAA,EAAAA,GAAiB,cAAcC,KAAKu/C,KAErC,CAACD,IAEJ,MAAMM,GAAwB9/E,EAAAA,EAAAA,KAAY,IAAM2/E,GAAuB,IAAO,IAE9E,OACE,0BAAKliF,GAAG,SAAS4C,UAAWy8C,EAAQ,MAAQ,KACxC4iC,GACA,0BAAKr/E,UAAU,mBAEhBi/E,GACC,mBAAC,IAAD,CACE7hF,GAAG,cACHgD,KAAMq8C,EAAQijC,EAAAA,GAAsBZ,EACpC9+E,UAAWu/E,EAAc,SAAW,QACpChgD,cAAe0/C,EACfU,YAAahB,EACbn+C,QAAM,EACNC,OAAQg/C,IAGXN,GACC,mBAAC,IAAD,CACE/hF,GAAG,aACHgD,KAAMq8C,EAAQijC,EAAAA,GAAsBZ,EACpC9+E,UAAWu/E,EAAc,QAAU,SACnChgD,cAAe4/C,EACfQ,YAAajjC,EAAoBkiC,EAAsBC,EACvDr+C,QAAM,S,uDCjCT,MAAMo/C,EAA0B,CACrCC,W,QACAC,e,QACAC,Y,QACAC,W,QACAC,W,QACAC,W,QACAC,iB,QACAC,W,QACAC,W,QACAC,Y,QACAC,Q,QACAC,e,QACAC,U,QACAC,W,QACAC,c,QAGa,SAAS/gD,EAAiBzjB,GACvC,MAAMykE,EAAOhB,EAAwBzjE,GAAMyJ,QAAQ7hB,OAAO88E,SAAShlF,OAAQ,IAE3E,OAAOwsD,EAAAA,GAAmB,OAAMu4B,IAAQhsE,EAAAA,GAAAA,U,kHCzC1C,MAAMksE,EAAiE,CACrE5zE,KAAM,OACN6zE,QAAS,EACTzL,OAAQ,OACR0L,QAAQ,GAIV,IAAIC,EACAC,EAWAC,EAwCJ,MAwDA,GAAexgF,EAAAA,EAAAA,KAxDiB,EAAGw1D,KAAAA,EAAMhpD,SAAAA,EAAU5E,QAAAA,MACjD,MAAO64E,EAAgBC,IAAqB/9E,EAAAA,EAAAA,KAAS,IAErDC,EAAAA,EAAAA,KAAU,KACH4yD,IAIAirB,EA9CT9yC,eAA2BgzC,GACzB,IACE,MAAMC,EAAgBxlF,SAASod,eAAe,eAC9C,IAAKooE,EACH,OAGF,MAAM,YAAExyC,EAAF,aAAevxC,GAAiB+jF,EAEtCJ,EAAU,IAAIF,EAAQM,EAAe,CACnCC,YAAY,EACZC,SAAU,CACRh7E,MAAOsoC,EACPrrC,OAAQlG,GAEVkkF,SAAU,CACRj7E,MAAOsoC,EAAc,GACrBrrC,OAAQlG,EAAe,GACvB0P,KAAM,YAIV,MAAMm/B,QAAgBs1C,EAAAA,EAAAA,IAAcL,SAC9BH,EAAQS,KAAK,CAAE35E,IAAKokC,IAC1B,MAAOw1C,GACHC,EAAAA,IAEFC,QAAQniE,MAAMiiE,IAyBhBG,CAAY7rB,GA/DhB7nB,iBAME,OALK4yC,IACHA,EAAiB,qDACjBD,SAAiBC,GAAgBjjB,SAG5BijB,EAoDHe,GAAgBpiD,MAAK,IAAMwhD,GAAkB,QAM9C,CAAClrB,EAAMirB,IAEV,MAAMxhF,GAAOC,EAAAA,EAAAA,KAab,OACE,mBAAC0d,EAAA,EAAD,CACExb,OAAQoH,QAAQgtD,GAChB5tD,QAASA,EACT8X,MAAM,qBACNrgB,UAAU,YACV+sD,gBAAc,GAEbq0B,EACC,0BAAKhkF,GAAG,gBAER,mBAAC+gB,EAAA,EAAD,MAEF,mBAACnc,EAAA,EAAD,CACEhC,UAAU,iBACViC,OAAK,EACLC,MAAM,UACNjC,QA5BNquC,iBACE,IAAK6yC,EACH,OAGF,MAAMlpC,QAA8BkpC,EAAQlpC,OAAO6oC,GAC7CoB,EAA+B,iBAAXjqC,EAAsBA,GAASkqC,EAAAA,EAAAA,IAAWlqC,EAAQ,cAE5E9qC,EAAS+0E,IAqBL9/E,UAAWxC,EAAK,cAEhB,wBAAGI,UAAU,oBC3CrB,GAAeW,EAAAA,EAAAA,KAhEsB,EACnC0f,MAAAA,EAAQ,8BACRtT,SAAAA,EACA2uB,qBAAAA,EACAvuB,SAAAA,MAEA,MAAOi1E,EAAcC,IAAmB/+E,EAAAA,EAAAA,OACjCg/E,EAAgBC,IAAqBj/E,EAAAA,EAAAA,IAA6Bo4B,IAEzEn4B,EAAAA,EAAAA,KAAU,KACRg/E,EAAkB7mD,KACjB,CAACA,IA2BJ,MAAM8mD,GAAiBr+E,EAAAA,EAAAA,GACrBm+E,GAAkB,SAClBv1E,GAAY,YAGd,OACE,0BAAK/M,UAAU,kBACb,4BACEA,UAAWwiF,EACXl8D,KAAK,SACLC,SAAU,EACVlG,MAAOA,GAEP,4BACEnT,KAAK,OACLC,SAxCR,SAA0Bu2B,GACxB,MAAMr2B,EAASq2B,EAAMr2B,OAEhBA,GAAWA,EAAOugC,OAAUvgC,EAAOugC,MAAM,KAI9Cy0C,EAAgBh1E,EAAOugC,MAAM,IAC7BvgC,EAAOJ,MAAQ,KAiCTi9B,OAAO,0BAET,wBAAGlqC,UAAU,oBACZsiF,GAAkB,0BAAKjmF,IAAKimF,EAAgB3xE,IAAI,YAEnD,mBAAC,EAAD,CAAWwlD,KAAMisB,EAAc75E,QAzBnC,WACE85E,OAAgBlgF,IAwB4CgL,SAnC9D,SAA0B+0E,GACxBG,OAAgBlgF,GAChBgL,EAAS+0E,GAELI,GACFG,IAAIC,gBAAgBJ,GAEtBC,EAAkBE,IAAIE,gBAAgBT,Y","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/common/helpers/animatedAssets.ts","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  closeMediaViewer,\n  focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'downloadMessageMedia' | 'cancelMessageMediaDownload'>;\n\nconst MediaViewerActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n  downloadMessageMedia,\n  cancelMessageMediaDownload,\n}) => {\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloading ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n\n    return {\n      isDownloading,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'downloadMessageMedia',\n    'cancelMessageMediaDownload',\n  ]),\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, {\n  FC, useState, useEffect, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, seekerRef)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedProgress: number, seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setIsControlsVisible(false);\n      }\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n    if (!isControlsVisible) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    }\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif && !IS_TOUCH_ENV ? handleMouseOver : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser, ApiDimensions,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageDocument,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions, getMessageFileSize,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl, loadProgress } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n\n        return true;\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  function renderSlide(isActive: boolean) {\n    if (isAvatar) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n            message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaBlobUrl}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n              loadProgress={loadProgress}\n              fileSize={videoSize!}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaBlobUrl || previewBlobUrl}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../modules/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  onFilterChange: (filter: string) => void;\n  loadMore: NoneToVoidFunction;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  onFilterChange,\n  onClose,\n  loadMore,\n  onSelectChatOrUser,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  useInputFocusOnOpen(filterRef, isOpen, () => { onFilterChange(''); });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat, getChatTitle, sortChatIds } from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  pinnedIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  orderedPinnedIds?: string[];\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    setForwardChatId({ id: userId });\n  }, [setForwardChatId]);\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={chatIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreChats}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url));\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(defaultSelectedDate);\n      setCurrentMonthAndYear(new Date(defaultSelectedDate.getFullYear(), defaultSelectedDate.getMonth(), 1));\n    }\n  }, [defaultSelectedDate, isOpen, prevIsOpen]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < defaultSelectedDate.getTime()) {\n      setSelectedDate(defaultSelectedDate);\n      setSelectedHours(formatInputTime(defaultSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(defaultSelectedDate.getMinutes()));\n    }\n  }, [defaultSelectedDate, isTimeInputFocused, isFutureMode, selectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date, lang));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(date, lang)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'reportMessages' | 'exitMessageSelectMode'>;\n\nconst ReportMessageModal: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  messageIds,\n  reportMessages,\n  exitMessageSelectMode,\n  onClose,\n}) => {\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined, (setGlobal, actions): DispatchProps => pick(actions, [\n    'reportMessages', 'exitMessageSelectMode',\n  ]),\n)(ReportMessageModal));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  selectedMessageIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages' | 'downloadSelectedMessages'\n)>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  selectedMessageIds,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n  downloadSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton('forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages)\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'exitMessageSelectMode', 'openForwardMenuForSelectedMessages', 'downloadSelectedMessages',\n  ]),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n  onScreenSelect,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadProfilePhotos'>;\n\nconst SettingsMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  loadProfilePhotos,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadProfilePhotos']),\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayVideos: isChecked })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption',\n  ]),\n)(SettingsDataStorage));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet, pick } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  listIds?: string[];\n  orderedPinnedIds?: string[];\n  archivedListIds?: string[];\n  archivedPinnedIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  const firstLetters = useMemo(() => {\n    if (mediaData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      <img src={mediaData} className={transitionClassNames} alt=\"\" />\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers' |\n  'timeFormat'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport useDebounce from '../../../hooks/useDebounce';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' |\n  'updateNotificationSettings' | 'updateWebNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n  updateWebNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useDebounce(500, false, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n              runDebounced(() => playNotifySound(undefined, volume));\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n    hasWebNotifications: global.settings.byKey.hasWebNotifications,\n    hasPushNotifications: global.settings.byKey.hasPushNotifications,\n    notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n  'updateWebNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<string, ApiChat>;\n  usersById?: Record<string, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../modules/helpers';\nimport searchWords from '../../../util/searchWords';\nimport { pick, unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery' | 'blockContact'>;\n\nconst BlockUserModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n  loadContactList,\n  setUserSearchQuery,\n  blockContact,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactsId = useMemo(() => {\n    const availableContactsId = (contactIds || []).concat(localContactIds || []).filter((contactId) => {\n      return !blockedIds.includes(contactId) && contactId !== currentUserId;\n    });\n\n    return unique(availableContactsId).reduce<string[]>((acc, contactId) => {\n      if (\n        !filter\n        || !usersById[contactId]\n        || searchWords(getUserFullName(usersById[contactId]) || '', filter)\n        || usersById[contactId]?.username.toLowerCase().includes(filter)\n      ) {\n        acc.push(contactId);\n      }\n\n      return acc;\n    }, [])\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactsId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadContactList', 'setUserSearchQuery', 'blockContact',\n  ]),\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n  unblockContact,\n}) => {\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isUserId, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  listIds?: string[];\n  orderedPinnedIds?: string[];\n  archivedListIds?: string[];\n  archivedPinnedIds?: string[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isUserId(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive, onReset,\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return !user || !isUserBot(user) || user.canBeInvitedToGroup;\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChatFolder } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolders'>;\n\nconst ChatFolderModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n  editChatFolders,\n}) => {\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id));\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id));\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolders']),\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst getTouchY = (e: WheelEvent | TouchEvent) => ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null) {\n  scrollLockEl = el;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  isDownloading?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onDownload?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  isDownloading,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  useEffect(() => {\n    disableScrolling(withScroll ? menuRef.current : undefined);\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      menuStyle={menuStyle}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canDownload && (\n        <MenuItem icon=\"download\" onClick={onDownload}>\n          {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n        </MenuItem>\n      )}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n} from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  activeDownloads: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage' |\n  'downloadMessageMedia' | 'cancelMessageMediaDownload'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  activeDownloads,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n  downloadMessageMedia,\n  cancelMessageMediaDownload,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        isDownloading={isDownloading}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onDownload={handleDownloadClick}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload,\n      activeDownloads,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n    'downloadMessageMedia',\n    'cancelMessageMediaDownload',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChat, selectCurrentMessageList, selectStickerSet, selectStickerSetByShortName,\n} from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../modules/helpers';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n\n    return {\n      canSendStickers,\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact,\n} from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateChatMutedState' | 'enterMessageSelectMode' | 'sendBotCommand' | 'restartBot' | 'openLinkedChat' |\n  'joinGroupCall' | 'createGroupCall' | 'addContact' | 'openCallFallbackConfirm'\n)>;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n  sendBotCommand,\n  restartBot,\n  joinGroupCall,\n  createGroupCall,\n  openLinkedChat,\n  addContact,\n  openCallFallbackConfirm,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    addContact({ userId: chatId });\n    closeMenu();\n  }, [addContact, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleCall = useCallback(() => {\n    openCallFallbackConfirm();\n    closeMenu();\n  }, [closeMenu, openCallFallbackConfirm]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n    'sendBotCommand',\n    'restartBot',\n    'joinGroupCall',\n    'createGroupCall',\n    'openLinkedChat',\n    'addContact',\n    'openCallFallbackConfirm',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<string, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    const user = usersById?.[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<string, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => a.mimeType.startsWith('audio/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={Boolean(attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          // @ts-ignore\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  isOpen, allowedAttachmentOptions, isLeftColumnShown,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n  sendBotCommand,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandMenu: FC<OwnProps & DispatchProps> = ({\n  isOpen, botCommands, onClose, sendBotCommand,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandMenu));\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('startBot' | 'openChat' | 'sendInlineBotResult')>;\n\nconst InlineBotTooltip: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  openChat,\n  startBot,\n  onSelectResult,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !renderedInlineBotResults || (!renderedInlineBotResults.length && !switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'startBot', 'openChat', 'sendInlineBotResult',\n  ]),\n)(InlineBotTooltip));\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../modules/helpers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreMembers' | 'deleteChatMember'>;\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  currentUserId,\n  isOpen,\n  onClose,\n  loadMoreMembers,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMembers = (chat.fullInfo?.members || []).filter((member) => {\n      return !member.isAdmin && !member.isOwner && member.userId !== currentUserId;\n    });\n\n    return availableMembers.reduce<string[]>((acc, member) => {\n      if (\n        !filter\n        || !usersById[member.userId]\n        || searchWords(getUserFullName(usersById[member.userId]) || '', filter)\n      ) {\n        acc.push(member.userId);\n      }\n\n      return acc;\n    }, []);\n  }, [chat.fullInfo?.members, currentUserId, filter, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      currentUserId,\n    } = global;\n\n    return { usersById, currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreMembers', 'deleteChatMember']),\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getHasAdminRight, getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  updateChatMemberBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return { chat, usersById, canDeleteMembers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  usersById: Record<string, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.adminRights) || {});\n    setCustomTitle(((selectedChatMember?.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={!!permissions.manageCall}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { pick } from '../../util/iteratees';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n// @ts-ignore\nimport CameraFlip from '../../../assets/animatedIcons/CameraFlip.tgs';\n// @ts-ignore\nimport HandFilled from '../../../assets/animatedIcons/HandFilled.tgs';\n// @ts-ignore\nimport HandOutline from '../../../assets/animatedIcons/HandOutline.tgs';\n// @ts-ignore\nimport Speaker from '../../../assets/animatedIcons/Speaker.tgs';\n// @ts-ignore\nimport VoiceAllowTalk from '../../../assets/animatedIcons/VoiceAllowTalk.tgs';\n// @ts-ignore\nimport VoiceMini from '../../../assets/animatedIcons/VoiceMini.tgs';\n// @ts-ignore\nimport VoiceMuted from '../../../assets/animatedIcons/VoiceMuted.tgs';\n// @ts-ignore\nimport VoiceOutlined from '../../../assets/animatedIcons/VoiceOutlined.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n  CameraFlip,\n  HandFilled,\n  HandOutline,\n  Speaker,\n  VoiceAllowTalk,\n  VoiceMini,\n  VoiceMuted,\n  VoiceOutlined,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","withGlobal","global","chatId","messageId","isAvatar","sender","isUserId","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","senderTitle","getSenderTitle","className","onClick","Avatar","key","size","user","chat","dir","renderText","formatMediaDateTime","date","memo","isDownloading","selectIsDownloading","mediaData","isVideo","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","undefined","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","stopEvent","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","seekerRef","useRef","isSeeking","timeout","setTimeout","clearTimeout","body","remove","handleSeek","current","width","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","loadedPercent","totalSize","captureEvents","onCapture","onRelease","onDrag","percentagePlayed","percentageBuffered","ref","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","toggleControls","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","disabled","step","value","type","onChange","Number","target","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","ANIMATION_DURATION","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isFromSharedMedia","isFromSearch","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isGhostAnimation","isFooterHidden","setIsFooterHidden","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","getMessageFileName","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","toggle","forceUpdate","useForceUpdate","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","textParts","renderMessageText","hasFooter","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","matches","getTopOffset","top","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","excludedClosestSelector","onSwipe","SwipeDirection","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","useHistoryBack","ShowTransition","isRtl","Transition","activeKey","name","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","onFilterChange","loadMore","onSelectChatOrUser","viewportIds","getMore","useInfiniteScroll","useInputFocusOnOpen","containerRef","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","setFilter","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","handleSelectUser","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","useFlag","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","getTime","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","i","push","gridDate","lastRowDaysCount","buildCalendarGrid","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","formatDateToString","code","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","activeDownloads","theme","selectTheme","isLoading","searchChatId","CURRENT_TYPE","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","onScreenSelect","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","Checkbox","checked","onCheck","isChecked","RangeSlider","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","play","noLoop","onLoad","pill","fluid","narrow","multiline","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","event","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","focus","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","find","isMinimized","canClose","isSelected","withChatType","archivedPinnedIds","chatFilter","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","stickers","firstSticker","isAnimated","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","stickerSets","installedDate","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","dataUri","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useDebounce","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","handleChange","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","blockedIds","contactIds","userSearch","setUserSearchQuery","blockContact","filteredContactsId","availableContactsId","concat","contactId","acc","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","countryList","phoneCodes","phoneCodeList","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","viewportOffset","isPrivate","CHAT_HEIGHT_PX","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","isChatGroup","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","serverTimeOffset","resultIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","isUserBot","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","onCloseAnimationEnd","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","clientY","getTouchY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","onkeydown","enableScrolling","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","menuRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","menuStyle","withScroll","useContextMenuPosition","Menu","selectActiveDownloadIds","noOptions","isScheduled","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","some","msg","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canAddContact","getCanAddContact","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","addContact","openCallFallbackConfirm","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleCall","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","setTooltipItemVisible","selector","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","isReady","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","option","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","isVideoReady","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","startBot","onSelectResult","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleAdminMemberClick","getMemberStatus","promotedByUser","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","field","handleErrorModalClose","PaymentStep","shippingOption","getShippingPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","CameraFlip","HandFilled","HandOutline","Speaker","VoiceAllowTalk","VoiceMini","VoiceMuted","VoiceOutlined","path","location","cropperResultOptions","quality","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}