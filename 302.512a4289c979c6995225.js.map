{"version":3,"file":"302.512a4289c979c6995225.js","mappings":"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","sources":["webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/ui/calls.ts","webpack://telegram-t/./src/modules/reducers/calls.ts","webpack://telegram-t/./src/modules/selectors/calls.ts","webpack://telegram-t/./src/util/deeplink.ts"],"sourcesContent":["import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\n\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\nconst DeleteMemberModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n}) => {\n  const { deleteChatMember } = getDispatch();\n\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n)(DeleteMemberModal));\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID, ALL_FOLDER_ID, DEBUG,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats, addUsers, addUserStatuses, replaceThreadParam,\n  updateChatListIds, updateChats, updateChat, updateChatListSecondaryInfo,\n  updateManagementProgress, leaveChat, replaceUsers, replaceUserStatuses,\n  replaceChats, replaceChatListIds, addChatMembers,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername, selectThreadTopMessageId,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, isChatBasicGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds = new Set<string>();\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n      const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n      if (!nextChatId) {\n        return;\n      }\n\n      preloadedChatIds.add(nextChatId);\n\n      actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat && chat.lastMessage && chat.lastMessage.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openLinkedChat', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const chatFullInfo = await callApi('fetchFullChat', chat);\n\n    if (chatFullInfo?.fullInfo?.linkedChatId) {\n      actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n    }\n  })();\n});\n\naddReducer('focusMessageInComments', (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n    if (!result) {\n      return;\n    }\n\n    actions.focusMessage({ chatId, threadId, messageId });\n  })();\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadAllChats', (global, actions, payload) => {\n  const listType = payload.listType as 'active' | 'archived';\n  let { shouldReplace, onReplace } = payload;\n  let i = 0;\n\n  (async () => {\n    while (shouldReplace || !getGlobal().chats.isFullyLoaded[listType]) {\n      if (i++ >= INFINITE_LOOP_MARKER) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error('`actions/loadAllChats`: Infinite loop detected');\n        }\n\n        return;\n      }\n\n      global = getGlobal();\n\n      if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n        return;\n      }\n\n      const listIds = !shouldReplace && global.chats.listIds[listType];\n      const oldestChat = listIds\n        ? listIds\n          /* eslint-disable @typescript-eslint/no-loop-func */\n          .map((id) => global.chats.byId[id])\n          .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n          /* eslint-enable @typescript-eslint/no-loop-func */\n          .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n        : undefined;\n\n      await loadChats(listType, oldestChat?.id, oldestChat?.lastMessage!.date, shouldReplace);\n\n      if (shouldReplace) {\n        onReplace?.();\n        shouldReplace = false;\n      }\n    }\n  })();\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openChatByInvite', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('openChatByInvite', hash);\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.chatId });\n  })();\n});\n\naddReducer('openChatByPhoneNumber', (global, actions, payload) => {\n  const { phoneNumber } = payload!;\n\n  (async () => {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID });\n\n    const chat = await fetchChatByPhoneNumber(phoneNumber);\n    if (!chat) {\n      actions.openPreviousChat();\n      actions.showNotification({\n        message: langProvider.getTranslation('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      });\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  })();\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  const [part1, part2, part3] = uri.pathname.split('/').filter(Boolean).map((l) => decodeURI(l));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    actions.openChatByPhoneNumber({ phoneNumber: part1.substr(1, part1.length - 1) });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    actions.openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers') {\n    actions.openStickerSetShortName({\n      stickerSetShortName: part2,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    actions.joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    actions.focusMessage({\n      chatId,\n      messageId,\n    });\n  } else {\n    actions.openChatByUsername({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      commentId,\n      startParam: params.start,\n    });\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam,\n  } = payload!;\n\n  (async () => {\n    const chat = selectCurrentChat(global);\n\n    if (!commentId) {\n      if (chat && chat.username === username) {\n        actions.focusMessage({ chatId: chat.id, messageId });\n        return;\n      }\n      await openChatByUsername(actions, username, messageId, startParam);\n      return;\n    }\n\n    const { chatId, type } = selectCurrentMessageList(global) || {};\n    const usernameChat = selectChatByUsername(global, username);\n    if (chatId && usernameChat && type === 'thread') {\n      const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n      if (threadInfo && threadInfo.chatId === chatId) {\n        actions.focusMessage({\n          chatId: threadInfo.chatId,\n          threadId: threadInfo.threadId,\n          messageId: commentId,\n        });\n        return;\n      }\n    }\n\n    if (!messageId) return;\n\n    await openCommentsByUsername(actions, username, messageId, commentId);\n  })();\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = Boolean(bannedRights.viewMessages);\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const chatAfterUpdate = await callApi('fetchFullChat', chat);\n    const newGlobal = getGlobal();\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<string, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo!.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo?.members?.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChatMembers(global, chat, members);\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddReducer('setChatEnabledReactions', (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  (async () => {\n    await callApi('setChatEnabledReactions', {\n      chat,\n      enabledReactions,\n    });\n\n    await loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived', offsetId?: string, offsetDate?: number, shouldReplace = false,\n) {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    const currentChat = selectCurrentChat(global);\n    const visibleChats = currentChat ? [currentChat] : [];\n\n    const visibleUsers = selectVisibleUsers(global) || [];\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, fullInfo, groupCall } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getDispatch()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber(phoneNumber: string) {\n  const global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const chat = await callApi('getChatByPhoneNumber', phoneNumber);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n  startParam?: string,\n) {\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat } from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { ApiGroupCall } from '../../../api/types';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { addChats, addUsers } from '../../reducers';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nconst joinAudio = new Audio('./voicechat_join.mp3');\nconst connectingAudio = new Audio('./voicechat_connecting.mp3');\nconnectingAudio.loop = true;\nconst leaveAudio = new Audio('./voicechat_leave.mp3');\nconst allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n\nconst sounds: Record<string, HTMLAudioElement> = {\n  join: joinAudio,\n  allowTalk: allowTalkAudio,\n  leave: leaveAudio,\n  connecting: connectingAudio,\n};\n\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nconst initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  initializationPromise = Promise.all(Object.values(sounds).map((l) => {\n    l.muted = true;\n    l.volume = 0.0001;\n    return l.play().then(() => {\n      l.pause();\n      l.volume = 1;\n      l.currentTime = 0;\n      l.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddReducer('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isGroupCallPanelHidden: !global.groupCalls.isGroupCallPanelHidden,\n    },\n  };\n});\n\naddReducer('subscribeToGroupCallUpdates', (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  (async () => {\n    if (subscribed) {\n      await fetchGroupCall(groupCall);\n      await fetchGroupCallParticipants(groupCall);\n    }\n\n    await callApi('toggleGroupCallStartSubscription', {\n      subscribed,\n      call: groupCall,\n    });\n  })();\n});\n\naddReducer('createGroupCall', (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('createGroupCall', {\n      peer: chat,\n    });\n\n    if (!result) return;\n\n    global = getGlobal();\n    setGlobal(updateGroupCall(global, result.id, {\n      ...result,\n      chatId,\n    }));\n\n    actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n  })();\n});\n\naddReducer('createGroupCallInviteLink', (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const canInvite = Boolean(chat.username);\n\n  (async () => {\n    let { inviteLink } = chat.fullInfo!;\n    if (canInvite) {\n      inviteLink = await callApi('exportGroupCallInvite', {\n        call: groupCall,\n        canSelfUnmute: false,\n      });\n    }\n\n    if (!inviteLink) {\n      return;\n    }\n\n    copyTextToClipboard(inviteLink);\n    actions.showNotification({\n      message: 'Link copied to clipboard',\n    });\n  })();\n});\n\naddReducer('joinVoiceChatByLink', (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  (async () => {\n    const chat = await fetchChatByUsername(username);\n\n    if (!chat) {\n      actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n      return;\n    }\n\n    const full = await loadFullChat(chat);\n\n    if (full?.groupCall) {\n      actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n    }\n  })();\n});\n\naddReducer('joinGroupCall', (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  (async () => {\n    await initializeSoundsForSafari();\n    const { groupCalls: { activeGroupCallId } } = global;\n    let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n    if (groupCall?.id === activeGroupCallId) {\n      actions.toggleGroupCallPanel();\n      return;\n    }\n\n    if (activeGroupCallId) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n      });\n      return;\n    }\n\n    if (groupCall && activeGroupCallId === groupCall.id) {\n      actions.toggleGroupCallPanel();\n      return;\n    }\n\n    if (!groupCall && (!id || !accessHash)) {\n      groupCall = await fetchGroupCall({\n        id,\n        accessHash,\n      });\n    }\n\n    if (!groupCall) return;\n\n    global = getGlobal();\n\n    global = updateGroupCall(\n      global,\n      groupCall.id,\n      {\n        ...groupCall,\n        inviteHash,\n      },\n      undefined,\n      groupCall.participantsCount + 1,\n    );\n\n    setGlobal({\n      ...global,\n      groupCalls: {\n        ...global.groupCalls,\n        activeGroupCallId: groupCall.id,\n        isGroupCallPanelHidden: false,\n      },\n    });\n  })();\n});\n\naddReducer('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  if (initializationPromise) {\n    initializationPromise.then(() => {\n      safePlay(sounds[sound]);\n    });\n  } else {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    safePlay(sounds[sound]);\n  }\n});\n\naddReducer('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\naddReducer('openCallFallbackConfirm', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isFallbackConfirmOpen: true,\n    },\n  };\n});\n\naddReducer('closeCallFallbackConfirm', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isFallbackConfirmOpen: false,\n    },\n  };\n});\n","import { GroupCallParticipant } from '../../lib/secret-sauce';\nimport { GlobalState } from '../../global/types';\nimport { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter((l) => !l.isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import { GlobalState } from '../../global/types';\nimport { selectChat } from './chats';\nimport { getUserFullName, isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectCallFallbackChannelTitle(global: GlobalState) {\n  const currentUser = selectUser(global, global.currentUserId!);\n\n  return `Calls: ${getUserFullName(currentUser!)}`;\n}\n","import { getDispatch } from '../lib/teact/teactn';\nimport { IS_SAFARI } from './environment';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url';\n\nexport const processDeepLink = (url: string) => {\n  const {\n    protocol, searchParams, pathname, hostname,\n  } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openChatByPhoneNumber,\n    openStickerSetShortName,\n    focusMessage,\n    joinVoiceChatByLink,\n  } = getDispatch();\n\n  // Safari thinks the path in tg://path links is hostname for some reason\n  const method = (IS_SAFARI ? hostname : pathname).replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain, phone, post, comment, voicechat, livestream, start,\n      } = params;\n\n      if (domain !== 'telegrampassport') {\n        if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n          joinVoiceChatByLink({\n            username: domain,\n            inviteHash: voicechat || livestream,\n          });\n        } else if (phone) {\n          openChatByPhoneNumber({ phone });\n        } else {\n          openChatByUsername({\n            username: domain,\n            messageId: Number(post),\n            commentId: Number(comment),\n            startParam: start,\n          });\n        }\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: `-${channel}`,\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n"],"names":["memo","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","isOpen","onClose","deleteChatMember","getDispatch","lang","useLang","handleDeleteChatMember","useCallback","chatId","id","onEnter","className","title","renderText","color","isText","onClick","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","getGlobal","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","serverTimeOffset","lastLocalServiceMessage","selectLastServiceNotification","message","chatIds","length","shift","currentChat","visibleChats","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","chats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","forEach","replaceThreadParam","MAIN_THREAD_ID","replyingToById","isFullyLoaded","setGlobal","loadFullChat","fullInfo","groupCall","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","addReducer","actions","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","selectChat","hasUnreadMark","toggleChatUnread","lastMessage","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","type","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","openChatByUsername","TIPS_USERNAME","onReplace","DEBUG","console","error","connectionState","authState","listIds","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","date","force","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isMuted","about","photo","memberIds","chatCreation","progress","ChatCreationProgress","createdChannel","channelId","accessHash","createChannel","leaveChat","createdChat","e","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","includedId","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","hash","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","showNotification","langProvider","replace","url","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","part1","part2","part3","pathname","split","l","decodeURI","params","fromEntries","searchParams","openChatByPhoneNumber","substr","openChatByInvite","openStickerSetShortName","stickerSetShortName","chatOrChannelPostId","Number","commentId","comment","hasOwnProperty","joinVoiceChatByLink","inviteHash","voicechat","livestream","startParam","start","channelPostId","startBot","botId","param","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","newGlobal","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","activeChatFolder","offset","addChatMembers","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","audioElement","audioContext","joinAudio","Audio","connectingAudio","loop","leaveAudio","sounds","join","allowTalk","leave","connecting","initializationPromise","resolve","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","groupCalls","isGroupCallPanelHidden","subscribed","peer","joinGroupCall","selectActiveGroupCall","canInvite","inviteLink","canSelfUnmute","copyTextToClipboard","full","ARE_CALLS_SUPPORTED","ctx","window","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","connect","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","silence","safePlay","createAudioElement","values","muted","volume","play","then","currentTime","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","toggleGroupCallPanel","sound","isFallbackConfirmOpen","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","toString","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","participantId","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectCallFallbackChannelTitle","currentUser","getUserFullName","protocol","hostname","method","IS_SAFARI","value","key","domain","phone","post","invite","set"],"sourceRoot":""}